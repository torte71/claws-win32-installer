#! /bin/sh
patch -p1 -f $* < $0
exit $?

diff -ruN webkitgtk-2.4.11-orig/Source/JavaScriptCore/llint/LLIntAssembly.h webkitgtk-2.4.11/Source/JavaScriptCore/llint/LLIntAssembly.h
--- webkitgtk-2.4.11-orig/Source/JavaScriptCore/llint/LLIntAssembly.h	1970-01-01 01:00:00.000000000 +0100
+++ webkitgtk-2.4.11/Source/JavaScriptCore/llint/LLIntAssembly.h	2018-01-28 20:32:33.203047912 +0100
@@ -0,0 +1,6375 @@
+// offlineasm input hash: 355ddfb8b888ef836aa1a26ec493ab5b4e0a48da 0f12f4f7cad36884177c69a4418e3ab9559eff4d 6b2c4655da75c4709c729f40d002936f5f5ca1f0
+//#if !OFFLINE_ASM_ARMv7s && OFFLINE_ASM_JSVALUE64 && !OFFLINE_ASM_BIG_ENDIAN && OFFLINE_ASM_C_LOOP && !OFFLINE_ASM_ASSERT_ENABLED && !OFFLINE_ASM_ARM && !OFFLINE_ASM_ARMv7 && !OFFLINE_ASM_ARMv7_TRADITIONAL && !OFFLINE_ASM_ARM64 && !OFFLINE_ASM_MIPS && !OFFLINE_ASM_SH4 && !OFFLINE_ASM_X86 && !OFFLINE_ASM_X86_64 && !OFFLINE_ASM_EXECUTION_TRACING && !OFFLINE_ASM_ALWAYS_ALLOCATE_SLOW && !OFFLINE_ASM_GGC
+OFFLINE_ASM_BEGIN
+
+OFFLINE_ASM_GLUE_LABEL(llint_begin)
+    CRASH();                                                 // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:197
+
+OFFLINE_ASM_GLUE_LABEL(llint_program_prologue)
+    t2.i = rRetVPC.i;                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:216
+    *CAST<intptr_t*>(cfr.i8p + 8) = t2.i;                    // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:339
+    t1.i = *CAST<intptr_t*>(cfr.i8p + 16);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:322
+    {                                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:344
+        int32_t temp = *CAST<int32_t*>(t1.i8p + 424) + int32_t(0x5);
+        *CAST<int32_t*>(t1.i8p + 424) = temp;
+        if (temp < 0)
+            goto  _offlineasm_prologue__continue;
+    }
+    {                                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:64
+        ExecState* exec = CAST<ExecState*>(cfr.vp);
+        Instruction* pc = CAST<Instruction*>(rPC.vp);
+        SlowPathReturnType result = llint_entry_osr(exec, pc);
+        decodeResult(result, t0.instruction, t1.vp);
+    }
+    cfr.i = t1.i;                                            // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:346
+    if (t0.i == 0)                                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:347
+        goto _offlineasm_prologue__recover;
+    t2.i = *CAST<intptr_t*>(cfr.i8p + 8);                    // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:348
+    rRetVPC.i = t2.i;                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:227
+    opcode = t0.opcode;                                      // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:350
+    DISPATCH_OPCODE();
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_prologue__recover)
+    t1.i = *CAST<intptr_t*>(cfr.i8p + 16);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:322
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_prologue__continue)
+    rBasePC.i = *CAST<intptr_t*>(t1.i8p + 104);              // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:358
+    rPC.i = intptr_t(0x0);                                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:359
+    rPC.i = rPC.i + intptr_t(0x0);                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:31
+    opcode = *CAST<Opcode*>(rBasePC.i8p + (rPC.i << 3));     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:27
+    DISPATCH_OPCODE();
+
+OFFLINE_ASM_GLUE_LABEL(llint_eval_prologue)
+    t2.i = rRetVPC.i;                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:216
+    *CAST<intptr_t*>(cfr.i8p + 8) = t2.i;                    // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:339
+    t1.i = *CAST<intptr_t*>(cfr.i8p + 16);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:322
+    {                                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:344
+        int32_t temp = *CAST<int32_t*>(t1.i8p + 424) + int32_t(0x5);
+        *CAST<int32_t*>(t1.i8p + 424) = temp;
+        if (temp < 0)
+            goto  _offlineasm_0_prologue__continue;
+    }
+    {                                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:64
+        ExecState* exec = CAST<ExecState*>(cfr.vp);
+        Instruction* pc = CAST<Instruction*>(rPC.vp);
+        SlowPathReturnType result = llint_entry_osr(exec, pc);
+        decodeResult(result, t0.instruction, t1.vp);
+    }
+    cfr.i = t1.i;                                            // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:346
+    if (t0.i == 0)                                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:347
+        goto _offlineasm_0_prologue__recover;
+    t2.i = *CAST<intptr_t*>(cfr.i8p + 8);                    // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:348
+    rRetVPC.i = t2.i;                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:227
+    opcode = t0.opcode;                                      // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:350
+    DISPATCH_OPCODE();
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_0_prologue__recover)
+    t1.i = *CAST<intptr_t*>(cfr.i8p + 16);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:322
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_0_prologue__continue)
+    rBasePC.i = *CAST<intptr_t*>(t1.i8p + 104);              // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:358
+    rPC.i = intptr_t(0x0);                                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:359
+    rPC.i = rPC.i + intptr_t(0x0);                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:31
+    opcode = *CAST<Opcode*>(rBasePC.i8p + (rPC.i << 3));     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:27
+    DISPATCH_OPCODE();
+
+OFFLINE_ASM_GLUE_LABEL(llint_function_for_call_prologue)
+    t2.i = rRetVPC.i;                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:216
+    *CAST<intptr_t*>(cfr.i8p + 8) = t2.i;                    // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:339
+    t1.i = *CAST<intptr_t*>(cfr.i8p + 32);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:303
+    t1.i = *CAST<intptr_t*>(t1.i8p + 24);                    // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:307
+    t1.i = *CAST<intptr_t*>(t1.i8p + 120);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:308
+    {                                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:344
+        int32_t temp = *CAST<int32_t*>(t1.i8p + 424) + int32_t(0x5);
+        *CAST<int32_t*>(t1.i8p + 424) = temp;
+        if (temp < 0)
+            goto  _offlineasm_1_prologue__continue;
+    }
+    {                                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:64
+        ExecState* exec = CAST<ExecState*>(cfr.vp);
+        Instruction* pc = CAST<Instruction*>(rPC.vp);
+        SlowPathReturnType result = llint_entry_osr_function_for_call(exec, pc);
+        decodeResult(result, t0.instruction, t1.vp);
+    }
+    cfr.i = t1.i;                                            // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:346
+    if (t0.i == 0)                                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:347
+        goto _offlineasm_1_prologue__recover;
+    t2.i = *CAST<intptr_t*>(cfr.i8p + 8);                    // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:348
+    rRetVPC.i = t2.i;                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:227
+    opcode = t0.opcode;                                      // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:350
+    DISPATCH_OPCODE();
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_1_prologue__recover)
+    t1.i = *CAST<intptr_t*>(cfr.i8p + 32);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:303
+    t1.i = *CAST<intptr_t*>(t1.i8p + 24);                    // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:307
+    t1.i = *CAST<intptr_t*>(t1.i8p + 120);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:308
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_1_prologue__continue)
+    *CAST<intptr_t*>(cfr.i8p + 16) = t1.i;                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:326
+    rBasePC.i = *CAST<intptr_t*>(t1.i8p + 104);              // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:358
+    rPC.i = intptr_t(0x0);                                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:359
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_functionForCallBegin)
+    t0.u = *CAST<uint32_t*>(t1.i8p + 80);                    // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:375
+    t0.i = t0.i + intptr_t(0x0);                             // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:376
+    if (t0.i == 0)                                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:378
+        goto _offlineasm_functionInitialization__argumentProfileDone;
+    t3.i = *CAST<intptr_t*>(t1.i8p + 232);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:379
+    t2.i = intptr_t(0x20) * t0.i;                            // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:380
+    t0.i = t0.i << (intptr_t(0x3) & 0x1f);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:381
+    t3.i = t3.i + t2.i;                                      // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:382
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_functionInitialization__argumentProfileLoop)
+    t2.i64 = *CAST<int64_t*>(cfr.i8p + (t0.i << 0) + intptr_t(0x28)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:385
+    t3.i = t3.i - intptr_t(0x20);                            // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:386
+    *CAST<int64_t*>(t3.i8p + 16) = t2.i64;                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:387
+    {                                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:395
+        intptr_t temp = t0.i + intptr_t(-8);
+        t0.i = temp;
+        if (temp != 0)
+            goto  _offlineasm_functionInitialization__argumentProfileLoop;
+    }
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_functionInitialization__argumentProfileDone)
+    t0.u = *CAST<uint32_t*>(t1.i8p + 56);                    // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:399
+    t0.i32 = t0.i32 + int32_t(0x1);                          // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:400
+    t0.clearHighWord();
+    t2.i = *CAST<intptr_t*>(t1.i8p + 96);                    // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:401
+    t0.i = t0.i << (intptr_t(0x3) & 0x1f);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:402
+    t0.i = cfr.i - t0.i;                                     // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:403
+    if (*CAST<uintptr_t*>(t2.i8p + 48488) <= t0.u)           // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:404
+        goto _offlineasm_functionInitialization__stackHeightOK;
+    rPC.i8p = rBasePC.i8p + (rPC.i << 3);                    // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:241
+    t3.i = rBasePC.i;                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:242
+    {                                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:64
+        ExecState* exec = CAST<ExecState*>(cfr.vp);
+        Instruction* pc = CAST<Instruction*>(rPC.vp);
+        SlowPathReturnType result = llint_stack_check(exec, pc);
+        decodeResult(result, t0.instruction, t1.vp);
+    }
+    rPC.i = t0.i;                                            // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:246
+    cfr.i = t1.i;                                            // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:247
+    rBasePC.i = t3.i;                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:248
+    rPC.i = rPC.i - rBasePC.i;                               // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:249
+    rPC.i = rPC.i >> (intptr_t(0x3) & 0x1f);                 // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:250
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_functionInitialization__stackHeightOK)
+    rPC.i = rPC.i + intptr_t(0x0);                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:31
+    opcode = *CAST<Opcode*>(rBasePC.i8p + (rPC.i << 3));     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:27
+    DISPATCH_OPCODE();
+
+OFFLINE_ASM_GLUE_LABEL(llint_function_for_construct_prologue)
+    t2.i = rRetVPC.i;                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:216
+    *CAST<intptr_t*>(cfr.i8p + 8) = t2.i;                    // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:339
+    t1.i = *CAST<intptr_t*>(cfr.i8p + 32);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:313
+    t1.i = *CAST<intptr_t*>(t1.i8p + 24);                    // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:317
+    t1.i = *CAST<intptr_t*>(t1.i8p + 128);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:318
+    {                                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:344
+        int32_t temp = *CAST<int32_t*>(t1.i8p + 424) + int32_t(0x5);
+        *CAST<int32_t*>(t1.i8p + 424) = temp;
+        if (temp < 0)
+            goto  _offlineasm_2_prologue__continue;
+    }
+    {                                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:64
+        ExecState* exec = CAST<ExecState*>(cfr.vp);
+        Instruction* pc = CAST<Instruction*>(rPC.vp);
+        SlowPathReturnType result = llint_entry_osr_function_for_construct(exec, pc);
+        decodeResult(result, t0.instruction, t1.vp);
+    }
+    cfr.i = t1.i;                                            // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:346
+    if (t0.i == 0)                                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:347
+        goto _offlineasm_2_prologue__recover;
+    t2.i = *CAST<intptr_t*>(cfr.i8p + 8);                    // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:348
+    rRetVPC.i = t2.i;                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:227
+    opcode = t0.opcode;                                      // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:350
+    DISPATCH_OPCODE();
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_2_prologue__recover)
+    t1.i = *CAST<intptr_t*>(cfr.i8p + 32);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:313
+    t1.i = *CAST<intptr_t*>(t1.i8p + 24);                    // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:317
+    t1.i = *CAST<intptr_t*>(t1.i8p + 128);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:318
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_2_prologue__continue)
+    *CAST<intptr_t*>(cfr.i8p + 16) = t1.i;                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:326
+    rBasePC.i = *CAST<intptr_t*>(t1.i8p + 104);              // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:358
+    rPC.i = intptr_t(0x0);                                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:359
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_functionForConstructBegin)
+    t0.u = *CAST<uint32_t*>(t1.i8p + 80);                    // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:375
+    t0.i = t0.i + intptr_t(-1);                              // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:376
+    if (t0.i == 0)                                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:378
+        goto _offlineasm_2_functionInitialization__argumentProfileDone;
+    t3.i = *CAST<intptr_t*>(t1.i8p + 232);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:379
+    t2.i = intptr_t(0x20) * t0.i;                            // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:380
+    t0.i = t0.i << (intptr_t(0x3) & 0x1f);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:381
+    t3.i = t3.i + t2.i;                                      // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:382
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_2_functionInitialization__argumentProfileLoop)
+    t2.i64 = *CAST<int64_t*>(cfr.i8p + (t0.i << 0) + intptr_t(0x30)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:385
+    t3.i = t3.i - intptr_t(0x20);                            // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:386
+    *CAST<int64_t*>(t3.i8p + 48) = t2.i64;                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:387
+    {                                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:395
+        intptr_t temp = t0.i + intptr_t(-8);
+        t0.i = temp;
+        if (temp != 0)
+            goto  _offlineasm_2_functionInitialization__argumentProfileLoop;
+    }
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_2_functionInitialization__argumentProfileDone)
+    t0.u = *CAST<uint32_t*>(t1.i8p + 56);                    // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:399
+    t0.i32 = t0.i32 + int32_t(0x1);                          // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:400
+    t0.clearHighWord();
+    t2.i = *CAST<intptr_t*>(t1.i8p + 96);                    // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:401
+    t0.i = t0.i << (intptr_t(0x3) & 0x1f);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:402
+    t0.i = cfr.i - t0.i;                                     // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:403
+    if (*CAST<uintptr_t*>(t2.i8p + 48488) <= t0.u)           // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:404
+        goto _offlineasm_2_functionInitialization__stackHeightOK;
+    rPC.i8p = rBasePC.i8p + (rPC.i << 3);                    // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:241
+    t3.i = rBasePC.i;                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:242
+    {                                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:64
+        ExecState* exec = CAST<ExecState*>(cfr.vp);
+        Instruction* pc = CAST<Instruction*>(rPC.vp);
+        SlowPathReturnType result = llint_stack_check(exec, pc);
+        decodeResult(result, t0.instruction, t1.vp);
+    }
+    rPC.i = t0.i;                                            // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:246
+    cfr.i = t1.i;                                            // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:247
+    rBasePC.i = t3.i;                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:248
+    rPC.i = rPC.i - rBasePC.i;                               // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:249
+    rPC.i = rPC.i >> (intptr_t(0x3) & 0x1f);                 // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:250
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_2_functionInitialization__stackHeightOK)
+    rPC.i = rPC.i + intptr_t(0x0);                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:31
+    opcode = *CAST<Opcode*>(rBasePC.i8p + (rPC.i << 3));     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:27
+    DISPATCH_OPCODE();
+
+OFFLINE_ASM_GLUE_LABEL(llint_function_for_call_arity_check)
+    t2.i = rRetVPC.i;                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:216
+    *CAST<intptr_t*>(cfr.i8p + 8) = t2.i;                    // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:339
+    t1.i = *CAST<intptr_t*>(cfr.i8p + 32);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:303
+    t1.i = *CAST<intptr_t*>(t1.i8p + 24);                    // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:307
+    t1.i = *CAST<intptr_t*>(t1.i8p + 120);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:308
+    {                                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:344
+        int32_t temp = *CAST<int32_t*>(t1.i8p + 424) + int32_t(0x5);
+        *CAST<int32_t*>(t1.i8p + 424) = temp;
+        if (temp < 0)
+            goto  _offlineasm_3_prologue__continue;
+    }
+    {                                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:64
+        ExecState* exec = CAST<ExecState*>(cfr.vp);
+        Instruction* pc = CAST<Instruction*>(rPC.vp);
+        SlowPathReturnType result = llint_entry_osr_function_for_call_arityCheck(exec, pc);
+        decodeResult(result, t0.instruction, t1.vp);
+    }
+    cfr.i = t1.i;                                            // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:346
+    if (t0.i == 0)                                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:347
+        goto _offlineasm_3_prologue__recover;
+    t2.i = *CAST<intptr_t*>(cfr.i8p + 8);                    // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:348
+    rRetVPC.i = t2.i;                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:227
+    opcode = t0.opcode;                                      // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:350
+    DISPATCH_OPCODE();
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_3_prologue__recover)
+    t1.i = *CAST<intptr_t*>(cfr.i8p + 32);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:303
+    t1.i = *CAST<intptr_t*>(t1.i8p + 24);                    // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:307
+    t1.i = *CAST<intptr_t*>(t1.i8p + 120);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:308
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_3_prologue__continue)
+    *CAST<intptr_t*>(cfr.i8p + 16) = t1.i;                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:326
+    rBasePC.i = *CAST<intptr_t*>(t1.i8p + 104);              // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:358
+    rPC.i = intptr_t(0x0);                                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:359
+    t0.u = *CAST<uint32_t*>(cfr.i8p + 40);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:391
+    if (t0.u32 >= *CAST<uint32_t*>(t1.i8p + 80))             // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:392
+        goto _offlineasm_functionForCallBegin;
+    rPC.i8p = rBasePC.i8p + (rPC.i << 3);                    // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:241
+    t3.i = rBasePC.i;                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:242
+    {                                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:64
+        ExecState* exec = CAST<ExecState*>(cfr.vp);
+        Instruction* pc = CAST<Instruction*>(rPC.vp);
+        SlowPathReturnType result = slow_path_call_arityCheck(exec, pc);
+        decodeResult(result, t0.instruction, t1.vp);
+    }
+    if (t0.i32 == 0)                                         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:395
+        goto _offlineasm_functionArityCheck__isArityFixupNeeded;
+    cfr.i = t1.i;                                            // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:396
+    goto llint_throw_from_slow_path_trampoline;              // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:397
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_functionArityCheck__isArityFixupNeeded)
+    if (t1.i32 == 0)                                         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:400
+        goto _offlineasm_functionArityCheck__continue;
+    // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:402
+    // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:403
+    t1.i64 = -t1.i64;
+    t3.i = cfr.i;                                            // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:404
+    t2.u = *CAST<uint32_t*>(cfr.i8p + 40);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:405
+    t2.i32 = t2.i32 + int32_t(0x6);                          // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:406
+    t2.clearHighWord();
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_functionArityCheck__copyLoop)
+    t0.i64 = *CAST<int64_t*>(t3.i8p);                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:408
+    *CAST<int64_t*>(t3.i8p + (t1.i << 3)) = t0.i64;          // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:409
+    t3.i = t3.i + intptr_t(0x8);                             // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:410
+    {                                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:411
+        int32_t temp = t2.i32 - int32_t(0x1);
+        t2.i32 = temp;
+        if (temp != 0)
+            goto  _offlineasm_functionArityCheck__copyLoop;
+    }
+    // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:413
+    // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:414
+    t2.i = t1.i;
+    t0.i = intptr_t(0xa);                                    // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:415
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_functionArityCheck__fillLoop)
+    *CAST<int64_t*>(t3.i8p + (t1.i << 3)) = t0.i64;          // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:417
+    t3.i = t3.i + intptr_t(0x8);                             // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:418
+    {                                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:419
+        int32_t temp = t2.i32 + int32_t(0x1);
+        t2.i32 = temp;
+        if (temp != 0)
+            goto  _offlineasm_functionArityCheck__fillLoop;
+    }
+    t1.i = t1.i << (intptr_t(0x3) & 0x1f);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:421
+    cfr.i = cfr.i + t1.i;                                    // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:422
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_functionArityCheck__continue)
+    t1.i = *CAST<intptr_t*>(cfr.i8p + 16);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:426
+    rBasePC.i = *CAST<intptr_t*>(t1.i8p + 104);              // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:427
+    rPC.i = intptr_t(0x0);                                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:428
+    goto _offlineasm_functionForCallBegin;                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:429
+
+OFFLINE_ASM_GLUE_LABEL(llint_function_for_construct_arity_check)
+    t2.i = rRetVPC.i;                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:216
+    *CAST<intptr_t*>(cfr.i8p + 8) = t2.i;                    // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:339
+    t1.i = *CAST<intptr_t*>(cfr.i8p + 32);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:313
+    t1.i = *CAST<intptr_t*>(t1.i8p + 24);                    // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:317
+    t1.i = *CAST<intptr_t*>(t1.i8p + 128);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:318
+    {                                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:344
+        int32_t temp = *CAST<int32_t*>(t1.i8p + 424) + int32_t(0x5);
+        *CAST<int32_t*>(t1.i8p + 424) = temp;
+        if (temp < 0)
+            goto  _offlineasm_4_prologue__continue;
+    }
+    {                                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:64
+        ExecState* exec = CAST<ExecState*>(cfr.vp);
+        Instruction* pc = CAST<Instruction*>(rPC.vp);
+        SlowPathReturnType result = llint_entry_osr_function_for_construct_arityCheck(exec, pc);
+        decodeResult(result, t0.instruction, t1.vp);
+    }
+    cfr.i = t1.i;                                            // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:346
+    if (t0.i == 0)                                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:347
+        goto _offlineasm_4_prologue__recover;
+    t2.i = *CAST<intptr_t*>(cfr.i8p + 8);                    // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:348
+    rRetVPC.i = t2.i;                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:227
+    opcode = t0.opcode;                                      // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:350
+    DISPATCH_OPCODE();
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_4_prologue__recover)
+    t1.i = *CAST<intptr_t*>(cfr.i8p + 32);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:313
+    t1.i = *CAST<intptr_t*>(t1.i8p + 24);                    // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:317
+    t1.i = *CAST<intptr_t*>(t1.i8p + 128);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:318
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_4_prologue__continue)
+    *CAST<intptr_t*>(cfr.i8p + 16) = t1.i;                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:326
+    rBasePC.i = *CAST<intptr_t*>(t1.i8p + 104);              // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:358
+    rPC.i = intptr_t(0x0);                                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:359
+    t0.u = *CAST<uint32_t*>(cfr.i8p + 40);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:391
+    if (t0.u32 >= *CAST<uint32_t*>(t1.i8p + 80))             // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:392
+        goto _offlineasm_functionForConstructBegin;
+    rPC.i8p = rBasePC.i8p + (rPC.i << 3);                    // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:241
+    t3.i = rBasePC.i;                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:242
+    {                                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:64
+        ExecState* exec = CAST<ExecState*>(cfr.vp);
+        Instruction* pc = CAST<Instruction*>(rPC.vp);
+        SlowPathReturnType result = slow_path_construct_arityCheck(exec, pc);
+        decodeResult(result, t0.instruction, t1.vp);
+    }
+    if (t0.i32 == 0)                                         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:395
+        goto _offlineasm_4_functionArityCheck__isArityFixupNeeded;
+    cfr.i = t1.i;                                            // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:396
+    goto llint_throw_from_slow_path_trampoline;              // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:397
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_4_functionArityCheck__isArityFixupNeeded)
+    if (t1.i32 == 0)                                         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:400
+        goto _offlineasm_4_functionArityCheck__continue;
+    // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:402
+    // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:403
+    t1.i64 = -t1.i64;
+    t3.i = cfr.i;                                            // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:404
+    t2.u = *CAST<uint32_t*>(cfr.i8p + 40);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:405
+    t2.i32 = t2.i32 + int32_t(0x6);                          // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:406
+    t2.clearHighWord();
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_4_functionArityCheck__copyLoop)
+    t0.i64 = *CAST<int64_t*>(t3.i8p);                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:408
+    *CAST<int64_t*>(t3.i8p + (t1.i << 3)) = t0.i64;          // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:409
+    t3.i = t3.i + intptr_t(0x8);                             // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:410
+    {                                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:411
+        int32_t temp = t2.i32 - int32_t(0x1);
+        t2.i32 = temp;
+        if (temp != 0)
+            goto  _offlineasm_4_functionArityCheck__copyLoop;
+    }
+    // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:413
+    // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:414
+    t2.i = t1.i;
+    t0.i = intptr_t(0xa);                                    // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:415
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_4_functionArityCheck__fillLoop)
+    *CAST<int64_t*>(t3.i8p + (t1.i << 3)) = t0.i64;          // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:417
+    t3.i = t3.i + intptr_t(0x8);                             // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:418
+    {                                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:419
+        int32_t temp = t2.i32 + int32_t(0x1);
+        t2.i32 = temp;
+        if (temp != 0)
+            goto  _offlineasm_4_functionArityCheck__fillLoop;
+    }
+    t1.i = t1.i << (intptr_t(0x3) & 0x1f);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:421
+    cfr.i = cfr.i + t1.i;                                    // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:422
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_4_functionArityCheck__continue)
+    t1.i = *CAST<intptr_t*>(cfr.i8p + 16);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:426
+    rBasePC.i = *CAST<intptr_t*>(t1.i8p + 104);              // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:427
+    rPC.i = intptr_t(0x0);                                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:428
+    goto _offlineasm_functionForConstructBegin;              // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:429
+
+OFFLINE_ASM_OPCODE_LABEL(op_enter)
+    t2.i = *CAST<intptr_t*>(cfr.i8p + 16);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:447
+    t2.u = *CAST<uint32_t*>(t2.i8p + 60);                    // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:448
+    if (t2.i32 == 0)                                         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:449
+        goto _offlineasm_opEnterDone;
+    t0.i = intptr_t(0xa);                                    // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:450
+    t2.i32 = -t2.i32;                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:451
+    t2.clearHighWord();
+    t2.i64 = t2.i32;                                         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:452
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_opEnterLoop)
+    *CAST<int64_t*>(cfr.i8p + (t2.i << 3)) = t0.i64;         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:454
+    t2.i64 = t2.i64 + int64_t(0x1);                          // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:455
+    if (t2.i64 != 0)                                         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:456
+        goto _offlineasm_opEnterLoop;
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_opEnterDone)
+    rPC.i8p = rBasePC.i8p + (rPC.i << 3);                    // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:241
+    t3.i = rBasePC.i;                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:242
+    {                                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:64
+        ExecState* exec = CAST<ExecState*>(cfr.vp);
+        Instruction* pc = CAST<Instruction*>(rPC.vp);
+        SlowPathReturnType result = slow_path_enter(exec, pc);
+        decodeResult(result, t0.instruction, t1.vp);
+    }
+    rPC.i = t0.i;                                            // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:246
+    cfr.i = t1.i;                                            // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:247
+    rBasePC.i = t3.i;                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:248
+    rPC.i = rPC.i - rBasePC.i;                               // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:249
+    rPC.i = rPC.i >> (intptr_t(0x3) & 0x1f);                 // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:250
+    rPC.i = rPC.i + intptr_t(0x1);                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:31
+    opcode = *CAST<Opcode*>(rBasePC.i8p + (rPC.i << 3));     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:27
+    DISPATCH_OPCODE();
+
+OFFLINE_ASM_OPCODE_LABEL(op_create_activation)
+    t0.i = *CAST<int32_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x8)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:94
+    if (*CAST<int64_t*>(cfr.i8p + (t0.i << 3)) != int64_t(0x0)) // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:465
+        goto _offlineasm_opCreateActivationDone;
+    rPC.i8p = rBasePC.i8p + (rPC.i << 3);                    // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:241
+    t3.i = rBasePC.i;                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:242
+    {                                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:64
+        ExecState* exec = CAST<ExecState*>(cfr.vp);
+        Instruction* pc = CAST<Instruction*>(rPC.vp);
+        SlowPathReturnType result = llint_slow_path_create_activation(exec, pc);
+        decodeResult(result, t0.instruction, t1.vp);
+    }
+    rPC.i = t0.i;                                            // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:246
+    cfr.i = t1.i;                                            // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:247
+    rBasePC.i = t3.i;                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:248
+    rPC.i = rPC.i - rBasePC.i;                               // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:249
+    rPC.i = rPC.i >> (intptr_t(0x3) & 0x1f);                 // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:250
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_opCreateActivationDone)
+    rPC.i = rPC.i + intptr_t(0x2);                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:31
+    opcode = *CAST<Opcode*>(rBasePC.i8p + (rPC.i << 3));     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:27
+    DISPATCH_OPCODE();
+
+OFFLINE_ASM_OPCODE_LABEL(op_init_lazy_reg)
+    t0.i = *CAST<int32_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x8)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:94
+    *CAST<int64_t*>(cfr.i8p + (t0.i << 3)) = int64_t(0x0);   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:474
+    rPC.i = rPC.i + intptr_t(0x2);                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:31
+    opcode = *CAST<Opcode*>(rBasePC.i8p + (rPC.i << 3));     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:27
+    DISPATCH_OPCODE();
+
+OFFLINE_ASM_OPCODE_LABEL(op_create_arguments)
+    t0.i = *CAST<int32_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x8)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:94
+    if (*CAST<int64_t*>(cfr.i8p + (t0.i << 3)) != int64_t(0x0)) // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:481
+        goto _offlineasm_opCreateArgumentsDone;
+    rPC.i8p = rBasePC.i8p + (rPC.i << 3);                    // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:241
+    t3.i = rBasePC.i;                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:242
+    {                                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:64
+        ExecState* exec = CAST<ExecState*>(cfr.vp);
+        Instruction* pc = CAST<Instruction*>(rPC.vp);
+        SlowPathReturnType result = slow_path_create_arguments(exec, pc);
+        decodeResult(result, t0.instruction, t1.vp);
+    }
+    rPC.i = t0.i;                                            // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:246
+    cfr.i = t1.i;                                            // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:247
+    rBasePC.i = t3.i;                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:248
+    rPC.i = rPC.i - rBasePC.i;                               // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:249
+    rPC.i = rPC.i >> (intptr_t(0x3) & 0x1f);                 // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:250
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_opCreateArgumentsDone)
+    rPC.i = rPC.i + intptr_t(0x2);                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:31
+    opcode = *CAST<Opcode*>(rBasePC.i8p + (rPC.i << 3));     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:27
+    DISPATCH_OPCODE();
+
+OFFLINE_ASM_OPCODE_LABEL(op_create_this)
+    t0.i = *CAST<int32_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x10)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:94
+    t0.i = *CAST<intptr_t*>(cfr.i8p + (t0.i << 3));          // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:490
+    t1.i = *CAST<intptr_t*>(t0.i8p + 40);                    // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:491
+    t2.i = *CAST<intptr_t*>(t0.i8p + 48);                    // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:492
+    if (t1.i == 0)                                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:493
+        goto _offlineasm_opCreateThisSlow;
+    t0.i = *CAST<intptr_t*>(t1.i8p);                         // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:420
+    if (t0.i == 0)                                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:421
+        goto _offlineasm_opCreateThisSlow;
+    t3.i = *CAST<intptr_t*>(t0.i8p);                         // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:424
+    *CAST<intptr_t*>(t1.i8p) = t3.i;                         // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:425
+    *CAST<intptr_t*>(t0.i8p) = t2.i;                         // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:428
+    *CAST<intptr_t*>(t0.i8p + 8) = intptr_t(0x0);            // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:429
+    t1.i = *CAST<int32_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x8)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:94
+    *CAST<int64_t*>(cfr.i8p + (t1.i << 3)) = t0.i64;         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:496
+    rPC.i = rPC.i + intptr_t(0x4);                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:31
+    opcode = *CAST<Opcode*>(rBasePC.i8p + (rPC.i << 3));     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:27
+    DISPATCH_OPCODE();
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_opCreateThisSlow)
+    rPC.i8p = rBasePC.i8p + (rPC.i << 3);                    // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:241
+    t3.i = rBasePC.i;                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:242
+    {                                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:64
+        ExecState* exec = CAST<ExecState*>(cfr.vp);
+        Instruction* pc = CAST<Instruction*>(rPC.vp);
+        SlowPathReturnType result = slow_path_create_this(exec, pc);
+        decodeResult(result, t0.instruction, t1.vp);
+    }
+    rPC.i = t0.i;                                            // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:246
+    cfr.i = t1.i;                                            // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:247
+    rBasePC.i = t3.i;                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:248
+    rPC.i = rPC.i - rBasePC.i;                               // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:249
+    rPC.i = rPC.i >> (intptr_t(0x3) & 0x1f);                 // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:250
+    rPC.i = rPC.i + intptr_t(0x4);                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:31
+    opcode = *CAST<Opcode*>(rBasePC.i8p + (rPC.i << 3));     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:27
+    DISPATCH_OPCODE();
+
+OFFLINE_ASM_OPCODE_LABEL(op_get_callee)
+    t0.i = *CAST<int32_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x8)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:94
+    t1.i = *CAST<intptr_t*>(cfr.i8p + 32);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:507
+    t2.i = *CAST<intptr_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x10)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:98
+    if (t1.i != t2.i)                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:509
+        goto _offlineasm_opGetCalleeSlow;
+    *CAST<intptr_t*>(cfr.i8p + (t0.i << 3)) = t1.i;          // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:510
+    rPC.i = rPC.i + intptr_t(0x3);                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:31
+    opcode = *CAST<Opcode*>(rBasePC.i8p + (rPC.i << 3));     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:27
+    DISPATCH_OPCODE();
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_opGetCalleeSlow)
+    rPC.i8p = rBasePC.i8p + (rPC.i << 3);                    // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:241
+    t3.i = rBasePC.i;                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:242
+    {                                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:64
+        ExecState* exec = CAST<ExecState*>(cfr.vp);
+        Instruction* pc = CAST<Instruction*>(rPC.vp);
+        SlowPathReturnType result = slow_path_get_callee(exec, pc);
+        decodeResult(result, t0.instruction, t1.vp);
+    }
+    rPC.i = t0.i;                                            // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:246
+    cfr.i = t1.i;                                            // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:247
+    rBasePC.i = t3.i;                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:248
+    rPC.i = rPC.i - rBasePC.i;                               // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:249
+    rPC.i = rPC.i >> (intptr_t(0x3) & 0x1f);                 // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:250
+    rPC.i = rPC.i + intptr_t(0x3);                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:31
+    opcode = *CAST<Opcode*>(rBasePC.i8p + (rPC.i << 3));     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:27
+    DISPATCH_OPCODE();
+
+OFFLINE_ASM_OPCODE_LABEL(op_to_this)
+    t0.i = *CAST<int32_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x8)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:94
+    t0.i64 = *CAST<int64_t*>(cfr.i8p + (t0.i << 3));         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:520
+    if ((t0.i64 & tagMask.i64) != 0)                         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:521
+        goto _offlineasm_opToThisSlow;
+    t0.i = *CAST<intptr_t*>(t0.i8p);                         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:522
+    if (*CAST<int8_t*>(t0.i8p + 92) != int8_t(0x12))         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:523
+        goto _offlineasm_opToThisSlow;
+    t2.i = *CAST<intptr_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x10)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:98
+    if (t0.i != t2.i)                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:525
+        goto _offlineasm_opToThisSlow;
+    rPC.i = rPC.i + intptr_t(0x3);                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:31
+    opcode = *CAST<Opcode*>(rBasePC.i8p + (rPC.i << 3));     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:27
+    DISPATCH_OPCODE();
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_opToThisSlow)
+    rPC.i8p = rBasePC.i8p + (rPC.i << 3);                    // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:241
+    t3.i = rBasePC.i;                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:242
+    {                                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:64
+        ExecState* exec = CAST<ExecState*>(cfr.vp);
+        Instruction* pc = CAST<Instruction*>(rPC.vp);
+        SlowPathReturnType result = slow_path_to_this(exec, pc);
+        decodeResult(result, t0.instruction, t1.vp);
+    }
+    rPC.i = t0.i;                                            // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:246
+    cfr.i = t1.i;                                            // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:247
+    rBasePC.i = t3.i;                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:248
+    rPC.i = rPC.i - rBasePC.i;                               // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:249
+    rPC.i = rPC.i >> (intptr_t(0x3) & 0x1f);                 // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:250
+    rPC.i = rPC.i + intptr_t(0x3);                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:31
+    opcode = *CAST<Opcode*>(rBasePC.i8p + (rPC.i << 3));     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:27
+    DISPATCH_OPCODE();
+
+OFFLINE_ASM_OPCODE_LABEL(op_new_object)
+    t0.i = *CAST<intptr_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x18)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:98
+    t1.i = *CAST<intptr_t*>(t0.i8p);                         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:536
+    t2.i = *CAST<intptr_t*>(t0.i8p + 8);                     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:537
+    t0.i = *CAST<intptr_t*>(t1.i8p);                         // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:420
+    if (t0.i == 0)                                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:421
+        goto _offlineasm_opNewObjectSlow;
+    t3.i = *CAST<intptr_t*>(t0.i8p);                         // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:424
+    *CAST<intptr_t*>(t1.i8p) = t3.i;                         // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:425
+    *CAST<intptr_t*>(t0.i8p) = t2.i;                         // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:428
+    *CAST<intptr_t*>(t0.i8p + 8) = intptr_t(0x0);            // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:429
+    t1.i = *CAST<int32_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x8)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:94
+    *CAST<int64_t*>(cfr.i8p + (t1.i << 3)) = t0.i64;         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:540
+    rPC.i = rPC.i + intptr_t(0x4);                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:31
+    opcode = *CAST<Opcode*>(rBasePC.i8p + (rPC.i << 3));     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:27
+    DISPATCH_OPCODE();
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_opNewObjectSlow)
+    rPC.i8p = rBasePC.i8p + (rPC.i << 3);                    // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:241
+    t3.i = rBasePC.i;                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:242
+    {                                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:64
+        ExecState* exec = CAST<ExecState*>(cfr.vp);
+        Instruction* pc = CAST<Instruction*>(rPC.vp);
+        SlowPathReturnType result = llint_slow_path_new_object(exec, pc);
+        decodeResult(result, t0.instruction, t1.vp);
+    }
+    rPC.i = t0.i;                                            // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:246
+    cfr.i = t1.i;                                            // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:247
+    rBasePC.i = t3.i;                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:248
+    rPC.i = rPC.i - rBasePC.i;                               // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:249
+    rPC.i = rPC.i >> (intptr_t(0x3) & 0x1f);                 // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:250
+    rPC.i = rPC.i + intptr_t(0x4);                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:31
+    opcode = *CAST<Opcode*>(rBasePC.i8p + (rPC.i << 3));     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:27
+    DISPATCH_OPCODE();
+
+OFFLINE_ASM_OPCODE_LABEL(op_mov)
+    t1.i = *CAST<int32_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x10)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:94
+    t0.i = *CAST<int32_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x8)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:94
+    if (t1.i >= intptr_t(0x40000000))                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:313
+        goto _offlineasm_loadConstantOrVariable__constant;
+    t2.i64 = *CAST<int64_t*>(cfr.i8p + (t1.i << 3));         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:314
+    goto _offlineasm_loadConstantOrVariable__done;           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:315
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_loadConstantOrVariable__constant)
+    t2.i = *CAST<intptr_t*>(cfr.i8p + 16);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:317
+    t2.i = *CAST<intptr_t*>(t2.i8p + 368);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:318
+    t1.i = t1.i - intptr_t(0x40000000);                      // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:319
+    t2.i64 = *CAST<int64_t*>(t2.i8p + (t1.i << 3));          // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:320
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_loadConstantOrVariable__done)
+    *CAST<int64_t*>(cfr.i8p + (t0.i << 3)) = t2.i64;         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:553
+    rPC.i = rPC.i + intptr_t(0x3);                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:31
+    opcode = *CAST<Opcode*>(rBasePC.i8p + (rPC.i << 3));     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:27
+    DISPATCH_OPCODE();
+
+OFFLINE_ASM_OPCODE_LABEL(op_captured_mov)
+    t1.i = *CAST<int32_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x10)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:94
+    if (t1.i >= intptr_t(0x40000000))                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:313
+        goto _offlineasm_4_loadConstantOrVariable__constant;
+    t2.i64 = *CAST<int64_t*>(cfr.i8p + (t1.i << 3));         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:314
+    goto _offlineasm_4_loadConstantOrVariable__done;         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:315
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_4_loadConstantOrVariable__constant)
+    t2.i = *CAST<intptr_t*>(cfr.i8p + 16);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:317
+    t2.i = *CAST<intptr_t*>(t2.i8p + 368);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:318
+    t1.i = t1.i - intptr_t(0x40000000);                      // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:319
+    t2.i64 = *CAST<int64_t*>(t2.i8p + (t1.i << 3));          // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:320
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_4_loadConstantOrVariable__done)
+    t0.i = *CAST<intptr_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x18)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:98
+    if (t0.i == 0)                                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:579
+        goto _offlineasm_opCapturedMovReady;
+    t1.i = *CAST<uint8_t*>(t0.i8p + 4);                      // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:558
+    if (t1.i32 == int32_t(0x2))                              // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:559
+        goto _offlineasm_notifyWrite__done;
+    if (t1.i32 != int32_t(0x0))                              // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:560
+        goto _offlineasm_notifyWrite__overwrite;
+    *CAST<int64_t*>(t0.i8p + 40) = t2.i64;                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:561
+    *CAST<uint8_t*>(t0.i8p + 4) = int8_t(0x1);               // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:562
+    goto _offlineasm_notifyWrite__done;                      // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:563
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_notifyWrite__overwrite)
+    if (t2.i64 == *CAST<int64_t*>(t0.i8p + 40))              // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:566
+        goto _offlineasm_notifyWrite__done;
+    if (*CAST<int8_t*>(t0.i8p + 5) != 0)                     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:567
+        goto _offlineasm_opCapturedMovSlow;
+    *CAST<int64_t*>(t0.i8p + 40) = int64_t(0x0);             // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:568
+    *CAST<uint8_t*>(t0.i8p + 4) = int8_t(0x2);               // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:569
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_notifyWrite__done)
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_opCapturedMovReady)
+    t0.i = *CAST<int32_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x8)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:94
+    *CAST<int64_t*>(cfr.i8p + (t0.i << 3)) = t2.i64;         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:583
+    rPC.i = rPC.i + intptr_t(0x4);                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:31
+    opcode = *CAST<Opcode*>(rBasePC.i8p + (rPC.i << 3));     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:27
+    DISPATCH_OPCODE();
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_opCapturedMovSlow)
+    rPC.i8p = rBasePC.i8p + (rPC.i << 3);                    // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:241
+    t3.i = rBasePC.i;                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:242
+    {                                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:64
+        ExecState* exec = CAST<ExecState*>(cfr.vp);
+        Instruction* pc = CAST<Instruction*>(rPC.vp);
+        SlowPathReturnType result = slow_path_captured_mov(exec, pc);
+        decodeResult(result, t0.instruction, t1.vp);
+    }
+    rPC.i = t0.i;                                            // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:246
+    cfr.i = t1.i;                                            // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:247
+    rBasePC.i = t3.i;                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:248
+    rPC.i = rPC.i - rBasePC.i;                               // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:249
+    rPC.i = rPC.i >> (intptr_t(0x3) & 0x1f);                 // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:250
+    rPC.i = rPC.i + intptr_t(0x4);                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:31
+    opcode = *CAST<Opcode*>(rBasePC.i8p + (rPC.i << 3));     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:27
+    DISPATCH_OPCODE();
+
+OFFLINE_ASM_OPCODE_LABEL(op_not)
+    t0.i = *CAST<int32_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x10)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:94
+    t1.i = *CAST<int32_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x8)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:94
+    if (t0.i >= intptr_t(0x40000000))                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:313
+        goto _offlineasm_5_loadConstantOrVariable__constant;
+    t2.i64 = *CAST<int64_t*>(cfr.i8p + (t0.i << 3));         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:314
+    goto _offlineasm_5_loadConstantOrVariable__done;         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:315
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_5_loadConstantOrVariable__constant)
+    t2.i = *CAST<intptr_t*>(cfr.i8p + 16);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:317
+    t2.i = *CAST<intptr_t*>(t2.i8p + 368);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:318
+    t0.i = t0.i - intptr_t(0x40000000);                      // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:319
+    t2.i64 = *CAST<int64_t*>(t2.i8p + (t0.i << 3));          // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:320
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_5_loadConstantOrVariable__done)
+    t2.i64 = t2.i64 ^ int64_t(0x6);                          // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:596
+    if ((t2.i64 & int64_t(-2)) != 0)                         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:597
+        goto _offlineasm_opNotSlow;
+    t2.i64 = t2.i64 ^ int64_t(0x7);                          // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:598
+    *CAST<int64_t*>(cfr.i8p + (t1.i << 3)) = t2.i64;         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:599
+    rPC.i = rPC.i + intptr_t(0x3);                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:31
+    opcode = *CAST<Opcode*>(rBasePC.i8p + (rPC.i << 3));     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:27
+    DISPATCH_OPCODE();
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_opNotSlow)
+    rPC.i8p = rBasePC.i8p + (rPC.i << 3);                    // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:241
+    t3.i = rBasePC.i;                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:242
+    {                                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:64
+        ExecState* exec = CAST<ExecState*>(cfr.vp);
+        Instruction* pc = CAST<Instruction*>(rPC.vp);
+        SlowPathReturnType result = slow_path_not(exec, pc);
+        decodeResult(result, t0.instruction, t1.vp);
+    }
+    rPC.i = t0.i;                                            // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:246
+    cfr.i = t1.i;                                            // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:247
+    rBasePC.i = t3.i;                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:248
+    rPC.i = rPC.i - rBasePC.i;                               // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:249
+    rPC.i = rPC.i >> (intptr_t(0x3) & 0x1f);                 // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:250
+    rPC.i = rPC.i + intptr_t(0x3);                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:31
+    opcode = *CAST<Opcode*>(rBasePC.i8p + (rPC.i << 3));     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:27
+    DISPATCH_OPCODE();
+
+OFFLINE_ASM_OPCODE_LABEL(op_eq)
+    t0.i = *CAST<int32_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x18)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:94
+    t2.i = *CAST<int32_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x10)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:94
+    t3.i = *CAST<int32_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x8)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:94
+    if (t0.i >= intptr_t(0x40000000))                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:313
+        goto _offlineasm_equalityComparison__loadConstantOrVariableInt32__6_loadConstantOrVariable__constant;
+    t1.i64 = *CAST<int64_t*>(cfr.i8p + (t0.i << 3));         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:314
+    goto _offlineasm_equalityComparison__loadConstantOrVariableInt32__6_loadConstantOrVariable__done; // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:315
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_equalityComparison__loadConstantOrVariableInt32__6_loadConstantOrVariable__constant)
+    t1.i = *CAST<intptr_t*>(cfr.i8p + 16);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:317
+    t1.i = *CAST<intptr_t*>(t1.i8p + 368);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:318
+    t0.i = t0.i - intptr_t(0x40000000);                      // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:319
+    t1.i64 = *CAST<int64_t*>(t1.i8p + (t0.i << 3));          // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:320
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_equalityComparison__loadConstantOrVariableInt32__6_loadConstantOrVariable__done)
+    if (t1.u64 < tagTypeNumber.u64)                          // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:326
+        goto _offlineasm_equalityComparison__slow;
+    if (t2.i >= intptr_t(0x40000000))                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:313
+        goto _offlineasm_equalityComparison__loadConstantOrVariableInt32__7_loadConstantOrVariable__constant;
+    t0.i64 = *CAST<int64_t*>(cfr.i8p + (t2.i << 3));         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:314
+    goto _offlineasm_equalityComparison__loadConstantOrVariableInt32__7_loadConstantOrVariable__done; // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:315
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_equalityComparison__loadConstantOrVariableInt32__7_loadConstantOrVariable__constant)
+    t0.i = *CAST<intptr_t*>(cfr.i8p + 16);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:317
+    t0.i = *CAST<intptr_t*>(t0.i8p + 368);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:318
+    t2.i = t2.i - intptr_t(0x40000000);                      // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:319
+    t0.i64 = *CAST<int64_t*>(t0.i8p + (t2.i << 3));          // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:320
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_equalityComparison__loadConstantOrVariableInt32__7_loadConstantOrVariable__done)
+    if (t0.u64 < tagTypeNumber.u64)                          // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:326
+        goto _offlineasm_equalityComparison__slow;
+    t0.i = (t0.u32 == t1.u32);                               // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:626
+    t0.i64 = t0.i64 | int64_t(0x6);                          // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:615
+    *CAST<int64_t*>(cfr.i8p + (t3.i << 3)) = t0.i64;         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:616
+    rPC.i = rPC.i + intptr_t(0x4);                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:31
+    opcode = *CAST<Opcode*>(rBasePC.i8p + (rPC.i << 3));     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:27
+    DISPATCH_OPCODE();
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_equalityComparison__slow)
+    rPC.i8p = rBasePC.i8p + (rPC.i << 3);                    // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:241
+    t3.i = rBasePC.i;                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:242
+    {                                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:64
+        ExecState* exec = CAST<ExecState*>(cfr.vp);
+        Instruction* pc = CAST<Instruction*>(rPC.vp);
+        SlowPathReturnType result = slow_path_eq(exec, pc);
+        decodeResult(result, t0.instruction, t1.vp);
+    }
+    rPC.i = t0.i;                                            // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:246
+    cfr.i = t1.i;                                            // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:247
+    rBasePC.i = t3.i;                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:248
+    rPC.i = rPC.i - rBasePC.i;                               // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:249
+    rPC.i = rPC.i >> (intptr_t(0x3) & 0x1f);                 // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:250
+    rPC.i = rPC.i + intptr_t(0x4);                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:31
+    opcode = *CAST<Opcode*>(rBasePC.i8p + (rPC.i << 3));     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:27
+    DISPATCH_OPCODE();
+
+OFFLINE_ASM_OPCODE_LABEL(op_neq)
+    t0.i = *CAST<int32_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x18)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:94
+    t2.i = *CAST<int32_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x10)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:94
+    t3.i = *CAST<int32_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x8)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:94
+    if (t0.i >= intptr_t(0x40000000))                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:313
+        goto _offlineasm_equalityComparison__loadConstantOrVariableInt32__8_loadConstantOrVariable__constant;
+    t1.i64 = *CAST<int64_t*>(cfr.i8p + (t0.i << 3));         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:314
+    goto _offlineasm_equalityComparison__loadConstantOrVariableInt32__8_loadConstantOrVariable__done; // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:315
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_equalityComparison__loadConstantOrVariableInt32__8_loadConstantOrVariable__constant)
+    t1.i = *CAST<intptr_t*>(cfr.i8p + 16);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:317
+    t1.i = *CAST<intptr_t*>(t1.i8p + 368);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:318
+    t0.i = t0.i - intptr_t(0x40000000);                      // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:319
+    t1.i64 = *CAST<int64_t*>(t1.i8p + (t0.i << 3));          // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:320
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_equalityComparison__loadConstantOrVariableInt32__8_loadConstantOrVariable__done)
+    if (t1.u64 < tagTypeNumber.u64)                          // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:326
+        goto _offlineasm_9_equalityComparison__slow;
+    if (t2.i >= intptr_t(0x40000000))                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:313
+        goto _offlineasm_equalityComparison__loadConstantOrVariableInt32__9_loadConstantOrVariable__constant;
+    t0.i64 = *CAST<int64_t*>(cfr.i8p + (t2.i << 3));         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:314
+    goto _offlineasm_equalityComparison__loadConstantOrVariableInt32__9_loadConstantOrVariable__done; // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:315
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_equalityComparison__loadConstantOrVariableInt32__9_loadConstantOrVariable__constant)
+    t0.i = *CAST<intptr_t*>(cfr.i8p + 16);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:317
+    t0.i = *CAST<intptr_t*>(t0.i8p + 368);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:318
+    t2.i = t2.i - intptr_t(0x40000000);                      // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:319
+    t0.i64 = *CAST<int64_t*>(t0.i8p + (t2.i << 3));          // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:320
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_equalityComparison__loadConstantOrVariableInt32__9_loadConstantOrVariable__done)
+    if (t0.u64 < tagTypeNumber.u64)                          // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:326
+        goto _offlineasm_9_equalityComparison__slow;
+    t0.i = (t0.u32 != t1.u32);                               // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:632
+    t0.i64 = t0.i64 | int64_t(0x6);                          // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:615
+    *CAST<int64_t*>(cfr.i8p + (t3.i << 3)) = t0.i64;         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:616
+    rPC.i = rPC.i + intptr_t(0x4);                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:31
+    opcode = *CAST<Opcode*>(rBasePC.i8p + (rPC.i << 3));     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:27
+    DISPATCH_OPCODE();
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_9_equalityComparison__slow)
+    rPC.i8p = rBasePC.i8p + (rPC.i << 3);                    // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:241
+    t3.i = rBasePC.i;                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:242
+    {                                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:64
+        ExecState* exec = CAST<ExecState*>(cfr.vp);
+        Instruction* pc = CAST<Instruction*>(rPC.vp);
+        SlowPathReturnType result = slow_path_neq(exec, pc);
+        decodeResult(result, t0.instruction, t1.vp);
+    }
+    rPC.i = t0.i;                                            // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:246
+    cfr.i = t1.i;                                            // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:247
+    rBasePC.i = t3.i;                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:248
+    rPC.i = rPC.i - rBasePC.i;                               // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:249
+    rPC.i = rPC.i >> (intptr_t(0x3) & 0x1f);                 // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:250
+    rPC.i = rPC.i + intptr_t(0x4);                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:31
+    opcode = *CAST<Opcode*>(rBasePC.i8p + (rPC.i << 3));     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:27
+    DISPATCH_OPCODE();
+
+OFFLINE_ASM_OPCODE_LABEL(op_eq_null)
+    t0.i = *CAST<int32_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x10)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:94
+    t0.i64 = *CAST<int64_t*>(cfr.i8p + (t0.i << 3));         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:638
+    if ((t0.i64 & tagMask.i64) != 0)                         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:639
+        goto _offlineasm_equalNullComparison__immediate;
+    t2.i = *CAST<intptr_t*>(t0.i8p);                         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:640
+    if ((*CAST<int8_t*>(t2.i8p + 93) & int8_t(0x1)) != 0)    // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:641
+        goto _offlineasm_equalNullComparison__masqueradesAsUndefined;
+    t0.i = intptr_t(0x0);                                    // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:642
+    goto _offlineasm_equalNullComparison__done;              // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:643
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_equalNullComparison__masqueradesAsUndefined)
+    t0.i = *CAST<intptr_t*>(cfr.i8p + 16);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:645
+    t0.i = *CAST<intptr_t*>(t0.i8p + 40);                    // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:646
+    t0.i = (*CAST<uintptr_t*>(t2.i8p + 8) == t0.u);          // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:647
+    goto _offlineasm_equalNullComparison__done;              // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:648
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_equalNullComparison__immediate)
+    t0.i64 = t0.i64 & int64_t(-9);                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:650
+    t0.i = (t0.u64 == uint64_t(0x2));                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:651
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_equalNullComparison__done)
+    t1.i = *CAST<int32_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x8)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:94
+    t0.i64 = t0.i64 | int64_t(0x6);                          // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:659
+    *CAST<int64_t*>(cfr.i8p + (t1.i << 3)) = t0.i64;         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:660
+    rPC.i = rPC.i + intptr_t(0x3);                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:31
+    opcode = *CAST<Opcode*>(rBasePC.i8p + (rPC.i << 3));     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:27
+    DISPATCH_OPCODE();
+
+OFFLINE_ASM_OPCODE_LABEL(op_neq_null)
+    t0.i = *CAST<int32_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x10)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:94
+    t0.i64 = *CAST<int64_t*>(cfr.i8p + (t0.i << 3));         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:638
+    if ((t0.i64 & tagMask.i64) != 0)                         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:639
+        goto _offlineasm_9_equalNullComparison__immediate;
+    t2.i = *CAST<intptr_t*>(t0.i8p);                         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:640
+    if ((*CAST<int8_t*>(t2.i8p + 93) & int8_t(0x1)) != 0)    // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:641
+        goto _offlineasm_9_equalNullComparison__masqueradesAsUndefined;
+    t0.i = intptr_t(0x0);                                    // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:642
+    goto _offlineasm_9_equalNullComparison__done;            // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:643
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_9_equalNullComparison__masqueradesAsUndefined)
+    t0.i = *CAST<intptr_t*>(cfr.i8p + 16);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:645
+    t0.i = *CAST<intptr_t*>(t0.i8p + 40);                    // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:646
+    t0.i = (*CAST<uintptr_t*>(t2.i8p + 8) == t0.u);          // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:647
+    goto _offlineasm_9_equalNullComparison__done;            // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:648
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_9_equalNullComparison__immediate)
+    t0.i64 = t0.i64 & int64_t(-9);                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:650
+    t0.i = (t0.u64 == uint64_t(0x2));                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:651
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_9_equalNullComparison__done)
+    t1.i = *CAST<int32_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x8)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:94
+    t0.i64 = t0.i64 ^ int64_t(0x7);                          // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:668
+    *CAST<int64_t*>(cfr.i8p + (t1.i << 3)) = t0.i64;         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:669
+    rPC.i = rPC.i + intptr_t(0x3);                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:31
+    opcode = *CAST<Opcode*>(rBasePC.i8p + (rPC.i << 3));     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:27
+    DISPATCH_OPCODE();
+
+OFFLINE_ASM_OPCODE_LABEL(op_stricteq)
+    t0.i = *CAST<int32_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x18)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:94
+    t2.i = *CAST<int32_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x10)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:94
+    if (t0.i >= intptr_t(0x40000000))                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:313
+        goto _offlineasm_strictEq__10_loadConstantOrVariable__constant;
+    t1.i64 = *CAST<int64_t*>(cfr.i8p + (t0.i << 3));         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:314
+    goto _offlineasm_strictEq__10_loadConstantOrVariable__done; // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:315
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_strictEq__10_loadConstantOrVariable__constant)
+    t1.i = *CAST<intptr_t*>(cfr.i8p + 16);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:317
+    t1.i = *CAST<intptr_t*>(t1.i8p + 368);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:318
+    t0.i = t0.i - intptr_t(0x40000000);                      // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:319
+    t1.i64 = *CAST<int64_t*>(t1.i8p + (t0.i << 3));          // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:320
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_strictEq__10_loadConstantOrVariable__done)
+    if (t2.i >= intptr_t(0x40000000))                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:313
+        goto _offlineasm_strictEq__11_loadConstantOrVariable__constant;
+    t0.i64 = *CAST<int64_t*>(cfr.i8p + (t2.i << 3));         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:314
+    goto _offlineasm_strictEq__11_loadConstantOrVariable__done; // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:315
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_strictEq__11_loadConstantOrVariable__constant)
+    t0.i = *CAST<intptr_t*>(cfr.i8p + 16);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:317
+    t0.i = *CAST<intptr_t*>(t0.i8p + 368);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:318
+    t2.i = t2.i - intptr_t(0x40000000);                      // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:319
+    t0.i64 = *CAST<int64_t*>(t0.i8p + (t2.i << 3));          // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:320
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_strictEq__11_loadConstantOrVariable__done)
+    t2.i = t0.i;                                             // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:679
+    t2.i64 = t2.i64 | t1.i64;                                // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:680
+    if ((t2.i64 & tagMask.i64) == 0)                         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:681
+        goto _offlineasm_strictEq__slow;
+    if (t0.u64 >= tagTypeNumber.u64)                         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:682
+        goto _offlineasm_strictEq__leftOK;
+    if ((t0.i64 & tagTypeNumber.i64) != 0)                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:683
+        goto _offlineasm_strictEq__slow;
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_strictEq__leftOK)
+    if (t1.u64 >= tagTypeNumber.u64)                         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:685
+        goto _offlineasm_strictEq__rightOK;
+    if ((t1.i64 & tagTypeNumber.i64) != 0)                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:686
+        goto _offlineasm_strictEq__slow;
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_strictEq__rightOK)
+    t0.i = (t0.u64 == t1.u64);                               // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:701
+    t1.i = *CAST<int32_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x8)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:94
+    t0.i64 = t0.i64 | int64_t(0x6);                          // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:690
+    *CAST<int64_t*>(cfr.i8p + (t1.i << 3)) = t0.i64;         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:691
+    rPC.i = rPC.i + intptr_t(0x4);                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:31
+    opcode = *CAST<Opcode*>(rBasePC.i8p + (rPC.i << 3));     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:27
+    DISPATCH_OPCODE();
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_strictEq__slow)
+    rPC.i8p = rBasePC.i8p + (rPC.i << 3);                    // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:241
+    t3.i = rBasePC.i;                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:242
+    {                                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:64
+        ExecState* exec = CAST<ExecState*>(cfr.vp);
+        Instruction* pc = CAST<Instruction*>(rPC.vp);
+        SlowPathReturnType result = slow_path_stricteq(exec, pc);
+        decodeResult(result, t0.instruction, t1.vp);
+    }
+    rPC.i = t0.i;                                            // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:246
+    cfr.i = t1.i;                                            // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:247
+    rBasePC.i = t3.i;                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:248
+    rPC.i = rPC.i - rBasePC.i;                               // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:249
+    rPC.i = rPC.i >> (intptr_t(0x3) & 0x1f);                 // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:250
+    rPC.i = rPC.i + intptr_t(0x4);                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:31
+    opcode = *CAST<Opcode*>(rBasePC.i8p + (rPC.i << 3));     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:27
+    DISPATCH_OPCODE();
+
+OFFLINE_ASM_OPCODE_LABEL(op_nstricteq)
+    t0.i = *CAST<int32_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x18)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:94
+    t2.i = *CAST<int32_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x10)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:94
+    if (t0.i >= intptr_t(0x40000000))                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:313
+        goto _offlineasm_strictEq__12_loadConstantOrVariable__constant;
+    t1.i64 = *CAST<int64_t*>(cfr.i8p + (t0.i << 3));         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:314
+    goto _offlineasm_strictEq__12_loadConstantOrVariable__done; // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:315
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_strictEq__12_loadConstantOrVariable__constant)
+    t1.i = *CAST<intptr_t*>(cfr.i8p + 16);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:317
+    t1.i = *CAST<intptr_t*>(t1.i8p + 368);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:318
+    t0.i = t0.i - intptr_t(0x40000000);                      // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:319
+    t1.i64 = *CAST<int64_t*>(t1.i8p + (t0.i << 3));          // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:320
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_strictEq__12_loadConstantOrVariable__done)
+    if (t2.i >= intptr_t(0x40000000))                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:313
+        goto _offlineasm_strictEq__13_loadConstantOrVariable__constant;
+    t0.i64 = *CAST<int64_t*>(cfr.i8p + (t2.i << 3));         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:314
+    goto _offlineasm_strictEq__13_loadConstantOrVariable__done; // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:315
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_strictEq__13_loadConstantOrVariable__constant)
+    t0.i = *CAST<intptr_t*>(cfr.i8p + 16);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:317
+    t0.i = *CAST<intptr_t*>(t0.i8p + 368);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:318
+    t2.i = t2.i - intptr_t(0x40000000);                      // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:319
+    t0.i64 = *CAST<int64_t*>(t0.i8p + (t2.i << 3));          // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:320
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_strictEq__13_loadConstantOrVariable__done)
+    t2.i = t0.i;                                             // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:679
+    t2.i64 = t2.i64 | t1.i64;                                // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:680
+    if ((t2.i64 & tagMask.i64) == 0)                         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:681
+        goto _offlineasm_13_strictEq__slow;
+    if (t0.u64 >= tagTypeNumber.u64)                         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:682
+        goto _offlineasm_13_strictEq__leftOK;
+    if ((t0.i64 & tagTypeNumber.i64) != 0)                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:683
+        goto _offlineasm_13_strictEq__slow;
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_13_strictEq__leftOK)
+    if (t1.u64 >= tagTypeNumber.u64)                         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:685
+        goto _offlineasm_13_strictEq__rightOK;
+    if ((t1.i64 & tagTypeNumber.i64) != 0)                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:686
+        goto _offlineasm_13_strictEq__slow;
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_13_strictEq__rightOK)
+    t0.i = (t0.u64 != t1.u64);                               // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:707
+    t1.i = *CAST<int32_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x8)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:94
+    t0.i64 = t0.i64 | int64_t(0x6);                          // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:690
+    *CAST<int64_t*>(cfr.i8p + (t1.i << 3)) = t0.i64;         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:691
+    rPC.i = rPC.i + intptr_t(0x4);                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:31
+    opcode = *CAST<Opcode*>(rBasePC.i8p + (rPC.i << 3));     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:27
+    DISPATCH_OPCODE();
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_13_strictEq__slow)
+    rPC.i8p = rBasePC.i8p + (rPC.i << 3);                    // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:241
+    t3.i = rBasePC.i;                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:242
+    {                                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:64
+        ExecState* exec = CAST<ExecState*>(cfr.vp);
+        Instruction* pc = CAST<Instruction*>(rPC.vp);
+        SlowPathReturnType result = slow_path_nstricteq(exec, pc);
+        decodeResult(result, t0.instruction, t1.vp);
+    }
+    rPC.i = t0.i;                                            // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:246
+    cfr.i = t1.i;                                            // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:247
+    rBasePC.i = t3.i;                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:248
+    rPC.i = rPC.i - rBasePC.i;                               // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:249
+    rPC.i = rPC.i >> (intptr_t(0x3) & 0x1f);                 // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:250
+    rPC.i = rPC.i + intptr_t(0x4);                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:31
+    opcode = *CAST<Opcode*>(rBasePC.i8p + (rPC.i << 3));     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:27
+    DISPATCH_OPCODE();
+
+OFFLINE_ASM_OPCODE_LABEL(op_inc)
+    t0.i = *CAST<int32_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x8)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:94
+    t1.i64 = *CAST<int64_t*>(cfr.i8p + (t0.i << 3));         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:714
+    if (t1.u64 < tagTypeNumber.u64)                          // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:715
+        goto _offlineasm_preOp__slow;
+    {                                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:728
+        int32_t a = int32_t(0x1);
+        int32_t b = t1.i32;
+        // sign(b) sign(a) | Overflows if:
+        // 0       0       | sign(b+a) = 1 (pos + pos != neg)
+        // 0       1       | never
+        // 1       0       | never
+        // 1       1       | sign(b+a) = 0 (neg + neg != pos)
+        bool didOverflow = ((SIGN_BIT32(b) == SIGN_BIT32(a)) && (SIGN_BIT32(b+a) != SIGN_BIT32(a)));
+        t1.i32 = t1.i32 + int32_t(0x1);
+        if (didOverflow)
+            goto _offlineasm_preOp__slow;
+    }
+    t1.i64 = t1.i64 | tagTypeNumber.i64;                     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:717
+    *CAST<int64_t*>(cfr.i8p + (t0.i << 3)) = t1.i64;         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:718
+    rPC.i = rPC.i + intptr_t(0x2);                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:31
+    opcode = *CAST<Opcode*>(rBasePC.i8p + (rPC.i << 3));     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:27
+    DISPATCH_OPCODE();
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_preOp__slow)
+    rPC.i8p = rBasePC.i8p + (rPC.i << 3);                    // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:241
+    t3.i = rBasePC.i;                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:242
+    {                                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:64
+        ExecState* exec = CAST<ExecState*>(cfr.vp);
+        Instruction* pc = CAST<Instruction*>(rPC.vp);
+        SlowPathReturnType result = slow_path_inc(exec, pc);
+        decodeResult(result, t0.instruction, t1.vp);
+    }
+    rPC.i = t0.i;                                            // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:246
+    cfr.i = t1.i;                                            // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:247
+    rBasePC.i = t3.i;                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:248
+    rPC.i = rPC.i - rBasePC.i;                               // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:249
+    rPC.i = rPC.i >> (intptr_t(0x3) & 0x1f);                 // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:250
+    rPC.i = rPC.i + intptr_t(0x2);                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:31
+    opcode = *CAST<Opcode*>(rBasePC.i8p + (rPC.i << 3));     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:27
+    DISPATCH_OPCODE();
+
+OFFLINE_ASM_OPCODE_LABEL(op_dec)
+    t0.i = *CAST<int32_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x8)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:94
+    t1.i64 = *CAST<int64_t*>(cfr.i8p + (t0.i << 3));         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:714
+    if (t1.u64 < tagTypeNumber.u64)                          // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:715
+        goto _offlineasm_13_preOp__slow;
+    {                                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:734
+        int32_t a = int32_t(0x1);
+        int32_t b = t1.i32;
+        // sign(b) sign(a) | Overflows if:
+        // 0       0       | never
+        // 0       1       | sign(b-a) = 1 (pos - neg != pos)
+        // 1       0       | sign(b-a) = 0 (neg - pos != pos)
+        // 1       1       | never
+        bool didOverflow = ((SIGN_BIT32(b) != SIGN_BIT32(a)) && (SIGN_BIT32(b-a) == SIGN_BIT32(a)));
+        t1.i32 = t1.i32 - int32_t(0x1);
+        if (didOverflow)
+            goto _offlineasm_13_preOp__slow;
+    }
+    t1.i64 = t1.i64 | tagTypeNumber.i64;                     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:717
+    *CAST<int64_t*>(cfr.i8p + (t0.i << 3)) = t1.i64;         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:718
+    rPC.i = rPC.i + intptr_t(0x2);                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:31
+    opcode = *CAST<Opcode*>(rBasePC.i8p + (rPC.i << 3));     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:27
+    DISPATCH_OPCODE();
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_13_preOp__slow)
+    rPC.i8p = rBasePC.i8p + (rPC.i << 3);                    // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:241
+    t3.i = rBasePC.i;                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:242
+    {                                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:64
+        ExecState* exec = CAST<ExecState*>(cfr.vp);
+        Instruction* pc = CAST<Instruction*>(rPC.vp);
+        SlowPathReturnType result = slow_path_dec(exec, pc);
+        decodeResult(result, t0.instruction, t1.vp);
+    }
+    rPC.i = t0.i;                                            // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:246
+    cfr.i = t1.i;                                            // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:247
+    rBasePC.i = t3.i;                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:248
+    rPC.i = rPC.i - rBasePC.i;                               // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:249
+    rPC.i = rPC.i >> (intptr_t(0x3) & 0x1f);                 // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:250
+    rPC.i = rPC.i + intptr_t(0x2);                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:31
+    opcode = *CAST<Opcode*>(rBasePC.i8p + (rPC.i << 3));     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:27
+    DISPATCH_OPCODE();
+
+OFFLINE_ASM_OPCODE_LABEL(op_to_number)
+    t0.i = *CAST<int32_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x10)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:94
+    t1.i = *CAST<int32_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x8)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:94
+    if (t0.i >= intptr_t(0x40000000))                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:313
+        goto _offlineasm_14_loadConstantOrVariable__constant;
+    t2.i64 = *CAST<int64_t*>(cfr.i8p + (t0.i << 3));         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:314
+    goto _offlineasm_14_loadConstantOrVariable__done;        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:315
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_14_loadConstantOrVariable__constant)
+    t2.i = *CAST<intptr_t*>(cfr.i8p + 16);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:317
+    t2.i = *CAST<intptr_t*>(t2.i8p + 368);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:318
+    t0.i = t0.i - intptr_t(0x40000000);                      // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:319
+    t2.i64 = *CAST<int64_t*>(t2.i8p + (t0.i << 3));          // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:320
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_14_loadConstantOrVariable__done)
+    if (t2.u64 >= tagTypeNumber.u64)                         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:743
+        goto _offlineasm_opToNumberIsImmediate;
+    if ((t2.i64 & tagTypeNumber.i64) == 0)                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:744
+        goto _offlineasm_opToNumberSlow;
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_opToNumberIsImmediate)
+    *CAST<int64_t*>(cfr.i8p + (t1.i << 3)) = t2.i64;         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:746
+    rPC.i = rPC.i + intptr_t(0x3);                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:31
+    opcode = *CAST<Opcode*>(rBasePC.i8p + (rPC.i << 3));     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:27
+    DISPATCH_OPCODE();
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_opToNumberSlow)
+    rPC.i8p = rBasePC.i8p + (rPC.i << 3);                    // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:241
+    t3.i = rBasePC.i;                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:242
+    {                                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:64
+        ExecState* exec = CAST<ExecState*>(cfr.vp);
+        Instruction* pc = CAST<Instruction*>(rPC.vp);
+        SlowPathReturnType result = slow_path_to_number(exec, pc);
+        decodeResult(result, t0.instruction, t1.vp);
+    }
+    rPC.i = t0.i;                                            // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:246
+    cfr.i = t1.i;                                            // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:247
+    rBasePC.i = t3.i;                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:248
+    rPC.i = rPC.i - rBasePC.i;                               // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:249
+    rPC.i = rPC.i >> (intptr_t(0x3) & 0x1f);                 // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:250
+    rPC.i = rPC.i + intptr_t(0x3);                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:31
+    opcode = *CAST<Opcode*>(rBasePC.i8p + (rPC.i << 3));     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:27
+    DISPATCH_OPCODE();
+
+OFFLINE_ASM_OPCODE_LABEL(op_negate)
+    t0.i = *CAST<int32_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x10)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:94
+    t1.i = *CAST<int32_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x8)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:94
+    if (t0.i >= intptr_t(0x40000000))                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:313
+        goto _offlineasm_15_loadConstantOrVariable__constant;
+    t2.i64 = *CAST<int64_t*>(cfr.i8p + (t0.i << 3));         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:314
+    goto _offlineasm_15_loadConstantOrVariable__done;        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:315
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_15_loadConstantOrVariable__constant)
+    t2.i = *CAST<intptr_t*>(cfr.i8p + 16);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:317
+    t2.i = *CAST<intptr_t*>(t2.i8p + 368);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:318
+    t0.i = t0.i - intptr_t(0x40000000);                      // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:319
+    t2.i64 = *CAST<int64_t*>(t2.i8p + (t0.i << 3));          // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:320
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_15_loadConstantOrVariable__done)
+    if (t2.u64 < tagTypeNumber.u64)                          // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:759
+        goto _offlineasm_opNegateNotInt;
+    if ((t2.i32 & int32_t(0x7fffffff)) == 0)                 // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:760
+        goto _offlineasm_opNegateSlow;
+    t2.i32 = -t2.i32;                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:761
+    t2.clearHighWord();
+    t2.i64 = t2.i64 | tagTypeNumber.i64;                     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:762
+    *CAST<int64_t*>(cfr.i8p + (t1.i << 3)) = t2.i64;         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:763
+    rPC.i = rPC.i + intptr_t(0x3);                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:31
+    opcode = *CAST<Opcode*>(rBasePC.i8p + (rPC.i << 3));     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:27
+    DISPATCH_OPCODE();
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_opNegateNotInt)
+    if ((t2.i64 & tagTypeNumber.i64) == 0)                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:766
+        goto _offlineasm_opNegateSlow;
+    t2.i64 = t2.i64 ^ int64_t(0x8000000000000000);           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:767
+    *CAST<int64_t*>(cfr.i8p + (t1.i << 3)) = t2.i64;         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:768
+    rPC.i = rPC.i + intptr_t(0x3);                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:31
+    opcode = *CAST<Opcode*>(rBasePC.i8p + (rPC.i << 3));     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:27
+    DISPATCH_OPCODE();
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_opNegateSlow)
+    rPC.i8p = rBasePC.i8p + (rPC.i << 3);                    // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:241
+    t3.i = rBasePC.i;                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:242
+    {                                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:64
+        ExecState* exec = CAST<ExecState*>(cfr.vp);
+        Instruction* pc = CAST<Instruction*>(rPC.vp);
+        SlowPathReturnType result = slow_path_negate(exec, pc);
+        decodeResult(result, t0.instruction, t1.vp);
+    }
+    rPC.i = t0.i;                                            // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:246
+    cfr.i = t1.i;                                            // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:247
+    rBasePC.i = t3.i;                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:248
+    rPC.i = rPC.i - rBasePC.i;                               // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:249
+    rPC.i = rPC.i >> (intptr_t(0x3) & 0x1f);                 // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:250
+    rPC.i = rPC.i + intptr_t(0x3);                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:31
+    opcode = *CAST<Opcode*>(rBasePC.i8p + (rPC.i << 3));     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:27
+    DISPATCH_OPCODE();
+
+OFFLINE_ASM_OPCODE_LABEL(op_add)
+    t0.i = *CAST<int32_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x18)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:94
+    t2.i = *CAST<int32_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x10)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:94
+    if (t0.i >= intptr_t(0x40000000))                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:313
+        goto _offlineasm_binaryOp__binaryOpCustomStore__16_loadConstantOrVariable__constant;
+    t1.i64 = *CAST<int64_t*>(cfr.i8p + (t0.i << 3));         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:314
+    goto _offlineasm_binaryOp__binaryOpCustomStore__16_loadConstantOrVariable__done; // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:315
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_binaryOp__binaryOpCustomStore__16_loadConstantOrVariable__constant)
+    t1.i = *CAST<intptr_t*>(cfr.i8p + 16);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:317
+    t1.i = *CAST<intptr_t*>(t1.i8p + 368);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:318
+    t0.i = t0.i - intptr_t(0x40000000);                      // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:319
+    t1.i64 = *CAST<int64_t*>(t1.i8p + (t0.i << 3));          // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:320
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_binaryOp__binaryOpCustomStore__16_loadConstantOrVariable__done)
+    if (t2.i >= intptr_t(0x40000000))                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:313
+        goto _offlineasm_binaryOp__binaryOpCustomStore__17_loadConstantOrVariable__constant;
+    t0.i64 = *CAST<int64_t*>(cfr.i8p + (t2.i << 3));         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:314
+    goto _offlineasm_binaryOp__binaryOpCustomStore__17_loadConstantOrVariable__done; // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:315
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_binaryOp__binaryOpCustomStore__17_loadConstantOrVariable__constant)
+    t0.i = *CAST<intptr_t*>(cfr.i8p + 16);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:317
+    t0.i = *CAST<intptr_t*>(t0.i8p + 368);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:318
+    t2.i = t2.i - intptr_t(0x40000000);                      // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:319
+    t0.i64 = *CAST<int64_t*>(t0.i8p + (t2.i << 3));          // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:320
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_binaryOp__binaryOpCustomStore__17_loadConstantOrVariable__done)
+    if (t0.u64 < tagTypeNumber.u64)                          // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:781
+        goto _offlineasm_binaryOp__binaryOpCustomStore__op1NotInt;
+    if (t1.u64 < tagTypeNumber.u64)                          // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:782
+        goto _offlineasm_binaryOp__binaryOpCustomStore__op2NotInt;
+    t2.i = *CAST<int32_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x8)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:94
+    {                                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:838
+        int32_t a = t1.i32;
+        int32_t b = t0.i32;
+        // sign(b) sign(a) | Overflows if:
+        // 0       0       | sign(b+a) = 1 (pos + pos != neg)
+        // 0       1       | never
+        // 1       0       | never
+        // 1       1       | sign(b+a) = 0 (neg + neg != pos)
+        bool didOverflow = ((SIGN_BIT32(b) == SIGN_BIT32(a)) && (SIGN_BIT32(b+a) != SIGN_BIT32(a)));
+        t0.i32 = t0.i32 + t1.i32;
+        if (didOverflow)
+            goto _offlineasm_binaryOp__binaryOpCustomStore__slow;
+    }
+    t0.i64 = t0.i64 | tagTypeNumber.i64;                     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:829
+    *CAST<int64_t*>(cfr.i8p + (t2.i << 3)) = t0.i64;         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:830
+    rPC.i = rPC.i + intptr_t(0x5);                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:31
+    opcode = *CAST<Opcode*>(rBasePC.i8p + (rPC.i << 3));     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:27
+    DISPATCH_OPCODE();
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_binaryOp__binaryOpCustomStore__op1NotInt)
+    if ((t0.i64 & tagTypeNumber.i64) == 0)                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:789
+        goto _offlineasm_binaryOp__binaryOpCustomStore__slow;
+    if (t1.u64 >= tagTypeNumber.u64)                         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:790
+        goto _offlineasm_binaryOp__binaryOpCustomStore__op1NotIntOp2Int;
+    if ((t1.i64 & tagTypeNumber.i64) == 0)                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:791
+        goto _offlineasm_binaryOp__binaryOpCustomStore__slow;
+    t1.i64 = t1.i64 + tagTypeNumber.i64;                     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:792
+    d1.d = t1.castToDouble;                                  // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:793
+    goto _offlineasm_binaryOp__binaryOpCustomStore__op1NotIntReady; // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:794
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_binaryOp__binaryOpCustomStore__op1NotIntOp2Int)
+    d1.d = t1.i32;                                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:796
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_binaryOp__binaryOpCustomStore__op1NotIntReady)
+    t2.i = *CAST<int32_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x8)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:94
+    t0.i64 = t0.i64 + tagTypeNumber.i64;                     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:799
+    d0.d = t0.castToDouble;                                  // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:800
+    d0.d = d0.d + d1.d;                                      // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:839
+    t0.i64 = d0.castToInt64;                                 // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:802
+    t0.i64 = t0.i64 - tagTypeNumber.i64;                     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:803
+    *CAST<int64_t*>(cfr.i8p + (t2.i << 3)) = t0.i64;         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:804
+    rPC.i = rPC.i + intptr_t(0x5);                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:31
+    opcode = *CAST<Opcode*>(rBasePC.i8p + (rPC.i << 3));     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:27
+    DISPATCH_OPCODE();
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_binaryOp__binaryOpCustomStore__op2NotInt)
+    t2.i = *CAST<int32_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x8)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:94
+    if ((t1.i64 & tagTypeNumber.i64) == 0)                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:810
+        goto _offlineasm_binaryOp__binaryOpCustomStore__slow;
+    d0.d = t0.i32;                                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:811
+    t1.i64 = t1.i64 + tagTypeNumber.i64;                     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:812
+    d1.d = t1.castToDouble;                                  // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:813
+    d0.d = d0.d + d1.d;                                      // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:839
+    t0.i64 = d0.castToInt64;                                 // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:815
+    t0.i64 = t0.i64 - tagTypeNumber.i64;                     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:816
+    *CAST<int64_t*>(cfr.i8p + (t2.i << 3)) = t0.i64;         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:817
+    rPC.i = rPC.i + intptr_t(0x5);                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:31
+    opcode = *CAST<Opcode*>(rBasePC.i8p + (rPC.i << 3));     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:27
+    DISPATCH_OPCODE();
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_binaryOp__binaryOpCustomStore__slow)
+    rPC.i8p = rBasePC.i8p + (rPC.i << 3);                    // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:241
+    t3.i = rBasePC.i;                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:242
+    {                                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:64
+        ExecState* exec = CAST<ExecState*>(cfr.vp);
+        Instruction* pc = CAST<Instruction*>(rPC.vp);
+        SlowPathReturnType result = slow_path_add(exec, pc);
+        decodeResult(result, t0.instruction, t1.vp);
+    }
+    rPC.i = t0.i;                                            // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:246
+    cfr.i = t1.i;                                            // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:247
+    rBasePC.i = t3.i;                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:248
+    rPC.i = rPC.i - rBasePC.i;                               // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:249
+    rPC.i = rPC.i >> (intptr_t(0x3) & 0x1f);                 // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:250
+    rPC.i = rPC.i + intptr_t(0x5);                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:31
+    opcode = *CAST<Opcode*>(rBasePC.i8p + (rPC.i << 3));     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:27
+    DISPATCH_OPCODE();
+
+OFFLINE_ASM_OPCODE_LABEL(op_mul)
+    t0.i = *CAST<int32_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x18)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:94
+    t2.i = *CAST<int32_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x10)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:94
+    if (t0.i >= intptr_t(0x40000000))                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:313
+        goto _offlineasm_binaryOpCustomStore__18_loadConstantOrVariable__constant;
+    t1.i64 = *CAST<int64_t*>(cfr.i8p + (t0.i << 3));         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:314
+    goto _offlineasm_binaryOpCustomStore__18_loadConstantOrVariable__done; // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:315
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_binaryOpCustomStore__18_loadConstantOrVariable__constant)
+    t1.i = *CAST<intptr_t*>(cfr.i8p + 16);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:317
+    t1.i = *CAST<intptr_t*>(t1.i8p + 368);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:318
+    t0.i = t0.i - intptr_t(0x40000000);                      // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:319
+    t1.i64 = *CAST<int64_t*>(t1.i8p + (t0.i << 3));          // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:320
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_binaryOpCustomStore__18_loadConstantOrVariable__done)
+    if (t2.i >= intptr_t(0x40000000))                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:313
+        goto _offlineasm_binaryOpCustomStore__19_loadConstantOrVariable__constant;
+    t0.i64 = *CAST<int64_t*>(cfr.i8p + (t2.i << 3));         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:314
+    goto _offlineasm_binaryOpCustomStore__19_loadConstantOrVariable__done; // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:315
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_binaryOpCustomStore__19_loadConstantOrVariable__constant)
+    t0.i = *CAST<intptr_t*>(cfr.i8p + 16);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:317
+    t0.i = *CAST<intptr_t*>(t0.i8p + 368);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:318
+    t2.i = t2.i - intptr_t(0x40000000);                      // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:319
+    t0.i64 = *CAST<int64_t*>(t0.i8p + (t2.i << 3));          // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:320
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_binaryOpCustomStore__19_loadConstantOrVariable__done)
+    if (t0.u64 < tagTypeNumber.u64)                          // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:781
+        goto _offlineasm_19_binaryOpCustomStore__op1NotInt;
+    if (t1.u64 < tagTypeNumber.u64)                          // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:782
+        goto _offlineasm_19_binaryOpCustomStore__op2NotInt;
+    t2.i = *CAST<int32_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x8)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:94
+    t3.i = t0.i;                                             // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:848
+    {                                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:849
+        uint32_t a = t1.i32;
+        uint32_t b = t3.i32;
+        bool didOverflow = ((b | a) >> 15);
+        t3.i32 = t3.i32 * t1.i32;
+        if (didOverflow)
+            goto _offlineasm_19_binaryOpCustomStore__slow;
+    }
+    if (t3.i32 != 0)                                         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:850
+        goto _offlineasm_binaryOpCustomStore__integerOperationAndStore__done;
+    if (t1.i32 < int32_t(0x0))                               // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:851
+        goto _offlineasm_19_binaryOpCustomStore__slow;
+    if (t0.i32 < int32_t(0x0))                               // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:852
+        goto _offlineasm_19_binaryOpCustomStore__slow;
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_binaryOpCustomStore__integerOperationAndStore__done)
+    t3.i64 = t3.i64 | tagTypeNumber.i64;                     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:854
+    *CAST<int64_t*>(cfr.i8p + (t2.i << 3)) = t3.i64;         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:855
+    rPC.i = rPC.i + intptr_t(0x5);                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:31
+    opcode = *CAST<Opcode*>(rBasePC.i8p + (rPC.i << 3));     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:27
+    DISPATCH_OPCODE();
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_19_binaryOpCustomStore__op1NotInt)
+    if ((t0.i64 & tagTypeNumber.i64) == 0)                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:789
+        goto _offlineasm_19_binaryOpCustomStore__slow;
+    if (t1.u64 >= tagTypeNumber.u64)                         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:790
+        goto _offlineasm_19_binaryOpCustomStore__op1NotIntOp2Int;
+    if ((t1.i64 & tagTypeNumber.i64) == 0)                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:791
+        goto _offlineasm_19_binaryOpCustomStore__slow;
+    t1.i64 = t1.i64 + tagTypeNumber.i64;                     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:792
+    d1.d = t1.castToDouble;                                  // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:793
+    goto _offlineasm_19_binaryOpCustomStore__op1NotIntReady; // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:794
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_19_binaryOpCustomStore__op1NotIntOp2Int)
+    d1.d = t1.i32;                                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:796
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_19_binaryOpCustomStore__op1NotIntReady)
+    t2.i = *CAST<int32_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x8)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:94
+    t0.i64 = t0.i64 + tagTypeNumber.i64;                     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:799
+    d0.d = t0.castToDouble;                                  // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:800
+    d0.d = d0.d * d1.d;                                      // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:857
+    t0.i64 = d0.castToInt64;                                 // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:802
+    t0.i64 = t0.i64 - tagTypeNumber.i64;                     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:803
+    *CAST<int64_t*>(cfr.i8p + (t2.i << 3)) = t0.i64;         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:804
+    rPC.i = rPC.i + intptr_t(0x5);                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:31
+    opcode = *CAST<Opcode*>(rBasePC.i8p + (rPC.i << 3));     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:27
+    DISPATCH_OPCODE();
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_19_binaryOpCustomStore__op2NotInt)
+    t2.i = *CAST<int32_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x8)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:94
+    if ((t1.i64 & tagTypeNumber.i64) == 0)                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:810
+        goto _offlineasm_19_binaryOpCustomStore__slow;
+    d0.d = t0.i32;                                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:811
+    t1.i64 = t1.i64 + tagTypeNumber.i64;                     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:812
+    d1.d = t1.castToDouble;                                  // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:813
+    d0.d = d0.d * d1.d;                                      // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:857
+    t0.i64 = d0.castToInt64;                                 // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:815
+    t0.i64 = t0.i64 - tagTypeNumber.i64;                     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:816
+    *CAST<int64_t*>(cfr.i8p + (t2.i << 3)) = t0.i64;         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:817
+    rPC.i = rPC.i + intptr_t(0x5);                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:31
+    opcode = *CAST<Opcode*>(rBasePC.i8p + (rPC.i << 3));     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:27
+    DISPATCH_OPCODE();
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_19_binaryOpCustomStore__slow)
+    rPC.i8p = rBasePC.i8p + (rPC.i << 3);                    // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:241
+    t3.i = rBasePC.i;                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:242
+    {                                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:64
+        ExecState* exec = CAST<ExecState*>(cfr.vp);
+        Instruction* pc = CAST<Instruction*>(rPC.vp);
+        SlowPathReturnType result = slow_path_mul(exec, pc);
+        decodeResult(result, t0.instruction, t1.vp);
+    }
+    rPC.i = t0.i;                                            // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:246
+    cfr.i = t1.i;                                            // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:247
+    rBasePC.i = t3.i;                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:248
+    rPC.i = rPC.i - rBasePC.i;                               // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:249
+    rPC.i = rPC.i >> (intptr_t(0x3) & 0x1f);                 // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:250
+    rPC.i = rPC.i + intptr_t(0x5);                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:31
+    opcode = *CAST<Opcode*>(rBasePC.i8p + (rPC.i << 3));     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:27
+    DISPATCH_OPCODE();
+
+OFFLINE_ASM_OPCODE_LABEL(op_sub)
+    t0.i = *CAST<int32_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x18)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:94
+    t2.i = *CAST<int32_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x10)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:94
+    if (t0.i >= intptr_t(0x40000000))                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:313
+        goto _offlineasm_binaryOp__binaryOpCustomStore__20_loadConstantOrVariable__constant;
+    t1.i64 = *CAST<int64_t*>(cfr.i8p + (t0.i << 3));         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:314
+    goto _offlineasm_binaryOp__binaryOpCustomStore__20_loadConstantOrVariable__done; // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:315
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_binaryOp__binaryOpCustomStore__20_loadConstantOrVariable__constant)
+    t1.i = *CAST<intptr_t*>(cfr.i8p + 16);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:317
+    t1.i = *CAST<intptr_t*>(t1.i8p + 368);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:318
+    t0.i = t0.i - intptr_t(0x40000000);                      // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:319
+    t1.i64 = *CAST<int64_t*>(t1.i8p + (t0.i << 3));          // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:320
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_binaryOp__binaryOpCustomStore__20_loadConstantOrVariable__done)
+    if (t2.i >= intptr_t(0x40000000))                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:313
+        goto _offlineasm_binaryOp__binaryOpCustomStore__21_loadConstantOrVariable__constant;
+    t0.i64 = *CAST<int64_t*>(cfr.i8p + (t2.i << 3));         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:314
+    goto _offlineasm_binaryOp__binaryOpCustomStore__21_loadConstantOrVariable__done; // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:315
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_binaryOp__binaryOpCustomStore__21_loadConstantOrVariable__constant)
+    t0.i = *CAST<intptr_t*>(cfr.i8p + 16);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:317
+    t0.i = *CAST<intptr_t*>(t0.i8p + 368);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:318
+    t2.i = t2.i - intptr_t(0x40000000);                      // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:319
+    t0.i64 = *CAST<int64_t*>(t0.i8p + (t2.i << 3));          // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:320
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_binaryOp__binaryOpCustomStore__21_loadConstantOrVariable__done)
+    if (t0.u64 < tagTypeNumber.u64)                          // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:781
+        goto _offlineasm_binaryOp__21_binaryOpCustomStore__op1NotInt;
+    if (t1.u64 < tagTypeNumber.u64)                          // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:782
+        goto _offlineasm_binaryOp__21_binaryOpCustomStore__op2NotInt;
+    t2.i = *CAST<int32_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x8)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:94
+    {                                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:864
+        int32_t a = t1.i32;
+        int32_t b = t0.i32;
+        // sign(b) sign(a) | Overflows if:
+        // 0       0       | never
+        // 0       1       | sign(b-a) = 1 (pos - neg != pos)
+        // 1       0       | sign(b-a) = 0 (neg - pos != pos)
+        // 1       1       | never
+        bool didOverflow = ((SIGN_BIT32(b) != SIGN_BIT32(a)) && (SIGN_BIT32(b-a) == SIGN_BIT32(a)));
+        t0.i32 = t0.i32 - t1.i32;
+        if (didOverflow)
+            goto _offlineasm_binaryOp__21_binaryOpCustomStore__slow;
+    }
+    t0.i64 = t0.i64 | tagTypeNumber.i64;                     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:829
+    *CAST<int64_t*>(cfr.i8p + (t2.i << 3)) = t0.i64;         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:830
+    rPC.i = rPC.i + intptr_t(0x5);                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:31
+    opcode = *CAST<Opcode*>(rBasePC.i8p + (rPC.i << 3));     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:27
+    DISPATCH_OPCODE();
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_binaryOp__21_binaryOpCustomStore__op1NotInt)
+    if ((t0.i64 & tagTypeNumber.i64) == 0)                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:789
+        goto _offlineasm_binaryOp__21_binaryOpCustomStore__slow;
+    if (t1.u64 >= tagTypeNumber.u64)                         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:790
+        goto _offlineasm_binaryOp__21_binaryOpCustomStore__op1NotIntOp2Int;
+    if ((t1.i64 & tagTypeNumber.i64) == 0)                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:791
+        goto _offlineasm_binaryOp__21_binaryOpCustomStore__slow;
+    t1.i64 = t1.i64 + tagTypeNumber.i64;                     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:792
+    d1.d = t1.castToDouble;                                  // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:793
+    goto _offlineasm_binaryOp__21_binaryOpCustomStore__op1NotIntReady; // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:794
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_binaryOp__21_binaryOpCustomStore__op1NotIntOp2Int)
+    d1.d = t1.i32;                                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:796
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_binaryOp__21_binaryOpCustomStore__op1NotIntReady)
+    t2.i = *CAST<int32_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x8)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:94
+    t0.i64 = t0.i64 + tagTypeNumber.i64;                     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:799
+    d0.d = t0.castToDouble;                                  // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:800
+    d0.d = d0.d - d1.d;                                      // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:865
+    t0.i64 = d0.castToInt64;                                 // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:802
+    t0.i64 = t0.i64 - tagTypeNumber.i64;                     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:803
+    *CAST<int64_t*>(cfr.i8p + (t2.i << 3)) = t0.i64;         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:804
+    rPC.i = rPC.i + intptr_t(0x5);                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:31
+    opcode = *CAST<Opcode*>(rBasePC.i8p + (rPC.i << 3));     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:27
+    DISPATCH_OPCODE();
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_binaryOp__21_binaryOpCustomStore__op2NotInt)
+    t2.i = *CAST<int32_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x8)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:94
+    if ((t1.i64 & tagTypeNumber.i64) == 0)                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:810
+        goto _offlineasm_binaryOp__21_binaryOpCustomStore__slow;
+    d0.d = t0.i32;                                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:811
+    t1.i64 = t1.i64 + tagTypeNumber.i64;                     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:812
+    d1.d = t1.castToDouble;                                  // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:813
+    d0.d = d0.d - d1.d;                                      // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:865
+    t0.i64 = d0.castToInt64;                                 // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:815
+    t0.i64 = t0.i64 - tagTypeNumber.i64;                     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:816
+    *CAST<int64_t*>(cfr.i8p + (t2.i << 3)) = t0.i64;         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:817
+    rPC.i = rPC.i + intptr_t(0x5);                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:31
+    opcode = *CAST<Opcode*>(rBasePC.i8p + (rPC.i << 3));     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:27
+    DISPATCH_OPCODE();
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_binaryOp__21_binaryOpCustomStore__slow)
+    rPC.i8p = rBasePC.i8p + (rPC.i << 3);                    // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:241
+    t3.i = rBasePC.i;                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:242
+    {                                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:64
+        ExecState* exec = CAST<ExecState*>(cfr.vp);
+        Instruction* pc = CAST<Instruction*>(rPC.vp);
+        SlowPathReturnType result = slow_path_sub(exec, pc);
+        decodeResult(result, t0.instruction, t1.vp);
+    }
+    rPC.i = t0.i;                                            // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:246
+    cfr.i = t1.i;                                            // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:247
+    rBasePC.i = t3.i;                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:248
+    rPC.i = rPC.i - rBasePC.i;                               // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:249
+    rPC.i = rPC.i >> (intptr_t(0x3) & 0x1f);                 // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:250
+    rPC.i = rPC.i + intptr_t(0x5);                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:31
+    opcode = *CAST<Opcode*>(rBasePC.i8p + (rPC.i << 3));     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:27
+    DISPATCH_OPCODE();
+
+OFFLINE_ASM_OPCODE_LABEL(op_div)
+    rPC.i8p = rBasePC.i8p + (rPC.i << 3);                    // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:241
+    t3.i = rBasePC.i;                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:242
+    {                                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:64
+        ExecState* exec = CAST<ExecState*>(cfr.vp);
+        Instruction* pc = CAST<Instruction*>(rPC.vp);
+        SlowPathReturnType result = slow_path_div(exec, pc);
+        decodeResult(result, t0.instruction, t1.vp);
+    }
+    rPC.i = t0.i;                                            // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:246
+    cfr.i = t1.i;                                            // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:247
+    rBasePC.i = t3.i;                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:248
+    rPC.i = rPC.i - rBasePC.i;                               // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:249
+    rPC.i = rPC.i >> (intptr_t(0x3) & 0x1f);                 // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:250
+    rPC.i = rPC.i + intptr_t(0x5);                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:31
+    opcode = *CAST<Opcode*>(rBasePC.i8p + (rPC.i << 3));     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:27
+    DISPATCH_OPCODE();
+
+OFFLINE_ASM_OPCODE_LABEL(op_lshift)
+    t0.i = *CAST<int32_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x18)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:94
+    t2.i = *CAST<int32_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x10)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:94
+    t3.i = *CAST<int32_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x8)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:94
+    if (t0.i >= intptr_t(0x40000000))                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:313
+        goto _offlineasm_bitOp__22_loadConstantOrVariable__constant;
+    t1.i64 = *CAST<int64_t*>(cfr.i8p + (t0.i << 3));         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:314
+    goto _offlineasm_bitOp__22_loadConstantOrVariable__done; // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:315
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_bitOp__22_loadConstantOrVariable__constant)
+    t1.i = *CAST<intptr_t*>(cfr.i8p + 16);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:317
+    t1.i = *CAST<intptr_t*>(t1.i8p + 368);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:318
+    t0.i = t0.i - intptr_t(0x40000000);                      // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:319
+    t1.i64 = *CAST<int64_t*>(t1.i8p + (t0.i << 3));          // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:320
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_bitOp__22_loadConstantOrVariable__done)
+    if (t2.i >= intptr_t(0x40000000))                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:313
+        goto _offlineasm_bitOp__23_loadConstantOrVariable__constant;
+    t0.i64 = *CAST<int64_t*>(cfr.i8p + (t2.i << 3));         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:314
+    goto _offlineasm_bitOp__23_loadConstantOrVariable__done; // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:315
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_bitOp__23_loadConstantOrVariable__constant)
+    t0.i = *CAST<intptr_t*>(cfr.i8p + 16);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:317
+    t0.i = *CAST<intptr_t*>(t0.i8p + 368);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:318
+    t2.i = t2.i - intptr_t(0x40000000);                      // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:319
+    t0.i64 = *CAST<int64_t*>(t0.i8p + (t2.i << 3));          // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:320
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_bitOp__23_loadConstantOrVariable__done)
+    if (t0.u64 < tagTypeNumber.u64)                          // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:904
+        goto _offlineasm_bitOp__slow;
+    if (t1.u64 < tagTypeNumber.u64)                          // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:905
+        goto _offlineasm_bitOp__slow;
+    t0.i32 = t0.i32 << (t1.i & 0x1f);                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:919
+    t0.clearHighWord();
+    t0.i64 = t0.i64 | tagTypeNumber.i64;                     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:907
+    *CAST<int64_t*>(cfr.i8p + (t3.i << 3)) = t0.i64;         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:908
+    rPC.i = rPC.i + intptr_t(0x4);                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:31
+    opcode = *CAST<Opcode*>(rBasePC.i8p + (rPC.i << 3));     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:27
+    DISPATCH_OPCODE();
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_bitOp__slow)
+    rPC.i8p = rBasePC.i8p + (rPC.i << 3);                    // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:241
+    t3.i = rBasePC.i;                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:242
+    {                                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:64
+        ExecState* exec = CAST<ExecState*>(cfr.vp);
+        Instruction* pc = CAST<Instruction*>(rPC.vp);
+        SlowPathReturnType result = slow_path_lshift(exec, pc);
+        decodeResult(result, t0.instruction, t1.vp);
+    }
+    rPC.i = t0.i;                                            // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:246
+    cfr.i = t1.i;                                            // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:247
+    rBasePC.i = t3.i;                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:248
+    rPC.i = rPC.i - rBasePC.i;                               // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:249
+    rPC.i = rPC.i >> (intptr_t(0x3) & 0x1f);                 // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:250
+    rPC.i = rPC.i + intptr_t(0x4);                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:31
+    opcode = *CAST<Opcode*>(rBasePC.i8p + (rPC.i << 3));     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:27
+    DISPATCH_OPCODE();
+
+OFFLINE_ASM_OPCODE_LABEL(op_rshift)
+    t0.i = *CAST<int32_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x18)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:94
+    t2.i = *CAST<int32_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x10)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:94
+    t3.i = *CAST<int32_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x8)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:94
+    if (t0.i >= intptr_t(0x40000000))                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:313
+        goto _offlineasm_bitOp__24_loadConstantOrVariable__constant;
+    t1.i64 = *CAST<int64_t*>(cfr.i8p + (t0.i << 3));         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:314
+    goto _offlineasm_bitOp__24_loadConstantOrVariable__done; // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:315
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_bitOp__24_loadConstantOrVariable__constant)
+    t1.i = *CAST<intptr_t*>(cfr.i8p + 16);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:317
+    t1.i = *CAST<intptr_t*>(t1.i8p + 368);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:318
+    t0.i = t0.i - intptr_t(0x40000000);                      // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:319
+    t1.i64 = *CAST<int64_t*>(t1.i8p + (t0.i << 3));          // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:320
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_bitOp__24_loadConstantOrVariable__done)
+    if (t2.i >= intptr_t(0x40000000))                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:313
+        goto _offlineasm_bitOp__25_loadConstantOrVariable__constant;
+    t0.i64 = *CAST<int64_t*>(cfr.i8p + (t2.i << 3));         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:314
+    goto _offlineasm_bitOp__25_loadConstantOrVariable__done; // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:315
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_bitOp__25_loadConstantOrVariable__constant)
+    t0.i = *CAST<intptr_t*>(cfr.i8p + 16);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:317
+    t0.i = *CAST<intptr_t*>(t0.i8p + 368);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:318
+    t2.i = t2.i - intptr_t(0x40000000);                      // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:319
+    t0.i64 = *CAST<int64_t*>(t0.i8p + (t2.i << 3));          // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:320
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_bitOp__25_loadConstantOrVariable__done)
+    if (t0.u64 < tagTypeNumber.u64)                          // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:904
+        goto _offlineasm_25_bitOp__slow;
+    if (t1.u64 < tagTypeNumber.u64)                          // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:905
+        goto _offlineasm_25_bitOp__slow;
+    t0.i32 = t0.i32 >> (t1.i & 0x1f);                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:927
+    t0.clearHighWord();
+    t0.i64 = t0.i64 | tagTypeNumber.i64;                     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:907
+    *CAST<int64_t*>(cfr.i8p + (t3.i << 3)) = t0.i64;         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:908
+    rPC.i = rPC.i + intptr_t(0x4);                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:31
+    opcode = *CAST<Opcode*>(rBasePC.i8p + (rPC.i << 3));     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:27
+    DISPATCH_OPCODE();
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_25_bitOp__slow)
+    rPC.i8p = rBasePC.i8p + (rPC.i << 3);                    // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:241
+    t3.i = rBasePC.i;                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:242
+    {                                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:64
+        ExecState* exec = CAST<ExecState*>(cfr.vp);
+        Instruction* pc = CAST<Instruction*>(rPC.vp);
+        SlowPathReturnType result = slow_path_rshift(exec, pc);
+        decodeResult(result, t0.instruction, t1.vp);
+    }
+    rPC.i = t0.i;                                            // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:246
+    cfr.i = t1.i;                                            // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:247
+    rBasePC.i = t3.i;                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:248
+    rPC.i = rPC.i - rBasePC.i;                               // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:249
+    rPC.i = rPC.i >> (intptr_t(0x3) & 0x1f);                 // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:250
+    rPC.i = rPC.i + intptr_t(0x4);                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:31
+    opcode = *CAST<Opcode*>(rBasePC.i8p + (rPC.i << 3));     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:27
+    DISPATCH_OPCODE();
+
+OFFLINE_ASM_OPCODE_LABEL(op_urshift)
+    t0.i = *CAST<int32_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x18)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:94
+    t2.i = *CAST<int32_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x10)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:94
+    t3.i = *CAST<int32_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x8)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:94
+    if (t0.i >= intptr_t(0x40000000))                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:313
+        goto _offlineasm_bitOp__26_loadConstantOrVariable__constant;
+    t1.i64 = *CAST<int64_t*>(cfr.i8p + (t0.i << 3));         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:314
+    goto _offlineasm_bitOp__26_loadConstantOrVariable__done; // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:315
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_bitOp__26_loadConstantOrVariable__constant)
+    t1.i = *CAST<intptr_t*>(cfr.i8p + 16);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:317
+    t1.i = *CAST<intptr_t*>(t1.i8p + 368);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:318
+    t0.i = t0.i - intptr_t(0x40000000);                      // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:319
+    t1.i64 = *CAST<int64_t*>(t1.i8p + (t0.i << 3));          // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:320
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_bitOp__26_loadConstantOrVariable__done)
+    if (t2.i >= intptr_t(0x40000000))                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:313
+        goto _offlineasm_bitOp__27_loadConstantOrVariable__constant;
+    t0.i64 = *CAST<int64_t*>(cfr.i8p + (t2.i << 3));         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:314
+    goto _offlineasm_bitOp__27_loadConstantOrVariable__done; // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:315
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_bitOp__27_loadConstantOrVariable__constant)
+    t0.i = *CAST<intptr_t*>(cfr.i8p + 16);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:317
+    t0.i = *CAST<intptr_t*>(t0.i8p + 368);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:318
+    t2.i = t2.i - intptr_t(0x40000000);                      // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:319
+    t0.i64 = *CAST<int64_t*>(t0.i8p + (t2.i << 3));          // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:320
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_bitOp__27_loadConstantOrVariable__done)
+    if (t0.u64 < tagTypeNumber.u64)                          // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:904
+        goto _offlineasm_27_bitOp__slow;
+    if (t1.u64 < tagTypeNumber.u64)                          // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:905
+        goto _offlineasm_27_bitOp__slow;
+    t0.u32 = t0.u32 >> (t1.i & 0x1f);                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:935
+    t0.clearHighWord();
+    t0.i64 = t0.i64 | tagTypeNumber.i64;                     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:907
+    *CAST<int64_t*>(cfr.i8p + (t3.i << 3)) = t0.i64;         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:908
+    rPC.i = rPC.i + intptr_t(0x4);                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:31
+    opcode = *CAST<Opcode*>(rBasePC.i8p + (rPC.i << 3));     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:27
+    DISPATCH_OPCODE();
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_27_bitOp__slow)
+    rPC.i8p = rBasePC.i8p + (rPC.i << 3);                    // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:241
+    t3.i = rBasePC.i;                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:242
+    {                                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:64
+        ExecState* exec = CAST<ExecState*>(cfr.vp);
+        Instruction* pc = CAST<Instruction*>(rPC.vp);
+        SlowPathReturnType result = slow_path_urshift(exec, pc);
+        decodeResult(result, t0.instruction, t1.vp);
+    }
+    rPC.i = t0.i;                                            // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:246
+    cfr.i = t1.i;                                            // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:247
+    rBasePC.i = t3.i;                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:248
+    rPC.i = rPC.i - rBasePC.i;                               // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:249
+    rPC.i = rPC.i >> (intptr_t(0x3) & 0x1f);                 // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:250
+    rPC.i = rPC.i + intptr_t(0x4);                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:31
+    opcode = *CAST<Opcode*>(rBasePC.i8p + (rPC.i << 3));     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:27
+    DISPATCH_OPCODE();
+
+OFFLINE_ASM_OPCODE_LABEL(op_unsigned)
+    t0.i = *CAST<int32_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x8)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:94
+    t1.i = *CAST<int32_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x10)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:94
+    if (t1.i >= intptr_t(0x40000000))                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:313
+        goto _offlineasm_28_loadConstantOrVariable__constant;
+    t2.i64 = *CAST<int64_t*>(cfr.i8p + (t1.i << 3));         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:314
+    goto _offlineasm_28_loadConstantOrVariable__done;        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:315
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_28_loadConstantOrVariable__constant)
+    t2.i = *CAST<intptr_t*>(cfr.i8p + 16);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:317
+    t2.i = *CAST<intptr_t*>(t2.i8p + 368);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:318
+    t1.i = t1.i - intptr_t(0x40000000);                      // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:319
+    t2.i64 = *CAST<int64_t*>(t2.i8p + (t1.i << 3));          // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:320
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_28_loadConstantOrVariable__done)
+    if (t2.i32 < int32_t(0x0))                               // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:945
+        goto _offlineasm_opUnsignedSlow;
+    *CAST<int64_t*>(cfr.i8p + (t0.i << 3)) = t2.i64;         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:946
+    rPC.i = rPC.i + intptr_t(0x3);                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:31
+    opcode = *CAST<Opcode*>(rBasePC.i8p + (rPC.i << 3));     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:27
+    DISPATCH_OPCODE();
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_opUnsignedSlow)
+    rPC.i8p = rBasePC.i8p + (rPC.i << 3);                    // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:241
+    t3.i = rBasePC.i;                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:242
+    {                                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:64
+        ExecState* exec = CAST<ExecState*>(cfr.vp);
+        Instruction* pc = CAST<Instruction*>(rPC.vp);
+        SlowPathReturnType result = slow_path_unsigned(exec, pc);
+        decodeResult(result, t0.instruction, t1.vp);
+    }
+    rPC.i = t0.i;                                            // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:246
+    cfr.i = t1.i;                                            // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:247
+    rBasePC.i = t3.i;                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:248
+    rPC.i = rPC.i - rBasePC.i;                               // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:249
+    rPC.i = rPC.i >> (intptr_t(0x3) & 0x1f);                 // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:250
+    rPC.i = rPC.i + intptr_t(0x3);                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:31
+    opcode = *CAST<Opcode*>(rBasePC.i8p + (rPC.i << 3));     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:27
+    DISPATCH_OPCODE();
+
+OFFLINE_ASM_OPCODE_LABEL(op_bitand)
+    t0.i = *CAST<int32_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x18)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:94
+    t2.i = *CAST<int32_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x10)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:94
+    t3.i = *CAST<int32_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x8)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:94
+    if (t0.i >= intptr_t(0x40000000))                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:313
+        goto _offlineasm_bitOp__29_loadConstantOrVariable__constant;
+    t1.i64 = *CAST<int64_t*>(cfr.i8p + (t0.i << 3));         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:314
+    goto _offlineasm_bitOp__29_loadConstantOrVariable__done; // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:315
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_bitOp__29_loadConstantOrVariable__constant)
+    t1.i = *CAST<intptr_t*>(cfr.i8p + 16);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:317
+    t1.i = *CAST<intptr_t*>(t1.i8p + 368);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:318
+    t0.i = t0.i - intptr_t(0x40000000);                      // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:319
+    t1.i64 = *CAST<int64_t*>(t1.i8p + (t0.i << 3));          // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:320
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_bitOp__29_loadConstantOrVariable__done)
+    if (t2.i >= intptr_t(0x40000000))                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:313
+        goto _offlineasm_bitOp__30_loadConstantOrVariable__constant;
+    t0.i64 = *CAST<int64_t*>(cfr.i8p + (t2.i << 3));         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:314
+    goto _offlineasm_bitOp__30_loadConstantOrVariable__done; // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:315
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_bitOp__30_loadConstantOrVariable__constant)
+    t0.i = *CAST<intptr_t*>(cfr.i8p + 16);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:317
+    t0.i = *CAST<intptr_t*>(t0.i8p + 368);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:318
+    t2.i = t2.i - intptr_t(0x40000000);                      // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:319
+    t0.i64 = *CAST<int64_t*>(t0.i8p + (t2.i << 3));          // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:320
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_bitOp__30_loadConstantOrVariable__done)
+    if (t0.u64 < tagTypeNumber.u64)                          // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:904
+        goto _offlineasm_30_bitOp__slow;
+    if (t1.u64 < tagTypeNumber.u64)                          // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:905
+        goto _offlineasm_30_bitOp__slow;
+    t0.i32 = t0.i32 & t1.i32;                                // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:956
+    t0.clearHighWord();
+    t0.i64 = t0.i64 | tagTypeNumber.i64;                     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:907
+    *CAST<int64_t*>(cfr.i8p + (t3.i << 3)) = t0.i64;         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:908
+    rPC.i = rPC.i + intptr_t(0x5);                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:31
+    opcode = *CAST<Opcode*>(rBasePC.i8p + (rPC.i << 3));     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:27
+    DISPATCH_OPCODE();
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_30_bitOp__slow)
+    rPC.i8p = rBasePC.i8p + (rPC.i << 3);                    // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:241
+    t3.i = rBasePC.i;                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:242
+    {                                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:64
+        ExecState* exec = CAST<ExecState*>(cfr.vp);
+        Instruction* pc = CAST<Instruction*>(rPC.vp);
+        SlowPathReturnType result = slow_path_bitand(exec, pc);
+        decodeResult(result, t0.instruction, t1.vp);
+    }
+    rPC.i = t0.i;                                            // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:246
+    cfr.i = t1.i;                                            // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:247
+    rBasePC.i = t3.i;                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:248
+    rPC.i = rPC.i - rBasePC.i;                               // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:249
+    rPC.i = rPC.i >> (intptr_t(0x3) & 0x1f);                 // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:250
+    rPC.i = rPC.i + intptr_t(0x5);                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:31
+    opcode = *CAST<Opcode*>(rBasePC.i8p + (rPC.i << 3));     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:27
+    DISPATCH_OPCODE();
+
+OFFLINE_ASM_OPCODE_LABEL(op_bitxor)
+    t0.i = *CAST<int32_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x18)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:94
+    t2.i = *CAST<int32_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x10)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:94
+    t3.i = *CAST<int32_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x8)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:94
+    if (t0.i >= intptr_t(0x40000000))                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:313
+        goto _offlineasm_bitOp__31_loadConstantOrVariable__constant;
+    t1.i64 = *CAST<int64_t*>(cfr.i8p + (t0.i << 3));         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:314
+    goto _offlineasm_bitOp__31_loadConstantOrVariable__done; // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:315
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_bitOp__31_loadConstantOrVariable__constant)
+    t1.i = *CAST<intptr_t*>(cfr.i8p + 16);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:317
+    t1.i = *CAST<intptr_t*>(t1.i8p + 368);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:318
+    t0.i = t0.i - intptr_t(0x40000000);                      // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:319
+    t1.i64 = *CAST<int64_t*>(t1.i8p + (t0.i << 3));          // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:320
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_bitOp__31_loadConstantOrVariable__done)
+    if (t2.i >= intptr_t(0x40000000))                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:313
+        goto _offlineasm_bitOp__32_loadConstantOrVariable__constant;
+    t0.i64 = *CAST<int64_t*>(cfr.i8p + (t2.i << 3));         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:314
+    goto _offlineasm_bitOp__32_loadConstantOrVariable__done; // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:315
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_bitOp__32_loadConstantOrVariable__constant)
+    t0.i = *CAST<intptr_t*>(cfr.i8p + 16);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:317
+    t0.i = *CAST<intptr_t*>(t0.i8p + 368);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:318
+    t2.i = t2.i - intptr_t(0x40000000);                      // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:319
+    t0.i64 = *CAST<int64_t*>(t0.i8p + (t2.i << 3));          // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:320
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_bitOp__32_loadConstantOrVariable__done)
+    if (t0.u64 < tagTypeNumber.u64)                          // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:904
+        goto _offlineasm_32_bitOp__slow;
+    if (t1.u64 < tagTypeNumber.u64)                          // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:905
+        goto _offlineasm_32_bitOp__slow;
+    t0.i32 = t0.i32 ^ t1.i32;                                // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:964
+    t0.clearHighWord();
+    t0.i64 = t0.i64 | tagTypeNumber.i64;                     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:907
+    *CAST<int64_t*>(cfr.i8p + (t3.i << 3)) = t0.i64;         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:908
+    rPC.i = rPC.i + intptr_t(0x5);                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:31
+    opcode = *CAST<Opcode*>(rBasePC.i8p + (rPC.i << 3));     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:27
+    DISPATCH_OPCODE();
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_32_bitOp__slow)
+    rPC.i8p = rBasePC.i8p + (rPC.i << 3);                    // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:241
+    t3.i = rBasePC.i;                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:242
+    {                                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:64
+        ExecState* exec = CAST<ExecState*>(cfr.vp);
+        Instruction* pc = CAST<Instruction*>(rPC.vp);
+        SlowPathReturnType result = slow_path_bitxor(exec, pc);
+        decodeResult(result, t0.instruction, t1.vp);
+    }
+    rPC.i = t0.i;                                            // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:246
+    cfr.i = t1.i;                                            // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:247
+    rBasePC.i = t3.i;                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:248
+    rPC.i = rPC.i - rBasePC.i;                               // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:249
+    rPC.i = rPC.i >> (intptr_t(0x3) & 0x1f);                 // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:250
+    rPC.i = rPC.i + intptr_t(0x5);                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:31
+    opcode = *CAST<Opcode*>(rBasePC.i8p + (rPC.i << 3));     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:27
+    DISPATCH_OPCODE();
+
+OFFLINE_ASM_OPCODE_LABEL(op_bitor)
+    t0.i = *CAST<int32_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x18)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:94
+    t2.i = *CAST<int32_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x10)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:94
+    t3.i = *CAST<int32_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x8)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:94
+    if (t0.i >= intptr_t(0x40000000))                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:313
+        goto _offlineasm_bitOp__33_loadConstantOrVariable__constant;
+    t1.i64 = *CAST<int64_t*>(cfr.i8p + (t0.i << 3));         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:314
+    goto _offlineasm_bitOp__33_loadConstantOrVariable__done; // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:315
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_bitOp__33_loadConstantOrVariable__constant)
+    t1.i = *CAST<intptr_t*>(cfr.i8p + 16);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:317
+    t1.i = *CAST<intptr_t*>(t1.i8p + 368);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:318
+    t0.i = t0.i - intptr_t(0x40000000);                      // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:319
+    t1.i64 = *CAST<int64_t*>(t1.i8p + (t0.i << 3));          // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:320
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_bitOp__33_loadConstantOrVariable__done)
+    if (t2.i >= intptr_t(0x40000000))                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:313
+        goto _offlineasm_bitOp__34_loadConstantOrVariable__constant;
+    t0.i64 = *CAST<int64_t*>(cfr.i8p + (t2.i << 3));         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:314
+    goto _offlineasm_bitOp__34_loadConstantOrVariable__done; // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:315
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_bitOp__34_loadConstantOrVariable__constant)
+    t0.i = *CAST<intptr_t*>(cfr.i8p + 16);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:317
+    t0.i = *CAST<intptr_t*>(t0.i8p + 368);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:318
+    t2.i = t2.i - intptr_t(0x40000000);                      // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:319
+    t0.i64 = *CAST<int64_t*>(t0.i8p + (t2.i << 3));          // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:320
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_bitOp__34_loadConstantOrVariable__done)
+    if (t0.u64 < tagTypeNumber.u64)                          // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:904
+        goto _offlineasm_34_bitOp__slow;
+    if (t1.u64 < tagTypeNumber.u64)                          // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:905
+        goto _offlineasm_34_bitOp__slow;
+    t0.i32 = t0.i32 | t1.i32;                                // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:972
+    t0.clearHighWord();
+    t0.i64 = t0.i64 | tagTypeNumber.i64;                     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:907
+    *CAST<int64_t*>(cfr.i8p + (t3.i << 3)) = t0.i64;         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:908
+    rPC.i = rPC.i + intptr_t(0x5);                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:31
+    opcode = *CAST<Opcode*>(rBasePC.i8p + (rPC.i << 3));     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:27
+    DISPATCH_OPCODE();
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_34_bitOp__slow)
+    rPC.i8p = rBasePC.i8p + (rPC.i << 3);                    // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:241
+    t3.i = rBasePC.i;                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:242
+    {                                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:64
+        ExecState* exec = CAST<ExecState*>(cfr.vp);
+        Instruction* pc = CAST<Instruction*>(rPC.vp);
+        SlowPathReturnType result = slow_path_bitor(exec, pc);
+        decodeResult(result, t0.instruction, t1.vp);
+    }
+    rPC.i = t0.i;                                            // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:246
+    cfr.i = t1.i;                                            // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:247
+    rBasePC.i = t3.i;                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:248
+    rPC.i = rPC.i - rBasePC.i;                               // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:249
+    rPC.i = rPC.i >> (intptr_t(0x3) & 0x1f);                 // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:250
+    rPC.i = rPC.i + intptr_t(0x5);                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:31
+    opcode = *CAST<Opcode*>(rBasePC.i8p + (rPC.i << 3));     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:27
+    DISPATCH_OPCODE();
+
+OFFLINE_ASM_OPCODE_LABEL(op_check_has_instance)
+    t1.i = *CAST<int32_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x18)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:94
+    if (t1.i >= intptr_t(0x40000000))                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:313
+        goto _offlineasm_loadConstantOrVariableCell__35_loadConstantOrVariable__constant;
+    t0.i64 = *CAST<int64_t*>(cfr.i8p + (t1.i << 3));         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:314
+    goto _offlineasm_loadConstantOrVariableCell__35_loadConstantOrVariable__done; // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:315
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_loadConstantOrVariableCell__35_loadConstantOrVariable__constant)
+    t0.i = *CAST<intptr_t*>(cfr.i8p + 16);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:317
+    t0.i = *CAST<intptr_t*>(t0.i8p + 368);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:318
+    t1.i = t1.i - intptr_t(0x40000000);                      // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:319
+    t0.i64 = *CAST<int64_t*>(t0.i8p + (t1.i << 3));          // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:320
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_loadConstantOrVariableCell__35_loadConstantOrVariable__done)
+    if ((t0.i64 & tagMask.i64) != 0)                         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:331
+        goto _offlineasm_opCheckHasInstanceSlow;
+    t0.i = *CAST<intptr_t*>(t0.i8p);                         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:981
+    if ((*CAST<int8_t*>(t0.i8p + 93) & int8_t(0x8)) == 0)    // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:982
+        goto _offlineasm_opCheckHasInstanceSlow;
+    rPC.i = rPC.i + intptr_t(0x5);                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:31
+    opcode = *CAST<Opcode*>(rBasePC.i8p + (rPC.i << 3));     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:27
+    DISPATCH_OPCODE();
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_opCheckHasInstanceSlow)
+    rPC.i8p = rBasePC.i8p + (rPC.i << 3);                    // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:241
+    t3.i = rBasePC.i;                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:242
+    {                                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:64
+        ExecState* exec = CAST<ExecState*>(cfr.vp);
+        Instruction* pc = CAST<Instruction*>(rPC.vp);
+        SlowPathReturnType result = llint_slow_path_check_has_instance(exec, pc);
+        decodeResult(result, t0.instruction, t1.vp);
+    }
+    rPC.i = t0.i;                                            // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:246
+    cfr.i = t1.i;                                            // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:247
+    rBasePC.i = t3.i;                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:248
+    rPC.i = rPC.i - rBasePC.i;                               // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:249
+    rPC.i = rPC.i >> (intptr_t(0x3) & 0x1f);                 // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:250
+    rPC.i = rPC.i + intptr_t(0x0);                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:31
+    opcode = *CAST<Opcode*>(rBasePC.i8p + (rPC.i << 3));     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:27
+    DISPATCH_OPCODE();
+
+OFFLINE_ASM_OPCODE_LABEL(op_instanceof)
+    t0.i = *CAST<int32_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x18)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:94
+    t3.i = *CAST<int32_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x8)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:94
+    if (t0.i >= intptr_t(0x40000000))                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:313
+        goto _offlineasm_loadConstantOrVariableCell__36_loadConstantOrVariable__constant;
+    t1.i64 = *CAST<int64_t*>(cfr.i8p + (t0.i << 3));         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:314
+    goto _offlineasm_loadConstantOrVariableCell__36_loadConstantOrVariable__done; // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:315
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_loadConstantOrVariableCell__36_loadConstantOrVariable__constant)
+    t1.i = *CAST<intptr_t*>(cfr.i8p + 16);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:317
+    t1.i = *CAST<intptr_t*>(t1.i8p + 368);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:318
+    t0.i = t0.i - intptr_t(0x40000000);                      // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:319
+    t1.i64 = *CAST<int64_t*>(t1.i8p + (t0.i << 3));          // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:320
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_loadConstantOrVariableCell__36_loadConstantOrVariable__done)
+    if ((t1.i64 & tagMask.i64) != 0)                         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:331
+        goto _offlineasm_opInstanceofSlow;
+    t2.i = *CAST<intptr_t*>(t1.i8p);                         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:996
+    if (*CAST<uint8_t*>(t2.i8p + 92) < uint8_t(0x11))        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:997
+        goto _offlineasm_opInstanceofSlow;
+    t0.i = *CAST<int32_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x10)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:94
+    if (t0.i >= intptr_t(0x40000000))                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:313
+        goto _offlineasm_loadConstantOrVariableCell__37_loadConstantOrVariable__constant;
+    t2.i64 = *CAST<int64_t*>(cfr.i8p + (t0.i << 3));         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:314
+    goto _offlineasm_loadConstantOrVariableCell__37_loadConstantOrVariable__done; // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:315
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_loadConstantOrVariableCell__37_loadConstantOrVariable__constant)
+    t2.i = *CAST<intptr_t*>(cfr.i8p + 16);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:317
+    t2.i = *CAST<intptr_t*>(t2.i8p + 368);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:318
+    t0.i = t0.i - intptr_t(0x40000000);                      // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:319
+    t2.i64 = *CAST<int64_t*>(t2.i8p + (t0.i << 3));          // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:320
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_loadConstantOrVariableCell__37_loadConstantOrVariable__done)
+    if ((t2.i64 & tagMask.i64) != 0)                         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:331
+        goto _offlineasm_opInstanceofSlow;
+    t0.i = intptr_t(0x1);                                    // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1002
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_opInstanceofLoop)
+    t2.i = *CAST<intptr_t*>(t2.i8p);                         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1004
+    t2.i64 = *CAST<int64_t*>(t2.i8p + 16);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1005
+    if (t2.i64 == t1.i64)                                    // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1006
+        goto _offlineasm_opInstanceofDone;
+    if ((t2.i64 & tagMask.i64) == 0)                         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1007
+        goto _offlineasm_opInstanceofLoop;
+    t0.i = intptr_t(0x0);                                    // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1009
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_opInstanceofDone)
+    t0.i64 = t0.i64 | int64_t(0x6);                          // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1011
+    *CAST<int64_t*>(cfr.i8p + (t3.i << 3)) = t0.i64;         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1012
+    rPC.i = rPC.i + intptr_t(0x4);                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:31
+    opcode = *CAST<Opcode*>(rBasePC.i8p + (rPC.i << 3));     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:27
+    DISPATCH_OPCODE();
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_opInstanceofSlow)
+    rPC.i8p = rBasePC.i8p + (rPC.i << 3);                    // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:241
+    t3.i = rBasePC.i;                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:242
+    {                                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:64
+        ExecState* exec = CAST<ExecState*>(cfr.vp);
+        Instruction* pc = CAST<Instruction*>(rPC.vp);
+        SlowPathReturnType result = llint_slow_path_instanceof(exec, pc);
+        decodeResult(result, t0.instruction, t1.vp);
+    }
+    rPC.i = t0.i;                                            // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:246
+    cfr.i = t1.i;                                            // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:247
+    rBasePC.i = t3.i;                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:248
+    rPC.i = rPC.i - rBasePC.i;                               // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:249
+    rPC.i = rPC.i >> (intptr_t(0x3) & 0x1f);                 // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:250
+    rPC.i = rPC.i + intptr_t(0x4);                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:31
+    opcode = *CAST<Opcode*>(rBasePC.i8p + (rPC.i << 3));     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:27
+    DISPATCH_OPCODE();
+
+OFFLINE_ASM_OPCODE_LABEL(op_is_undefined)
+    t1.i = *CAST<int32_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x10)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:94
+    t2.i = *CAST<int32_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x8)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:94
+    if (t1.i >= intptr_t(0x40000000))                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:313
+        goto _offlineasm_38_loadConstantOrVariable__constant;
+    t0.i64 = *CAST<int64_t*>(cfr.i8p + (t1.i << 3));         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:314
+    goto _offlineasm_38_loadConstantOrVariable__done;        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:315
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_38_loadConstantOrVariable__constant)
+    t0.i = *CAST<intptr_t*>(cfr.i8p + 16);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:317
+    t0.i = *CAST<intptr_t*>(t0.i8p + 368);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:318
+    t1.i = t1.i - intptr_t(0x40000000);                      // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:319
+    t0.i64 = *CAST<int64_t*>(t0.i8p + (t1.i << 3));          // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:320
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_38_loadConstantOrVariable__done)
+    if ((t0.i64 & tagMask.i64) == 0)                         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1025
+        goto _offlineasm_opIsUndefinedCell;
+    t3.i = (t0.u64 == uint64_t(0xa));                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1026
+    t3.i64 = t3.i64 | int64_t(0x6);                          // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1027
+    *CAST<int64_t*>(cfr.i8p + (t2.i << 3)) = t3.i64;         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1028
+    rPC.i = rPC.i + intptr_t(0x3);                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:31
+    opcode = *CAST<Opcode*>(rBasePC.i8p + (rPC.i << 3));     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:27
+    DISPATCH_OPCODE();
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_opIsUndefinedCell)
+    t0.i = *CAST<intptr_t*>(t0.i8p);                         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1031
+    if ((*CAST<int8_t*>(t0.i8p + 93) & int8_t(0x1)) != 0)    // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1032
+        goto _offlineasm_masqueradesAsUndefined;
+    t1.i = intptr_t(0x6);                                    // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1033
+    *CAST<int64_t*>(cfr.i8p + (t2.i << 3)) = t1.i64;         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1034
+    rPC.i = rPC.i + intptr_t(0x3);                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:31
+    opcode = *CAST<Opcode*>(rBasePC.i8p + (rPC.i << 3));     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:27
+    DISPATCH_OPCODE();
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_masqueradesAsUndefined)
+    t1.i = *CAST<intptr_t*>(cfr.i8p + 16);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1037
+    t1.i = *CAST<intptr_t*>(t1.i8p + 40);                    // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1038
+    t3.i = (*CAST<uintptr_t*>(t0.i8p + 8) == t1.u);          // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1039
+    t3.i64 = t3.i64 | int64_t(0x6);                          // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1040
+    *CAST<int64_t*>(cfr.i8p + (t2.i << 3)) = t3.i64;         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1041
+    rPC.i = rPC.i + intptr_t(0x3);                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:31
+    opcode = *CAST<Opcode*>(rBasePC.i8p + (rPC.i << 3));     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:27
+    DISPATCH_OPCODE();
+
+OFFLINE_ASM_OPCODE_LABEL(op_is_boolean)
+    t1.i = *CAST<int32_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x10)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:94
+    t2.i = *CAST<int32_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x8)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:94
+    if (t1.i >= intptr_t(0x40000000))                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:313
+        goto _offlineasm_39_loadConstantOrVariable__constant;
+    t0.i64 = *CAST<int64_t*>(cfr.i8p + (t1.i << 3));         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:314
+    goto _offlineasm_39_loadConstantOrVariable__done;        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:315
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_39_loadConstantOrVariable__constant)
+    t0.i = *CAST<intptr_t*>(cfr.i8p + 16);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:317
+    t0.i = *CAST<intptr_t*>(t0.i8p + 368);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:318
+    t1.i = t1.i - intptr_t(0x40000000);                      // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:319
+    t0.i64 = *CAST<int64_t*>(t0.i8p + (t1.i << 3));          // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:320
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_39_loadConstantOrVariable__done)
+    t0.i64 = t0.i64 ^ int64_t(0x6);                          // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1050
+    t0.i = ((t0.i64 & int64_t(-2)) == 0);                    // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1051
+    t0.i64 = t0.i64 | int64_t(0x6);                          // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1052
+    *CAST<int64_t*>(cfr.i8p + (t2.i << 3)) = t0.i64;         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1053
+    rPC.i = rPC.i + intptr_t(0x3);                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:31
+    opcode = *CAST<Opcode*>(rBasePC.i8p + (rPC.i << 3));     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:27
+    DISPATCH_OPCODE();
+
+OFFLINE_ASM_OPCODE_LABEL(op_is_number)
+    t1.i = *CAST<int32_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x10)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:94
+    t2.i = *CAST<int32_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x8)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:94
+    if (t1.i >= intptr_t(0x40000000))                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:313
+        goto _offlineasm_40_loadConstantOrVariable__constant;
+    t0.i64 = *CAST<int64_t*>(cfr.i8p + (t1.i << 3));         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:314
+    goto _offlineasm_40_loadConstantOrVariable__done;        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:315
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_40_loadConstantOrVariable__constant)
+    t0.i = *CAST<intptr_t*>(cfr.i8p + 16);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:317
+    t0.i = *CAST<intptr_t*>(t0.i8p + 368);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:318
+    t1.i = t1.i - intptr_t(0x40000000);                      // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:319
+    t0.i64 = *CAST<int64_t*>(t0.i8p + (t1.i << 3));          // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:320
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_40_loadConstantOrVariable__done)
+    t1.i = ((t0.i64 & tagTypeNumber.i64) != 0);              // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1062
+    t1.i64 = t1.i64 | int64_t(0x6);                          // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1063
+    *CAST<int64_t*>(cfr.i8p + (t2.i << 3)) = t1.i64;         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1064
+    rPC.i = rPC.i + intptr_t(0x3);                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:31
+    opcode = *CAST<Opcode*>(rBasePC.i8p + (rPC.i << 3));     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:27
+    DISPATCH_OPCODE();
+
+OFFLINE_ASM_OPCODE_LABEL(op_is_string)
+    t1.i = *CAST<int32_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x10)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:94
+    t2.i = *CAST<int32_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x8)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:94
+    if (t1.i >= intptr_t(0x40000000))                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:313
+        goto _offlineasm_41_loadConstantOrVariable__constant;
+    t0.i64 = *CAST<int64_t*>(cfr.i8p + (t1.i << 3));         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:314
+    goto _offlineasm_41_loadConstantOrVariable__done;        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:315
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_41_loadConstantOrVariable__constant)
+    t0.i = *CAST<intptr_t*>(cfr.i8p + 16);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:317
+    t0.i = *CAST<intptr_t*>(t0.i8p + 368);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:318
+    t1.i = t1.i - intptr_t(0x40000000);                      // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:319
+    t0.i64 = *CAST<int64_t*>(t0.i8p + (t1.i << 3));          // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:320
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_41_loadConstantOrVariable__done)
+    if ((t0.i64 & tagMask.i64) != 0)                         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1073
+        goto _offlineasm_opIsStringNotCell;
+    t0.i = *CAST<intptr_t*>(t0.i8p);                         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1074
+    t1.i = (*CAST<uint8_t*>(t0.i8p + 92) == uint8_t(0x5));   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1075
+    t1.i64 = t1.i64 | int64_t(0x6);                          // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1076
+    *CAST<int64_t*>(cfr.i8p + (t2.i << 3)) = t1.i64;         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1077
+    rPC.i = rPC.i + intptr_t(0x3);                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:31
+    opcode = *CAST<Opcode*>(rBasePC.i8p + (rPC.i << 3));     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:27
+    DISPATCH_OPCODE();
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_opIsStringNotCell)
+    *CAST<int64_t*>(cfr.i8p + (t2.i << 3)) = int64_t(0x6);   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1080
+    rPC.i = rPC.i + intptr_t(0x3);                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:31
+    opcode = *CAST<Opcode*>(rBasePC.i8p + (rPC.i << 3));     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:27
+    DISPATCH_OPCODE();
+
+OFFLINE_ASM_OPCODE_LABEL(op_init_global_const)
+    t1.i = *CAST<int32_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x10)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:94
+    t0.i = *CAST<intptr_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x8)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:98
+    if (t1.i >= intptr_t(0x40000000))                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:313
+        goto _offlineasm_42_loadConstantOrVariable__constant;
+    t2.i64 = *CAST<int64_t*>(cfr.i8p + (t1.i << 3));         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:314
+    goto _offlineasm_42_loadConstantOrVariable__done;        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:315
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_42_loadConstantOrVariable__constant)
+    t2.i = *CAST<intptr_t*>(cfr.i8p + 16);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:317
+    t2.i = *CAST<intptr_t*>(t2.i8p + 368);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:318
+    t1.i = t1.i - intptr_t(0x40000000);                      // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:319
+    t2.i64 = *CAST<int64_t*>(t2.i8p + (t1.i << 3));          // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:320
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_42_loadConstantOrVariable__done)
+    *CAST<int64_t*>(t0.i8p) = t2.i64;                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1115
+    rPC.i = rPC.i + intptr_t(0x5);                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:31
+    opcode = *CAST<Opcode*>(rBasePC.i8p + (rPC.i << 3));     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:27
+    DISPATCH_OPCODE();
+
+OFFLINE_ASM_OPCODE_LABEL(op_get_by_id)
+    t0.i = *CAST<int32_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x10)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:94
+    t1.i = *CAST<intptr_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x20)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:98
+    if (t0.i >= intptr_t(0x40000000))                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:313
+        goto _offlineasm_getById__loadConstantOrVariableCell__43_loadConstantOrVariable__constant;
+    t3.i64 = *CAST<int64_t*>(cfr.i8p + (t0.i << 3));         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:314
+    goto _offlineasm_getById__loadConstantOrVariableCell__43_loadConstantOrVariable__done; // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:315
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_getById__loadConstantOrVariableCell__43_loadConstantOrVariable__constant)
+    t3.i = *CAST<intptr_t*>(cfr.i8p + 16);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:317
+    t3.i = *CAST<intptr_t*>(t3.i8p + 368);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:318
+    t0.i = t0.i - intptr_t(0x40000000);                      // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:319
+    t3.i64 = *CAST<int64_t*>(t3.i8p + (t0.i << 3));          // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:320
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_getById__loadConstantOrVariableCell__43_loadConstantOrVariable__done)
+    if ((t3.i64 & tagMask.i64) != 0)                         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:331
+        goto _offlineasm_getById__opGetByIdSlow;
+    t2.i = *CAST<int32_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x28)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:94
+    if (*CAST<intptr_t*>(t3.i8p) != t1.i)                    // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1134
+        goto _offlineasm_getById__opGetByIdSlow;
+    t1.i = *CAST<int32_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x8)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:94
+    t0.i64 = *CAST<int64_t*>(t3.i8p + (t2.i << 0));          // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1136
+    *CAST<int64_t*>(cfr.i8p + (t1.i << 3)) = t0.i64;         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1137
+    t1.i = *CAST<intptr_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x40)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:98
+    *CAST<int64_t*>(t1.i8p + 16) = t0.i64;                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:383
+    rPC.i = rPC.i + intptr_t(0x9);                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:31
+    opcode = *CAST<Opcode*>(rBasePC.i8p + (rPC.i << 3));     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:27
+    DISPATCH_OPCODE();
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_getById__opGetByIdSlow)
+    rPC.i8p = rBasePC.i8p + (rPC.i << 3);                    // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:241
+    t3.i = rBasePC.i;                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:242
+    {                                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:64
+        ExecState* exec = CAST<ExecState*>(cfr.vp);
+        Instruction* pc = CAST<Instruction*>(rPC.vp);
+        SlowPathReturnType result = llint_slow_path_get_by_id(exec, pc);
+        decodeResult(result, t0.instruction, t1.vp);
+    }
+    rPC.i = t0.i;                                            // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:246
+    cfr.i = t1.i;                                            // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:247
+    rBasePC.i = t3.i;                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:248
+    rPC.i = rPC.i - rBasePC.i;                               // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:249
+    rPC.i = rPC.i >> (intptr_t(0x3) & 0x1f);                 // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:250
+    rPC.i = rPC.i + intptr_t(0x9);                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:31
+    opcode = *CAST<Opcode*>(rBasePC.i8p + (rPC.i << 3));     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:27
+    DISPATCH_OPCODE();
+
+OFFLINE_ASM_OPCODE_LABEL(op_get_by_id_out_of_line)
+    t0.i = *CAST<int32_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x10)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:94
+    t1.i = *CAST<intptr_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x20)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:98
+    if (t0.i >= intptr_t(0x40000000))                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:313
+        goto _offlineasm_getById__loadConstantOrVariableCell__44_loadConstantOrVariable__constant;
+    t3.i64 = *CAST<int64_t*>(cfr.i8p + (t0.i << 3));         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:314
+    goto _offlineasm_getById__loadConstantOrVariableCell__44_loadConstantOrVariable__done; // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:315
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_getById__loadConstantOrVariableCell__44_loadConstantOrVariable__constant)
+    t3.i = *CAST<intptr_t*>(cfr.i8p + 16);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:317
+    t3.i = *CAST<intptr_t*>(t3.i8p + 368);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:318
+    t0.i = t0.i - intptr_t(0x40000000);                      // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:319
+    t3.i64 = *CAST<int64_t*>(t3.i8p + (t0.i << 3));          // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:320
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_getById__loadConstantOrVariableCell__44_loadConstantOrVariable__done)
+    if ((t3.i64 & tagMask.i64) != 0)                         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:331
+        goto _offlineasm_44_getById__opGetByIdSlow;
+    t2.i = *CAST<int32_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x28)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:94
+    t0.i = *CAST<intptr_t*>(t3.i8p + 8);                     // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:592
+    if (*CAST<intptr_t*>(t3.i8p) != t1.i)                    // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1134
+        goto _offlineasm_44_getById__opGetByIdSlow;
+    t1.i = *CAST<int32_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x8)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:94
+    t3.i64 = *CAST<int64_t*>(t0.i8p + (t2.i << 0));          // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1136
+    *CAST<int64_t*>(cfr.i8p + (t1.i << 3)) = t3.i64;         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1137
+    t1.i = *CAST<intptr_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x40)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:98
+    *CAST<int64_t*>(t1.i8p + 16) = t3.i64;                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:383
+    rPC.i = rPC.i + intptr_t(0x9);                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:31
+    opcode = *CAST<Opcode*>(rBasePC.i8p + (rPC.i << 3));     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:27
+    DISPATCH_OPCODE();
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_44_getById__opGetByIdSlow)
+    rPC.i8p = rBasePC.i8p + (rPC.i << 3);                    // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:241
+    t3.i = rBasePC.i;                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:242
+    {                                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:64
+        ExecState* exec = CAST<ExecState*>(cfr.vp);
+        Instruction* pc = CAST<Instruction*>(rPC.vp);
+        SlowPathReturnType result = llint_slow_path_get_by_id(exec, pc);
+        decodeResult(result, t0.instruction, t1.vp);
+    }
+    rPC.i = t0.i;                                            // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:246
+    cfr.i = t1.i;                                            // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:247
+    rBasePC.i = t3.i;                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:248
+    rPC.i = rPC.i - rBasePC.i;                               // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:249
+    rPC.i = rPC.i >> (intptr_t(0x3) & 0x1f);                 // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:250
+    rPC.i = rPC.i + intptr_t(0x9);                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:31
+    opcode = *CAST<Opcode*>(rBasePC.i8p + (rPC.i << 3));     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:27
+    DISPATCH_OPCODE();
+
+OFFLINE_ASM_OPCODE_LABEL(op_get_array_length)
+    t0.i = *CAST<int32_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x10)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:94
+    t1.i = *CAST<intptr_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x20)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:98
+    if (t0.i >= intptr_t(0x40000000))                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:313
+        goto _offlineasm_loadConstantOrVariableCell__45_loadConstantOrVariable__constant;
+    t3.i64 = *CAST<int64_t*>(cfr.i8p + (t0.i << 3));         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:314
+    goto _offlineasm_loadConstantOrVariableCell__45_loadConstantOrVariable__done; // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:315
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_loadConstantOrVariableCell__45_loadConstantOrVariable__constant)
+    t3.i = *CAST<intptr_t*>(cfr.i8p + 16);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:317
+    t3.i = *CAST<intptr_t*>(t3.i8p + 368);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:318
+    t0.i = t0.i - intptr_t(0x40000000);                      // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:319
+    t3.i64 = *CAST<int64_t*>(t3.i8p + (t0.i << 3));          // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:320
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_loadConstantOrVariableCell__45_loadConstantOrVariable__done)
+    if ((t3.i64 & tagMask.i64) != 0)                         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:331
+        goto _offlineasm_opGetArrayLengthSlow;
+    t2.i = *CAST<intptr_t*>(t3.i8p);                         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1160
+    *CAST<intptr_t*>(t1.i8p + 8) = t2.i;                     // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:266
+    t2.i = *CAST<uint8_t*>(t2.i8p + 95);                     // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:267
+    if ((t2.i32 & int32_t(0x1)) == 0)                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1162
+        goto _offlineasm_opGetArrayLengthSlow;
+    if ((t2.i32 & int32_t(0x1e)) == 0)                       // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1163
+        goto _offlineasm_opGetArrayLengthSlow;
+    t1.i = *CAST<int32_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x8)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:94
+    t0.i = *CAST<intptr_t*>(t3.i8p + 8);                     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1165
+    t0.u = *CAST<uint32_t*>(t0.i8p - 8);                     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1166
+    if (t0.i32 < int32_t(0x0))                               // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1167
+        goto _offlineasm_opGetArrayLengthSlow;
+    t0.i64 = t0.i64 | tagTypeNumber.i64;                     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1168
+    t2.i = *CAST<intptr_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x40)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:98
+    *CAST<int64_t*>(t2.i8p + 16) = t0.i64;                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:383
+    *CAST<int64_t*>(cfr.i8p + (t1.i << 3)) = t0.i64;         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1170
+    rPC.i = rPC.i + intptr_t(0x9);                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:31
+    opcode = *CAST<Opcode*>(rBasePC.i8p + (rPC.i << 3));     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:27
+    DISPATCH_OPCODE();
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_opGetArrayLengthSlow)
+    rPC.i8p = rBasePC.i8p + (rPC.i << 3);                    // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:241
+    t3.i = rBasePC.i;                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:242
+    {                                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:64
+        ExecState* exec = CAST<ExecState*>(cfr.vp);
+        Instruction* pc = CAST<Instruction*>(rPC.vp);
+        SlowPathReturnType result = llint_slow_path_get_by_id(exec, pc);
+        decodeResult(result, t0.instruction, t1.vp);
+    }
+    rPC.i = t0.i;                                            // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:246
+    cfr.i = t1.i;                                            // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:247
+    rBasePC.i = t3.i;                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:248
+    rPC.i = rPC.i - rBasePC.i;                               // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:249
+    rPC.i = rPC.i >> (intptr_t(0x3) & 0x1f);                 // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:250
+    rPC.i = rPC.i + intptr_t(0x9);                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:31
+    opcode = *CAST<Opcode*>(rBasePC.i8p + (rPC.i << 3));     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:27
+    DISPATCH_OPCODE();
+
+OFFLINE_ASM_OPCODE_LABEL(op_get_arguments_length)
+    t0.i = *CAST<int32_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x10)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:94
+    t1.i = *CAST<int32_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x8)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:94
+    if (*CAST<int64_t*>(cfr.i8p + (t0.i << 3)) != 0)         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1182
+        goto _offlineasm_opGetArgumentsLengthSlow;
+    t2.u = *CAST<uint32_t*>(cfr.i8p + 40);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1183
+    t2.i32 = t2.i32 - int32_t(0x1);                          // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1184
+    t2.clearHighWord();
+    t2.i64 = t2.i64 | tagTypeNumber.i64;                     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1185
+    *CAST<int64_t*>(cfr.i8p + (t1.i << 3)) = t2.i64;         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1186
+    rPC.i = rPC.i + intptr_t(0x4);                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:31
+    opcode = *CAST<Opcode*>(rBasePC.i8p + (rPC.i << 3));     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:27
+    DISPATCH_OPCODE();
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_opGetArgumentsLengthSlow)
+    rPC.i8p = rBasePC.i8p + (rPC.i << 3);                    // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:241
+    t3.i = rBasePC.i;                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:242
+    {                                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:64
+        ExecState* exec = CAST<ExecState*>(cfr.vp);
+        Instruction* pc = CAST<Instruction*>(rPC.vp);
+        SlowPathReturnType result = llint_slow_path_get_arguments_length(exec, pc);
+        decodeResult(result, t0.instruction, t1.vp);
+    }
+    rPC.i = t0.i;                                            // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:246
+    cfr.i = t1.i;                                            // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:247
+    rBasePC.i = t3.i;                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:248
+    rPC.i = rPC.i - rBasePC.i;                               // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:249
+    rPC.i = rPC.i >> (intptr_t(0x3) & 0x1f);                 // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:250
+    rPC.i = rPC.i + intptr_t(0x4);                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:31
+    opcode = *CAST<Opcode*>(rBasePC.i8p + (rPC.i << 3));     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:27
+    DISPATCH_OPCODE();
+
+OFFLINE_ASM_OPCODE_LABEL(op_put_by_id)
+    t3.i = *CAST<int32_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x8)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:94
+    t1.i = *CAST<intptr_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x20)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:98
+    if (t3.i >= intptr_t(0x40000000))                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:313
+        goto _offlineasm_putById__loadConstantOrVariableCell__46_loadConstantOrVariable__constant;
+    t0.i64 = *CAST<int64_t*>(cfr.i8p + (t3.i << 3));         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:314
+    goto _offlineasm_putById__loadConstantOrVariableCell__46_loadConstantOrVariable__done; // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:315
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_putById__loadConstantOrVariableCell__46_loadConstantOrVariable__constant)
+    t0.i = *CAST<intptr_t*>(cfr.i8p + 16);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:317
+    t0.i = *CAST<intptr_t*>(t0.i8p + 368);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:318
+    t3.i = t3.i - intptr_t(0x40000000);                      // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:319
+    t0.i64 = *CAST<int64_t*>(t0.i8p + (t3.i << 3));          // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:320
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_putById__loadConstantOrVariableCell__46_loadConstantOrVariable__done)
+    if ((t0.i64 & tagMask.i64) != 0)                         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:331
+        goto _offlineasm_opPutByIdSlow;
+    t2.i = *CAST<int32_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x18)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:94
+    if (*CAST<intptr_t*>(t0.i8p) != t1.i)                    // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1205
+        goto _offlineasm_opPutByIdSlow;
+    t1.i = *CAST<int32_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x28)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:94
+    if (t2.i >= intptr_t(0x40000000))                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:313
+        goto _offlineasm_putById__getPropertyStorage__continuation__47_loadConstantOrVariable__constant;
+    t3.i64 = *CAST<int64_t*>(cfr.i8p + (t2.i << 3));         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:314
+    goto _offlineasm_putById__getPropertyStorage__continuation__47_loadConstantOrVariable__done; // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:315
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_putById__getPropertyStorage__continuation__47_loadConstantOrVariable__constant)
+    t3.i = *CAST<intptr_t*>(cfr.i8p + 16);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:317
+    t3.i = *CAST<intptr_t*>(t3.i8p + 368);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:318
+    t2.i = t2.i - intptr_t(0x40000000);                      // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:319
+    t3.i64 = *CAST<int64_t*>(t3.i8p + (t2.i << 3));          // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:320
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_putById__getPropertyStorage__continuation__47_loadConstantOrVariable__done)
+    *CAST<int64_t*>(t0.i8p + (t1.i << 0)) = t3.i64;          // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1208
+    rPC.i = rPC.i + intptr_t(0x9);                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:31
+    opcode = *CAST<Opcode*>(rBasePC.i8p + (rPC.i << 3));     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:27
+    DISPATCH_OPCODE();
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_opPutByIdSlow)
+    rPC.i8p = rBasePC.i8p + (rPC.i << 3);                    // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:241
+    t3.i = rBasePC.i;                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:242
+    {                                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:64
+        ExecState* exec = CAST<ExecState*>(cfr.vp);
+        Instruction* pc = CAST<Instruction*>(rPC.vp);
+        SlowPathReturnType result = llint_slow_path_put_by_id(exec, pc);
+        decodeResult(result, t0.instruction, t1.vp);
+    }
+    rPC.i = t0.i;                                            // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:246
+    cfr.i = t1.i;                                            // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:247
+    rBasePC.i = t3.i;                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:248
+    rPC.i = rPC.i - rBasePC.i;                               // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:249
+    rPC.i = rPC.i >> (intptr_t(0x3) & 0x1f);                 // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:250
+    rPC.i = rPC.i + intptr_t(0x9);                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:31
+    opcode = *CAST<Opcode*>(rBasePC.i8p + (rPC.i << 3));     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:27
+    DISPATCH_OPCODE();
+
+OFFLINE_ASM_OPCODE_LABEL(op_put_by_id_out_of_line)
+    t3.i = *CAST<int32_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x8)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:94
+    t1.i = *CAST<intptr_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x20)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:98
+    if (t3.i >= intptr_t(0x40000000))                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:313
+        goto _offlineasm_putById__loadConstantOrVariableCell__48_loadConstantOrVariable__constant;
+    t0.i64 = *CAST<int64_t*>(cfr.i8p + (t3.i << 3));         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:314
+    goto _offlineasm_putById__loadConstantOrVariableCell__48_loadConstantOrVariable__done; // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:315
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_putById__loadConstantOrVariableCell__48_loadConstantOrVariable__constant)
+    t0.i = *CAST<intptr_t*>(cfr.i8p + 16);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:317
+    t0.i = *CAST<intptr_t*>(t0.i8p + 368);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:318
+    t3.i = t3.i - intptr_t(0x40000000);                      // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:319
+    t0.i64 = *CAST<int64_t*>(t0.i8p + (t3.i << 3));          // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:320
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_putById__loadConstantOrVariableCell__48_loadConstantOrVariable__done)
+    if ((t0.i64 & tagMask.i64) != 0)                         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:331
+        goto _offlineasm_opPutByIdSlow;
+    t2.i = *CAST<int32_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x18)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:94
+    t3.i = *CAST<intptr_t*>(t0.i8p + 8);                     // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:592
+    if (*CAST<intptr_t*>(t0.i8p) != t1.i)                    // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1205
+        goto _offlineasm_opPutByIdSlow;
+    t1.i = *CAST<int32_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x28)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:94
+    if (t2.i >= intptr_t(0x40000000))                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:313
+        goto _offlineasm_putById__getPropertyStorage__continuation__49_loadConstantOrVariable__constant;
+    t0.i64 = *CAST<int64_t*>(cfr.i8p + (t2.i << 3));         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:314
+    goto _offlineasm_putById__getPropertyStorage__continuation__49_loadConstantOrVariable__done; // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:315
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_putById__getPropertyStorage__continuation__49_loadConstantOrVariable__constant)
+    t0.i = *CAST<intptr_t*>(cfr.i8p + 16);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:317
+    t0.i = *CAST<intptr_t*>(t0.i8p + 368);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:318
+    t2.i = t2.i - intptr_t(0x40000000);                      // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:319
+    t0.i64 = *CAST<int64_t*>(t0.i8p + (t2.i << 3));          // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:320
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_putById__getPropertyStorage__continuation__49_loadConstantOrVariable__done)
+    *CAST<int64_t*>(t3.i8p + (t1.i << 0)) = t0.i64;          // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1208
+    rPC.i = rPC.i + intptr_t(0x9);                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:31
+    opcode = *CAST<Opcode*>(rBasePC.i8p + (rPC.i << 3));     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:27
+    DISPATCH_OPCODE();
+
+OFFLINE_ASM_OPCODE_LABEL(op_put_by_id_transition_direct)
+    t3.i = *CAST<int32_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x8)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:94
+    t1.i = *CAST<intptr_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x20)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:98
+    if (t3.i >= intptr_t(0x40000000))                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:313
+        goto _offlineasm_putByIdTransition__loadConstantOrVariableCell__50_loadConstantOrVariable__constant;
+    t0.i64 = *CAST<int64_t*>(cfr.i8p + (t3.i << 3));         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:314
+    goto _offlineasm_putByIdTransition__loadConstantOrVariableCell__50_loadConstantOrVariable__done; // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:315
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_putByIdTransition__loadConstantOrVariableCell__50_loadConstantOrVariable__constant)
+    t0.i = *CAST<intptr_t*>(cfr.i8p + 16);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:317
+    t0.i = *CAST<intptr_t*>(t0.i8p + 368);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:318
+    t3.i = t3.i - intptr_t(0x40000000);                      // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:319
+    t0.i64 = *CAST<int64_t*>(t0.i8p + (t3.i << 3));          // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:320
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_putByIdTransition__loadConstantOrVariableCell__50_loadConstantOrVariable__done)
+    if ((t0.i64 & tagMask.i64) != 0)                         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:331
+        goto _offlineasm_opPutByIdSlow;
+    t2.i = *CAST<int32_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x18)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:94
+    if (*CAST<intptr_t*>(t0.i8p) != t1.i)                    // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1232
+        goto _offlineasm_opPutByIdSlow;
+    t1.i = *CAST<int32_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x28)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:94
+    t3.i = t1.i + t0.i;                                      // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1239
+    if (t2.i >= intptr_t(0x40000000))                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:313
+        goto _offlineasm_putByIdTransition__getPropertyStorage__continuation__51_loadConstantOrVariable__constant;
+    t1.i64 = *CAST<int64_t*>(cfr.i8p + (t2.i << 3));         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:314
+    goto _offlineasm_putByIdTransition__getPropertyStorage__continuation__51_loadConstantOrVariable__done; // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:315
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_putByIdTransition__getPropertyStorage__continuation__51_loadConstantOrVariable__constant)
+    t1.i = *CAST<intptr_t*>(cfr.i8p + 16);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:317
+    t1.i = *CAST<intptr_t*>(t1.i8p + 368);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:318
+    t2.i = t2.i - intptr_t(0x40000000);                      // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:319
+    t1.i64 = *CAST<int64_t*>(t1.i8p + (t2.i << 3));          // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:320
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_putByIdTransition__getPropertyStorage__continuation__51_loadConstantOrVariable__done)
+    *CAST<int64_t*>(t3.i8p) = t1.i64;                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1241
+    t1.i = *CAST<intptr_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x30)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:98
+    *CAST<intptr_t*>(t0.i8p) = t1.i;                         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1243
+    rPC.i = rPC.i + intptr_t(0x9);                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:31
+    opcode = *CAST<Opcode*>(rBasePC.i8p + (rPC.i << 3));     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:27
+    DISPATCH_OPCODE();
+
+OFFLINE_ASM_OPCODE_LABEL(op_put_by_id_transition_direct_out_of_line)
+    t3.i = *CAST<int32_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x8)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:94
+    t1.i = *CAST<intptr_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x20)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:98
+    if (t3.i >= intptr_t(0x40000000))                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:313
+        goto _offlineasm_putByIdTransition__loadConstantOrVariableCell__52_loadConstantOrVariable__constant;
+    t0.i64 = *CAST<int64_t*>(cfr.i8p + (t3.i << 3));         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:314
+    goto _offlineasm_putByIdTransition__loadConstantOrVariableCell__52_loadConstantOrVariable__done; // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:315
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_putByIdTransition__loadConstantOrVariableCell__52_loadConstantOrVariable__constant)
+    t0.i = *CAST<intptr_t*>(cfr.i8p + 16);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:317
+    t0.i = *CAST<intptr_t*>(t0.i8p + 368);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:318
+    t3.i = t3.i - intptr_t(0x40000000);                      // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:319
+    t0.i64 = *CAST<int64_t*>(t0.i8p + (t3.i << 3));          // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:320
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_putByIdTransition__loadConstantOrVariableCell__52_loadConstantOrVariable__done)
+    if ((t0.i64 & tagMask.i64) != 0)                         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:331
+        goto _offlineasm_opPutByIdSlow;
+    t2.i = *CAST<int32_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x18)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:94
+    if (*CAST<intptr_t*>(t0.i8p) != t1.i)                    // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1232
+        goto _offlineasm_opPutByIdSlow;
+    t1.i = *CAST<int32_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x28)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:94
+    t3.i = *CAST<intptr_t*>(t0.i8p + 8);                     // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:592
+    t3.i = t1.i + t3.i;                                      // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1239
+    if (t2.i >= intptr_t(0x40000000))                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:313
+        goto _offlineasm_putByIdTransition__getPropertyStorage__continuation__53_loadConstantOrVariable__constant;
+    t1.i64 = *CAST<int64_t*>(cfr.i8p + (t2.i << 3));         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:314
+    goto _offlineasm_putByIdTransition__getPropertyStorage__continuation__53_loadConstantOrVariable__done; // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:315
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_putByIdTransition__getPropertyStorage__continuation__53_loadConstantOrVariable__constant)
+    t1.i = *CAST<intptr_t*>(cfr.i8p + 16);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:317
+    t1.i = *CAST<intptr_t*>(t1.i8p + 368);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:318
+    t2.i = t2.i - intptr_t(0x40000000);                      // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:319
+    t1.i64 = *CAST<int64_t*>(t1.i8p + (t2.i << 3));          // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:320
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_putByIdTransition__getPropertyStorage__continuation__53_loadConstantOrVariable__done)
+    *CAST<int64_t*>(t3.i8p) = t1.i64;                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1241
+    t1.i = *CAST<intptr_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x30)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:98
+    *CAST<intptr_t*>(t0.i8p) = t1.i;                         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1243
+    rPC.i = rPC.i + intptr_t(0x9);                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:31
+    opcode = *CAST<Opcode*>(rBasePC.i8p + (rPC.i << 3));     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:27
+    DISPATCH_OPCODE();
+
+OFFLINE_ASM_OPCODE_LABEL(op_put_by_id_transition_normal)
+    t3.i = *CAST<int32_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x8)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:94
+    t1.i = *CAST<intptr_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x20)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:98
+    if (t3.i >= intptr_t(0x40000000))                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:313
+        goto _offlineasm_putByIdTransition__loadConstantOrVariableCell__54_loadConstantOrVariable__constant;
+    t0.i64 = *CAST<int64_t*>(cfr.i8p + (t3.i << 3));         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:314
+    goto _offlineasm_putByIdTransition__loadConstantOrVariableCell__54_loadConstantOrVariable__done; // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:315
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_putByIdTransition__loadConstantOrVariableCell__54_loadConstantOrVariable__constant)
+    t0.i = *CAST<intptr_t*>(cfr.i8p + 16);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:317
+    t0.i = *CAST<intptr_t*>(t0.i8p + 368);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:318
+    t3.i = t3.i - intptr_t(0x40000000);                      // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:319
+    t0.i64 = *CAST<int64_t*>(t0.i8p + (t3.i << 3));          // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:320
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_putByIdTransition__loadConstantOrVariableCell__54_loadConstantOrVariable__done)
+    if ((t0.i64 & tagMask.i64) != 0)                         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:331
+        goto _offlineasm_opPutByIdSlow;
+    t2.i = *CAST<int32_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x18)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:94
+    if (*CAST<intptr_t*>(t0.i8p) != t1.i)                    // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1232
+        goto _offlineasm_opPutByIdSlow;
+    t3.i = *CAST<intptr_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x38)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:98
+    t3.i = *CAST<intptr_t*>(t3.i8p + 8);                     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1255
+    if (*CAST<int64_t*>(t1.i8p + 16) == int64_t(0x2))        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1257
+        goto _offlineasm_putByIdTransition__additionalChecks__done;
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_putByIdTransition__additionalChecks__loop)
+    t1.i64 = *CAST<int64_t*>(t1.i8p + 16);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1259
+    t1.i = *CAST<intptr_t*>(t1.i8p);                         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1260
+    if (t1.i != *CAST<intptr_t*>(t3.i8p))                    // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1261
+        goto _offlineasm_opPutByIdSlow;
+    t3.i = t3.i + intptr_t(0x8);                             // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1262
+    if (*CAST<int64_t*>(t1.i8p + 16) != int64_t(0x2))        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1263
+        goto _offlineasm_putByIdTransition__additionalChecks__loop;
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_putByIdTransition__additionalChecks__done)
+    t1.i = *CAST<int32_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x28)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:94
+    t3.i = t1.i + t0.i;                                      // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1239
+    if (t2.i >= intptr_t(0x40000000))                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:313
+        goto _offlineasm_putByIdTransition__getPropertyStorage__continuation__55_loadConstantOrVariable__constant;
+    t1.i64 = *CAST<int64_t*>(cfr.i8p + (t2.i << 3));         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:314
+    goto _offlineasm_putByIdTransition__getPropertyStorage__continuation__55_loadConstantOrVariable__done; // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:315
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_putByIdTransition__getPropertyStorage__continuation__55_loadConstantOrVariable__constant)
+    t1.i = *CAST<intptr_t*>(cfr.i8p + 16);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:317
+    t1.i = *CAST<intptr_t*>(t1.i8p + 368);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:318
+    t2.i = t2.i - intptr_t(0x40000000);                      // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:319
+    t1.i64 = *CAST<int64_t*>(t1.i8p + (t2.i << 3));          // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:320
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_putByIdTransition__getPropertyStorage__continuation__55_loadConstantOrVariable__done)
+    *CAST<int64_t*>(t3.i8p) = t1.i64;                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1241
+    t1.i = *CAST<intptr_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x30)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:98
+    *CAST<intptr_t*>(t0.i8p) = t1.i;                         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1243
+    rPC.i = rPC.i + intptr_t(0x9);                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:31
+    opcode = *CAST<Opcode*>(rBasePC.i8p + (rPC.i << 3));     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:27
+    DISPATCH_OPCODE();
+
+OFFLINE_ASM_OPCODE_LABEL(op_put_by_id_transition_normal_out_of_line)
+    t3.i = *CAST<int32_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x8)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:94
+    t1.i = *CAST<intptr_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x20)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:98
+    if (t3.i >= intptr_t(0x40000000))                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:313
+        goto _offlineasm_putByIdTransition__loadConstantOrVariableCell__56_loadConstantOrVariable__constant;
+    t0.i64 = *CAST<int64_t*>(cfr.i8p + (t3.i << 3));         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:314
+    goto _offlineasm_putByIdTransition__loadConstantOrVariableCell__56_loadConstantOrVariable__done; // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:315
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_putByIdTransition__loadConstantOrVariableCell__56_loadConstantOrVariable__constant)
+    t0.i = *CAST<intptr_t*>(cfr.i8p + 16);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:317
+    t0.i = *CAST<intptr_t*>(t0.i8p + 368);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:318
+    t3.i = t3.i - intptr_t(0x40000000);                      // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:319
+    t0.i64 = *CAST<int64_t*>(t0.i8p + (t3.i << 3));          // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:320
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_putByIdTransition__loadConstantOrVariableCell__56_loadConstantOrVariable__done)
+    if ((t0.i64 & tagMask.i64) != 0)                         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:331
+        goto _offlineasm_opPutByIdSlow;
+    t2.i = *CAST<int32_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x18)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:94
+    if (*CAST<intptr_t*>(t0.i8p) != t1.i)                    // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1232
+        goto _offlineasm_opPutByIdSlow;
+    t3.i = *CAST<intptr_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x38)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:98
+    t3.i = *CAST<intptr_t*>(t3.i8p + 8);                     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1255
+    if (*CAST<int64_t*>(t1.i8p + 16) == int64_t(0x2))        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1257
+        goto _offlineasm_putByIdTransition__56_additionalChecks__done;
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_putByIdTransition__56_additionalChecks__loop)
+    t1.i64 = *CAST<int64_t*>(t1.i8p + 16);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1259
+    t1.i = *CAST<intptr_t*>(t1.i8p);                         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1260
+    if (t1.i != *CAST<intptr_t*>(t3.i8p))                    // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1261
+        goto _offlineasm_opPutByIdSlow;
+    t3.i = t3.i + intptr_t(0x8);                             // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1262
+    if (*CAST<int64_t*>(t1.i8p + 16) != int64_t(0x2))        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1263
+        goto _offlineasm_putByIdTransition__56_additionalChecks__loop;
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_putByIdTransition__56_additionalChecks__done)
+    t1.i = *CAST<int32_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x28)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:94
+    t3.i = *CAST<intptr_t*>(t0.i8p + 8);                     // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:592
+    t3.i = t1.i + t3.i;                                      // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1239
+    if (t2.i >= intptr_t(0x40000000))                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:313
+        goto _offlineasm_putByIdTransition__getPropertyStorage__continuation__57_loadConstantOrVariable__constant;
+    t1.i64 = *CAST<int64_t*>(cfr.i8p + (t2.i << 3));         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:314
+    goto _offlineasm_putByIdTransition__getPropertyStorage__continuation__57_loadConstantOrVariable__done; // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:315
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_putByIdTransition__getPropertyStorage__continuation__57_loadConstantOrVariable__constant)
+    t1.i = *CAST<intptr_t*>(cfr.i8p + 16);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:317
+    t1.i = *CAST<intptr_t*>(t1.i8p + 368);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:318
+    t2.i = t2.i - intptr_t(0x40000000);                      // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:319
+    t1.i64 = *CAST<int64_t*>(t1.i8p + (t2.i << 3));          // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:320
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_putByIdTransition__getPropertyStorage__continuation__57_loadConstantOrVariable__done)
+    *CAST<int64_t*>(t3.i8p) = t1.i64;                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1241
+    t1.i = *CAST<intptr_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x30)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:98
+    *CAST<intptr_t*>(t0.i8p) = t1.i;                         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1243
+    rPC.i = rPC.i + intptr_t(0x9);                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:31
+    opcode = *CAST<Opcode*>(rBasePC.i8p + (rPC.i << 3));     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:27
+    DISPATCH_OPCODE();
+
+OFFLINE_ASM_OPCODE_LABEL(op_get_by_val)
+    t2.i = *CAST<int32_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x10)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:94
+    if (t2.i >= intptr_t(0x40000000))                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:313
+        goto _offlineasm_loadConstantOrVariableCell__58_loadConstantOrVariable__constant;
+    t0.i64 = *CAST<int64_t*>(cfr.i8p + (t2.i << 3));         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:314
+    goto _offlineasm_loadConstantOrVariableCell__58_loadConstantOrVariable__done; // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:315
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_loadConstantOrVariableCell__58_loadConstantOrVariable__constant)
+    t0.i = *CAST<intptr_t*>(cfr.i8p + 16);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:317
+    t0.i = *CAST<intptr_t*>(t0.i8p + 368);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:318
+    t2.i = t2.i - intptr_t(0x40000000);                      // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:319
+    t0.i64 = *CAST<int64_t*>(t0.i8p + (t2.i << 3));          // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:320
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_loadConstantOrVariableCell__58_loadConstantOrVariable__done)
+    if ((t0.i64 & tagMask.i64) != 0)                         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:331
+        goto _offlineasm_opGetByValSlow;
+    t2.i = *CAST<intptr_t*>(t0.i8p);                         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1287
+    t3.i = *CAST<intptr_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x20)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:98
+    *CAST<intptr_t*>(t3.i8p + 8) = t2.i;                     // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:266
+    t2.i = *CAST<uint8_t*>(t2.i8p + 95);                     // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:267
+    t3.i = *CAST<int32_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x18)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:94
+    if (t3.i >= intptr_t(0x40000000))                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:313
+        goto _offlineasm_loadConstantOrVariableInt32__59_loadConstantOrVariable__constant;
+    t1.i64 = *CAST<int64_t*>(cfr.i8p + (t3.i << 3));         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:314
+    goto _offlineasm_loadConstantOrVariableInt32__59_loadConstantOrVariable__done; // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:315
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_loadConstantOrVariableInt32__59_loadConstantOrVariable__constant)
+    t1.i = *CAST<intptr_t*>(cfr.i8p + 16);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:317
+    t1.i = *CAST<intptr_t*>(t1.i8p + 368);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:318
+    t3.i = t3.i - intptr_t(0x40000000);                      // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:319
+    t1.i64 = *CAST<int64_t*>(t1.i8p + (t3.i << 3));          // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:320
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_loadConstantOrVariableInt32__59_loadConstantOrVariable__done)
+    if (t1.u64 < tagTypeNumber.u64)                          // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:326
+        goto _offlineasm_opGetByValSlow;
+    t1.i64 = t1.i32;                                         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1292
+    t3.i = *CAST<intptr_t*>(t0.i8p + 8);                     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1293
+    t2.i32 = t2.i32 & int32_t(0x1e);                         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1294
+    t2.clearHighWord();
+    if (t2.i32 == int32_t(0x14))                             // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1295
+        goto _offlineasm_opGetByValIsContiguous;
+    if (t2.i32 != int32_t(0x1a))                             // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1296
+        goto _offlineasm_opGetByValNotContiguous;
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_opGetByValIsContiguous)
+    if (t1.u32 >= *CAST<uint32_t*>(t3.i8p - 8))              // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1299
+        goto _offlineasm_opGetByValOutOfBounds;
+    t0.i = *CAST<int32_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x8)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:94
+    t2.i64 = *CAST<int64_t*>(t3.i8p + (t1.i << 3));          // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1301
+    if (t2.i64 == 0)                                         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1302
+        goto _offlineasm_opGetByValOutOfBounds;
+    goto _offlineasm_opGetByValDone;                         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1303
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_opGetByValNotContiguous)
+    if (t2.i32 != int32_t(0x16))                             // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1306
+        goto _offlineasm_opGetByValNotDouble;
+    if (t1.u32 >= *CAST<uint32_t*>(t3.i8p - 8))              // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1307
+        goto _offlineasm_opGetByValOutOfBounds;
+    t0.i = *CAST<int32_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x8)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1308
+    d0.d = *CAST<double*>(t3.i8p + (t1.i << 3));             // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1309
+    if (std::isnan(d0.d) || std::isnan(d0.d)                 // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1310
+        || (d0.d != d0.d))
+        goto _offlineasm_opGetByValOutOfBounds;
+    t2.i64 = d0.castToInt64;                                 // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1311
+    t2.i64 = t2.i64 - tagTypeNumber.i64;                     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1312
+    goto _offlineasm_opGetByValDone;                         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1313
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_opGetByValNotDouble)
+    t2.i32 = t2.i32 - int32_t(0x1c);                         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1316
+    t2.clearHighWord();
+    if (t2.u32 > uint32_t(0x2))                              // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1317
+        goto _offlineasm_opGetByValSlow;
+    if (t1.u32 >= *CAST<uint32_t*>(t3.i8p - 4))              // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1318
+        goto _offlineasm_opGetByValOutOfBounds;
+    t0.i = *CAST<int32_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x8)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:94
+    t2.i64 = *CAST<int64_t*>(t3.i8p + (t1.i << 3) + intptr_t(0x10)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1320
+    if (t2.i64 == 0)                                         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1321
+        goto _offlineasm_opGetByValOutOfBounds;
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_opGetByValDone)
+    *CAST<int64_t*>(cfr.i8p + (t0.i << 3)) = t2.i64;         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1324
+    t0.i = *CAST<intptr_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x28)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:98
+    *CAST<int64_t*>(t0.i8p + 16) = t2.i64;                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:383
+    rPC.i = rPC.i + intptr_t(0x6);                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:31
+    opcode = *CAST<Opcode*>(rBasePC.i8p + (rPC.i << 3));     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:27
+    DISPATCH_OPCODE();
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_opGetByValOutOfBounds)
+    t0.i = *CAST<intptr_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x20)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:98
+    *CAST<uint8_t*>(t0.i8p + 17) = int8_t(0x1);              // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1330
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_opGetByValSlow)
+    rPC.i8p = rBasePC.i8p + (rPC.i << 3);                    // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:241
+    t3.i = rBasePC.i;                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:242
+    {                                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:64
+        ExecState* exec = CAST<ExecState*>(cfr.vp);
+        Instruction* pc = CAST<Instruction*>(rPC.vp);
+        SlowPathReturnType result = llint_slow_path_get_by_val(exec, pc);
+        decodeResult(result, t0.instruction, t1.vp);
+    }
+    rPC.i = t0.i;                                            // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:246
+    cfr.i = t1.i;                                            // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:247
+    rBasePC.i = t3.i;                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:248
+    rPC.i = rPC.i - rBasePC.i;                               // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:249
+    rPC.i = rPC.i >> (intptr_t(0x3) & 0x1f);                 // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:250
+    rPC.i = rPC.i + intptr_t(0x6);                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:31
+    opcode = *CAST<Opcode*>(rBasePC.i8p + (rPC.i << 3));     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:27
+    DISPATCH_OPCODE();
+
+OFFLINE_ASM_OPCODE_LABEL(op_get_argument_by_val)
+    t0.i = *CAST<int32_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x10)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:94
+    t1.i = *CAST<int32_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x18)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:94
+    if (*CAST<int64_t*>(cfr.i8p + (t0.i << 3)) != 0)         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1342
+        goto _offlineasm_opGetArgumentByValSlow;
+    if (t1.i >= intptr_t(0x40000000))                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:313
+        goto _offlineasm_loadConstantOrVariableInt32__60_loadConstantOrVariable__constant;
+    t2.i64 = *CAST<int64_t*>(cfr.i8p + (t1.i << 3));         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:314
+    goto _offlineasm_loadConstantOrVariableInt32__60_loadConstantOrVariable__done; // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:315
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_loadConstantOrVariableInt32__60_loadConstantOrVariable__constant)
+    t2.i = *CAST<intptr_t*>(cfr.i8p + 16);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:317
+    t2.i = *CAST<intptr_t*>(t2.i8p + 368);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:318
+    t1.i = t1.i - intptr_t(0x40000000);                      // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:319
+    t2.i64 = *CAST<int64_t*>(t2.i8p + (t1.i << 3));          // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:320
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_loadConstantOrVariableInt32__60_loadConstantOrVariable__done)
+    if (t2.u64 < tagTypeNumber.u64)                          // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:326
+        goto _offlineasm_opGetArgumentByValSlow;
+    t2.i32 = t2.i32 + int32_t(0x1);                          // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1344
+    t2.clearHighWord();
+    t1.u = *CAST<uint32_t*>(cfr.i8p + 40);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1345
+    if (t2.u32 >= t1.u32)                                    // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1346
+        goto _offlineasm_opGetArgumentByValSlow;
+    t3.i = *CAST<int32_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x8)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:94
+    t1.i = *CAST<intptr_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x28)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:98
+    t0.i64 = *CAST<int64_t*>(cfr.i8p + (t2.i << 3) + intptr_t(0x30)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1349
+    *CAST<int64_t*>(cfr.i8p + (t3.i << 3)) = t0.i64;         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1350
+    t1.i = *CAST<intptr_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x28)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:98
+    *CAST<int64_t*>(t1.i8p + 16) = t0.i64;                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:383
+    rPC.i = rPC.i + intptr_t(0x6);                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:31
+    opcode = *CAST<Opcode*>(rBasePC.i8p + (rPC.i << 3));     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:27
+    DISPATCH_OPCODE();
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_opGetArgumentByValSlow)
+    rPC.i8p = rBasePC.i8p + (rPC.i << 3);                    // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:241
+    t3.i = rBasePC.i;                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:242
+    {                                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:64
+        ExecState* exec = CAST<ExecState*>(cfr.vp);
+        Instruction* pc = CAST<Instruction*>(rPC.vp);
+        SlowPathReturnType result = llint_slow_path_get_argument_by_val(exec, pc);
+        decodeResult(result, t0.instruction, t1.vp);
+    }
+    rPC.i = t0.i;                                            // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:246
+    cfr.i = t1.i;                                            // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:247
+    rBasePC.i = t3.i;                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:248
+    rPC.i = rPC.i - rBasePC.i;                               // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:249
+    rPC.i = rPC.i >> (intptr_t(0x3) & 0x1f);                 // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:250
+    rPC.i = rPC.i + intptr_t(0x6);                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:31
+    opcode = *CAST<Opcode*>(rBasePC.i8p + (rPC.i << 3));     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:27
+    DISPATCH_OPCODE();
+
+OFFLINE_ASM_OPCODE_LABEL(op_get_by_pname)
+    t1.i = *CAST<int32_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x18)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:94
+    if (t1.i >= intptr_t(0x40000000))                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:313
+        goto _offlineasm_61_loadConstantOrVariable__constant;
+    t0.i64 = *CAST<int64_t*>(cfr.i8p + (t1.i << 3));         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:314
+    goto _offlineasm_61_loadConstantOrVariable__done;        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:315
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_61_loadConstantOrVariable__constant)
+    t0.i = *CAST<intptr_t*>(cfr.i8p + 16);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:317
+    t0.i = *CAST<intptr_t*>(t0.i8p + 368);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:318
+    t1.i = t1.i - intptr_t(0x40000000);                      // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:319
+    t0.i64 = *CAST<int64_t*>(t0.i8p + (t1.i << 3));          // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:320
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_61_loadConstantOrVariable__done)
+    t1.i = *CAST<int32_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x20)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:94
+    if (t0.i64 != *CAST<int64_t*>(cfr.i8p + (t1.i << 3)))    // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1365
+        goto _offlineasm_opGetByPnameSlow;
+    t2.i = *CAST<int32_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x10)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:94
+    t3.i = *CAST<int32_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x28)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:94
+    if (t2.i >= intptr_t(0x40000000))                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:313
+        goto _offlineasm_loadConstantOrVariableCell__62_loadConstantOrVariable__constant;
+    t0.i64 = *CAST<int64_t*>(cfr.i8p + (t2.i << 3));         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:314
+    goto _offlineasm_loadConstantOrVariableCell__62_loadConstantOrVariable__done; // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:315
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_loadConstantOrVariableCell__62_loadConstantOrVariable__constant)
+    t0.i = *CAST<intptr_t*>(cfr.i8p + 16);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:317
+    t0.i = *CAST<intptr_t*>(t0.i8p + 368);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:318
+    t2.i = t2.i - intptr_t(0x40000000);                      // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:319
+    t0.i64 = *CAST<int64_t*>(t0.i8p + (t2.i << 3));          // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:320
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_loadConstantOrVariableCell__62_loadConstantOrVariable__done)
+    if ((t0.i64 & tagMask.i64) != 0)                         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:331
+        goto _offlineasm_opGetByPnameSlow;
+    t1.i64 = *CAST<int64_t*>(cfr.i8p + (t3.i << 3));         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1370
+    t2.i = *CAST<intptr_t*>(t0.i8p);                         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1371
+    if (t2.i != *CAST<intptr_t*>(t1.i8p + 8))                // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1372
+        goto _offlineasm_opGetByPnameSlow;
+    t3.i = *CAST<int32_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x30)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:94
+    t3.u = *CAST<uint32_t*>(cfr.i8p + (t3.i << 3));          // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1374
+    t3.i32 = t3.i32 - int32_t(0x1);                          // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1375
+    t3.clearHighWord();
+    if (t3.u32 >= *CAST<uint32_t*>(t1.i8p + 24))             // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1376
+        goto _offlineasm_opGetByPnameSlow;
+    if (t3.i32 < *CAST<int32_t*>(t1.i8p + 32))               // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1377
+        goto _offlineasm_opGetByPnameInlineProperty;
+    t3.i32 = t3.i32 + int32_t(0x64);                         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1378
+    t3.clearHighWord();
+    t3.i32 = t3.i32 - *CAST<int32_t*>(t1.i8p + 32);          // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1379
+    t3.clearHighWord();
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_opGetByPnameInlineProperty)
+    if (t3.i32 < int32_t(0x64))                              // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1085
+        goto _offlineasm_loadPropertyAtVariableOffset__isInline;
+    t0.i = *CAST<intptr_t*>(t0.i8p + 8);                     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1086
+    t3.i32 = -t3.i32;                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1087
+    t3.clearHighWord();
+    t3.i64 = t3.i32;                                         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1088
+    goto _offlineasm_loadPropertyAtVariableOffset__ready;    // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1089
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_loadPropertyAtVariableOffset__isInline)
+    t0.i = t0.i + intptr_t(-768);                            // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1091
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_loadPropertyAtVariableOffset__ready)
+    t0.i64 = *CAST<int64_t*>(t0.i8p + (t3.i << 3) + intptr_t(0x310)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1093
+    t1.i = *CAST<int32_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x8)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:94
+    *CAST<int64_t*>(cfr.i8p + (t1.i << 3)) = t0.i64;         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1383
+    rPC.i = rPC.i + intptr_t(0x7);                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:31
+    opcode = *CAST<Opcode*>(rBasePC.i8p + (rPC.i << 3));     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:27
+    DISPATCH_OPCODE();
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_opGetByPnameSlow)
+    rPC.i8p = rBasePC.i8p + (rPC.i << 3);                    // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:241
+    t3.i = rBasePC.i;                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:242
+    {                                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:64
+        ExecState* exec = CAST<ExecState*>(cfr.vp);
+        Instruction* pc = CAST<Instruction*>(rPC.vp);
+        SlowPathReturnType result = llint_slow_path_get_by_pname(exec, pc);
+        decodeResult(result, t0.instruction, t1.vp);
+    }
+    rPC.i = t0.i;                                            // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:246
+    cfr.i = t1.i;                                            // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:247
+    rBasePC.i = t3.i;                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:248
+    rPC.i = rPC.i - rBasePC.i;                               // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:249
+    rPC.i = rPC.i >> (intptr_t(0x3) & 0x1f);                 // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:250
+    rPC.i = rPC.i + intptr_t(0x7);                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:31
+    opcode = *CAST<Opcode*>(rBasePC.i8p + (rPC.i << 3));     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:27
+    DISPATCH_OPCODE();
+
+OFFLINE_ASM_OPCODE_LABEL(op_put_by_val)
+    t0.i = *CAST<int32_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x8)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:94
+    if (t0.i >= intptr_t(0x40000000))                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:313
+        goto _offlineasm_putByVal__loadConstantOrVariableCell__63_loadConstantOrVariable__constant;
+    t1.i64 = *CAST<int64_t*>(cfr.i8p + (t0.i << 3));         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:314
+    goto _offlineasm_putByVal__loadConstantOrVariableCell__63_loadConstantOrVariable__done; // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:315
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_putByVal__loadConstantOrVariableCell__63_loadConstantOrVariable__constant)
+    t1.i = *CAST<intptr_t*>(cfr.i8p + 16);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:317
+    t1.i = *CAST<intptr_t*>(t1.i8p + 368);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:318
+    t0.i = t0.i - intptr_t(0x40000000);                      // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:319
+    t1.i64 = *CAST<int64_t*>(t1.i8p + (t0.i << 3));          // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:320
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_putByVal__loadConstantOrVariableCell__63_loadConstantOrVariable__done)
+    if ((t1.i64 & tagMask.i64) != 0)                         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:331
+        goto _offlineasm_putByVal__opPutByValSlow;
+    t2.i = *CAST<intptr_t*>(t1.i8p);                         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1412
+    t3.i = *CAST<intptr_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x20)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:98
+    *CAST<intptr_t*>(t3.i8p + 8) = t2.i;                     // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:266
+    t2.i = *CAST<uint8_t*>(t2.i8p + 95);                     // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:267
+    t0.i = *CAST<int32_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x10)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:94
+    if (t0.i >= intptr_t(0x40000000))                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:313
+        goto _offlineasm_putByVal__loadConstantOrVariableInt32__64_loadConstantOrVariable__constant;
+    t3.i64 = *CAST<int64_t*>(cfr.i8p + (t0.i << 3));         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:314
+    goto _offlineasm_putByVal__loadConstantOrVariableInt32__64_loadConstantOrVariable__done; // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:315
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_putByVal__loadConstantOrVariableInt32__64_loadConstantOrVariable__constant)
+    t3.i = *CAST<intptr_t*>(cfr.i8p + 16);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:317
+    t3.i = *CAST<intptr_t*>(t3.i8p + 368);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:318
+    t0.i = t0.i - intptr_t(0x40000000);                      // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:319
+    t3.i64 = *CAST<int64_t*>(t3.i8p + (t0.i << 3));          // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:320
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_putByVal__loadConstantOrVariableInt32__64_loadConstantOrVariable__done)
+    if (t3.u64 < tagTypeNumber.u64)                          // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:326
+        goto _offlineasm_putByVal__opPutByValSlow;
+    t3.i64 = t3.i32;                                         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1417
+    t0.i = *CAST<intptr_t*>(t1.i8p + 8);                     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1418
+    t2.i32 = t2.i32 & int32_t(0x1e);                         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1419
+    t2.clearHighWord();
+    if (t2.i32 != int32_t(0x14))                             // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1420
+        goto _offlineasm_putByVal__opPutByValNotInt32;
+    if (t3.u32 >= *CAST<uint32_t*>(t0.i8p - 8))              // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1392
+        goto _offlineasm_putByVal__contiguousPutByVal__outOfBounds;
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_putByVal__contiguousPutByVal__storeResult)
+    t2.i = *CAST<int32_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x18)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:94
+    if (t2.i >= intptr_t(0x40000000))                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:313
+        goto _offlineasm_putByVal__contiguousPutByVal__storeCallback__65_loadConstantOrVariable__constant;
+    t1.i64 = *CAST<int64_t*>(cfr.i8p + (t2.i << 3));         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:314
+    goto _offlineasm_putByVal__contiguousPutByVal__storeCallback__65_loadConstantOrVariable__done; // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:315
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_putByVal__contiguousPutByVal__storeCallback__65_loadConstantOrVariable__constant)
+    t1.i = *CAST<intptr_t*>(cfr.i8p + 16);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:317
+    t1.i = *CAST<intptr_t*>(t1.i8p + 368);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:318
+    t2.i = t2.i - intptr_t(0x40000000);                      // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:319
+    t1.i64 = *CAST<int64_t*>(t1.i8p + (t2.i << 3));          // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:320
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_putByVal__contiguousPutByVal__storeCallback__65_loadConstantOrVariable__done)
+    if (t1.u < tagTypeNumber.u)                              // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1424
+        goto _offlineasm_putByVal__opPutByValSlow;
+    *CAST<intptr_t*>(t0.i8p + (t3.i << 3)) = t1.i;           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1425
+    rPC.i = rPC.i + intptr_t(0x5);                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:31
+    opcode = *CAST<Opcode*>(rBasePC.i8p + (rPC.i << 3));     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:27
+    DISPATCH_OPCODE();
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_putByVal__contiguousPutByVal__outOfBounds)
+    if (t3.u32 >= *CAST<uint32_t*>(t0.i8p - 4))              // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1399
+        goto _offlineasm_putByVal__opPutByValOutOfBounds;
+    t2.i = *CAST<intptr_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x20)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1400
+    *CAST<uint8_t*>(t2.i8p + 16) = int8_t(0x1);              // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1401
+    t2.i32 = int32_t(0x1) + t3.i32;                          // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1402
+    t2.clearHighWord();
+    *CAST<int32_t*>(t0.i8p - 8) = t2.i32;                    // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1403
+    goto _offlineasm_putByVal__contiguousPutByVal__storeResult; // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1404
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_putByVal__opPutByValNotInt32)
+    if (t2.i32 != int32_t(0x16))                             // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1429
+        goto _offlineasm_putByVal__opPutByValNotDouble;
+    if (t3.u32 >= *CAST<uint32_t*>(t0.i8p - 8))              // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1392
+        goto _offlineasm_putByVal__66_contiguousPutByVal__outOfBounds;
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_putByVal__66_contiguousPutByVal__storeResult)
+    t2.i = *CAST<int32_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x18)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:94
+    if (t2.i >= intptr_t(0x40000000))                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:313
+        goto _offlineasm_putByVal__contiguousPutByVal__storeCallback__66_loadConstantOrVariable__constant;
+    t1.i64 = *CAST<int64_t*>(cfr.i8p + (t2.i << 3));         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:314
+    goto _offlineasm_putByVal__contiguousPutByVal__storeCallback__66_loadConstantOrVariable__done; // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:315
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_putByVal__contiguousPutByVal__storeCallback__66_loadConstantOrVariable__constant)
+    t1.i = *CAST<intptr_t*>(cfr.i8p + 16);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:317
+    t1.i = *CAST<intptr_t*>(t1.i8p + 368);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:318
+    t2.i = t2.i - intptr_t(0x40000000);                      // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:319
+    t1.i64 = *CAST<int64_t*>(t1.i8p + (t2.i << 3));          // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:320
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_putByVal__contiguousPutByVal__storeCallback__66_loadConstantOrVariable__done)
+    if (t1.u64 < tagTypeNumber.u64)                          // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1433
+        goto _offlineasm_putByVal__contiguousPutByVal__storeCallback__notInt;
+    d0.d = t1.i32;                                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1434
+    goto _offlineasm_putByVal__contiguousPutByVal__storeCallback__ready; // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1435
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_putByVal__contiguousPutByVal__storeCallback__notInt)
+    t1.i = t1.i + tagTypeNumber.i;                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1437
+    d0.d = t1.castToDouble;                                  // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1438
+    if (std::isnan(d0.d) || std::isnan(d0.d)                 // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1439
+        || (d0.d != d0.d))
+        goto _offlineasm_putByVal__opPutByValSlow;
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_putByVal__contiguousPutByVal__storeCallback__ready)
+    *CAST<double*>(t0.i8p + (t3.i << 3)) = d0.d;             // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1441
+    rPC.i = rPC.i + intptr_t(0x5);                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:31
+    opcode = *CAST<Opcode*>(rBasePC.i8p + (rPC.i << 3));     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:27
+    DISPATCH_OPCODE();
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_putByVal__66_contiguousPutByVal__outOfBounds)
+    if (t3.u32 >= *CAST<uint32_t*>(t0.i8p - 4))              // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1399
+        goto _offlineasm_putByVal__opPutByValOutOfBounds;
+    t2.i = *CAST<intptr_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x20)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1400
+    *CAST<uint8_t*>(t2.i8p + 16) = int8_t(0x1);              // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1401
+    t2.i32 = int32_t(0x1) + t3.i32;                          // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1402
+    t2.clearHighWord();
+    *CAST<int32_t*>(t0.i8p - 8) = t2.i32;                    // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1403
+    goto _offlineasm_putByVal__66_contiguousPutByVal__storeResult; // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1404
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_putByVal__opPutByValNotDouble)
+    if (t2.i32 != int32_t(0x1a))                             // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1445
+        goto _offlineasm_putByVal__opPutByValNotContiguous;
+    if (t3.u32 >= *CAST<uint32_t*>(t0.i8p - 8))              // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1392
+        goto _offlineasm_putByVal__67_contiguousPutByVal__outOfBounds;
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_putByVal__67_contiguousPutByVal__storeResult)
+    t2.i = *CAST<int32_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x18)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:94
+    if (t2.i >= intptr_t(0x40000000))                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:313
+        goto _offlineasm_putByVal__contiguousPutByVal__storeCallback__67_loadConstantOrVariable__constant;
+    t1.i64 = *CAST<int64_t*>(cfr.i8p + (t2.i << 3));         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:314
+    goto _offlineasm_putByVal__contiguousPutByVal__storeCallback__67_loadConstantOrVariable__done; // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:315
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_putByVal__contiguousPutByVal__storeCallback__67_loadConstantOrVariable__constant)
+    t1.i = *CAST<intptr_t*>(cfr.i8p + 16);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:317
+    t1.i = *CAST<intptr_t*>(t1.i8p + 368);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:318
+    t2.i = t2.i - intptr_t(0x40000000);                      // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:319
+    t1.i64 = *CAST<int64_t*>(t1.i8p + (t2.i << 3));          // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:320
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_putByVal__contiguousPutByVal__storeCallback__67_loadConstantOrVariable__done)
+    *CAST<intptr_t*>(t0.i8p + (t3.i << 3)) = t1.i;           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1449
+    rPC.i = rPC.i + intptr_t(0x5);                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:31
+    opcode = *CAST<Opcode*>(rBasePC.i8p + (rPC.i << 3));     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:27
+    DISPATCH_OPCODE();
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_putByVal__67_contiguousPutByVal__outOfBounds)
+    if (t3.u32 >= *CAST<uint32_t*>(t0.i8p - 4))              // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1399
+        goto _offlineasm_putByVal__opPutByValOutOfBounds;
+    t2.i = *CAST<intptr_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x20)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1400
+    *CAST<uint8_t*>(t2.i8p + 16) = int8_t(0x1);              // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1401
+    t2.i32 = int32_t(0x1) + t3.i32;                          // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1402
+    t2.clearHighWord();
+    *CAST<int32_t*>(t0.i8p - 8) = t2.i32;                    // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1403
+    goto _offlineasm_putByVal__67_contiguousPutByVal__storeResult; // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1404
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_putByVal__opPutByValNotContiguous)
+    if (t2.i32 != int32_t(0x1c))                             // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1453
+        goto _offlineasm_putByVal__opPutByValSlow;
+    if (t3.u32 >= *CAST<uint32_t*>(t0.i8p - 4))              // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1454
+        goto _offlineasm_putByVal__opPutByValOutOfBounds;
+    if (*CAST<int64_t*>(t0.i8p + (t3.i << 3) + intptr_t(0x10)) == 0) // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1481
+        goto _offlineasm_putByVal__opPutByValArrayStorageEmpty;
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_putByVal__opPutByValArrayStorageStoreResult)
+    t2.i = *CAST<int32_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x18)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:94
+    if (t2.i >= intptr_t(0x40000000))                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:313
+        goto _offlineasm_putByVal__68_loadConstantOrVariable__constant;
+    t1.i64 = *CAST<int64_t*>(cfr.i8p + (t2.i << 3));         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:314
+    goto _offlineasm_putByVal__68_loadConstantOrVariable__done; // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:315
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_putByVal__68_loadConstantOrVariable__constant)
+    t1.i = *CAST<intptr_t*>(cfr.i8p + 16);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:317
+    t1.i = *CAST<intptr_t*>(t1.i8p + 368);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:318
+    t2.i = t2.i - intptr_t(0x40000000);                      // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:319
+    t1.i64 = *CAST<int64_t*>(t1.i8p + (t2.i << 3));          // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:320
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_putByVal__68_loadConstantOrVariable__done)
+    *CAST<int64_t*>(t0.i8p + (t3.i << 3) + intptr_t(0x10)) = t1.i64; // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1459
+    rPC.i = rPC.i + intptr_t(0x5);                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:31
+    opcode = *CAST<Opcode*>(rBasePC.i8p + (rPC.i << 3));     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:27
+    DISPATCH_OPCODE();
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_putByVal__opPutByValArrayStorageEmpty)
+    t1.i = *CAST<intptr_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x20)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:98
+    *CAST<uint8_t*>(t1.i8p + 16) = int8_t(0x1);              // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1464
+    *CAST<int32_t*>(t0.i8p + 12) = *CAST<int32_t*>(t0.i8p + 12) + int32_t(0x1); // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1465
+    if (t3.u32 < *CAST<uint32_t*>(t0.i8p - 8))               // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1466
+        goto _offlineasm_putByVal__opPutByValArrayStorageStoreResult;
+    t1.i32 = int32_t(0x1) + t3.i32;                          // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1467
+    t1.clearHighWord();
+    *CAST<int32_t*>(t0.i8p - 8) = t1.i32;                    // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1468
+    goto _offlineasm_putByVal__opPutByValArrayStorageStoreResult; // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1469
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_putByVal__opPutByValOutOfBounds)
+    t0.i = *CAST<intptr_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x20)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:98
+    *CAST<uint8_t*>(t0.i8p + 17) = int8_t(0x1);              // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1473
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_putByVal__opPutByValSlow)
+    rPC.i8p = rBasePC.i8p + (rPC.i << 3);                    // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:241
+    t3.i = rBasePC.i;                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:242
+    {                                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:64
+        ExecState* exec = CAST<ExecState*>(cfr.vp);
+        Instruction* pc = CAST<Instruction*>(rPC.vp);
+        SlowPathReturnType result = llint_slow_path_put_by_val(exec, pc);
+        decodeResult(result, t0.instruction, t1.vp);
+    }
+    rPC.i = t0.i;                                            // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:246
+    cfr.i = t1.i;                                            // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:247
+    rBasePC.i = t3.i;                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:248
+    rPC.i = rPC.i - rBasePC.i;                               // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:249
+    rPC.i = rPC.i >> (intptr_t(0x3) & 0x1f);                 // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:250
+    rPC.i = rPC.i + intptr_t(0x5);                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:31
+    opcode = *CAST<Opcode*>(rBasePC.i8p + (rPC.i << 3));     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:27
+    DISPATCH_OPCODE();
+
+OFFLINE_ASM_OPCODE_LABEL(op_put_by_val_direct)
+    t0.i = *CAST<int32_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x8)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:94
+    if (t0.i >= intptr_t(0x40000000))                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:313
+        goto _offlineasm_putByVal__loadConstantOrVariableCell__69_loadConstantOrVariable__constant;
+    t1.i64 = *CAST<int64_t*>(cfr.i8p + (t0.i << 3));         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:314
+    goto _offlineasm_putByVal__loadConstantOrVariableCell__69_loadConstantOrVariable__done; // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:315
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_putByVal__loadConstantOrVariableCell__69_loadConstantOrVariable__constant)
+    t1.i = *CAST<intptr_t*>(cfr.i8p + 16);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:317
+    t1.i = *CAST<intptr_t*>(t1.i8p + 368);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:318
+    t0.i = t0.i - intptr_t(0x40000000);                      // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:319
+    t1.i64 = *CAST<int64_t*>(t1.i8p + (t0.i << 3));          // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:320
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_putByVal__loadConstantOrVariableCell__69_loadConstantOrVariable__done)
+    if ((t1.i64 & tagMask.i64) != 0)                         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:331
+        goto _offlineasm_74_putByVal__opPutByValSlow;
+    t2.i = *CAST<intptr_t*>(t1.i8p);                         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1412
+    t3.i = *CAST<intptr_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x20)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:98
+    *CAST<intptr_t*>(t3.i8p + 8) = t2.i;                     // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:266
+    t2.i = *CAST<uint8_t*>(t2.i8p + 95);                     // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:267
+    t0.i = *CAST<int32_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x10)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:94
+    if (t0.i >= intptr_t(0x40000000))                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:313
+        goto _offlineasm_putByVal__loadConstantOrVariableInt32__70_loadConstantOrVariable__constant;
+    t3.i64 = *CAST<int64_t*>(cfr.i8p + (t0.i << 3));         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:314
+    goto _offlineasm_putByVal__loadConstantOrVariableInt32__70_loadConstantOrVariable__done; // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:315
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_putByVal__loadConstantOrVariableInt32__70_loadConstantOrVariable__constant)
+    t3.i = *CAST<intptr_t*>(cfr.i8p + 16);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:317
+    t3.i = *CAST<intptr_t*>(t3.i8p + 368);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:318
+    t0.i = t0.i - intptr_t(0x40000000);                      // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:319
+    t3.i64 = *CAST<int64_t*>(t3.i8p + (t0.i << 3));          // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:320
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_putByVal__loadConstantOrVariableInt32__70_loadConstantOrVariable__done)
+    if (t3.u64 < tagTypeNumber.u64)                          // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:326
+        goto _offlineasm_74_putByVal__opPutByValSlow;
+    t3.i64 = t3.i32;                                         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1417
+    t0.i = *CAST<intptr_t*>(t1.i8p + 8);                     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1418
+    t2.i32 = t2.i32 & int32_t(0x1e);                         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1419
+    t2.clearHighWord();
+    if (t2.i32 != int32_t(0x14))                             // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1420
+        goto _offlineasm_74_putByVal__opPutByValNotInt32;
+    if (t3.u32 >= *CAST<uint32_t*>(t0.i8p - 8))              // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1392
+        goto _offlineasm_putByVal__71_contiguousPutByVal__outOfBounds;
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_putByVal__71_contiguousPutByVal__storeResult)
+    t2.i = *CAST<int32_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x18)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:94
+    if (t2.i >= intptr_t(0x40000000))                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:313
+        goto _offlineasm_putByVal__contiguousPutByVal__storeCallback__71_loadConstantOrVariable__constant;
+    t1.i64 = *CAST<int64_t*>(cfr.i8p + (t2.i << 3));         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:314
+    goto _offlineasm_putByVal__contiguousPutByVal__storeCallback__71_loadConstantOrVariable__done; // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:315
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_putByVal__contiguousPutByVal__storeCallback__71_loadConstantOrVariable__constant)
+    t1.i = *CAST<intptr_t*>(cfr.i8p + 16);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:317
+    t1.i = *CAST<intptr_t*>(t1.i8p + 368);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:318
+    t2.i = t2.i - intptr_t(0x40000000);                      // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:319
+    t1.i64 = *CAST<int64_t*>(t1.i8p + (t2.i << 3));          // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:320
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_putByVal__contiguousPutByVal__storeCallback__71_loadConstantOrVariable__done)
+    if (t1.u < tagTypeNumber.u)                              // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1424
+        goto _offlineasm_74_putByVal__opPutByValSlow;
+    *CAST<intptr_t*>(t0.i8p + (t3.i << 3)) = t1.i;           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1425
+    rPC.i = rPC.i + intptr_t(0x5);                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:31
+    opcode = *CAST<Opcode*>(rBasePC.i8p + (rPC.i << 3));     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:27
+    DISPATCH_OPCODE();
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_putByVal__71_contiguousPutByVal__outOfBounds)
+    if (t3.u32 >= *CAST<uint32_t*>(t0.i8p - 4))              // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1399
+        goto _offlineasm_74_putByVal__opPutByValOutOfBounds;
+    t2.i = *CAST<intptr_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x20)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1400
+    *CAST<uint8_t*>(t2.i8p + 16) = int8_t(0x1);              // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1401
+    t2.i32 = int32_t(0x1) + t3.i32;                          // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1402
+    t2.clearHighWord();
+    *CAST<int32_t*>(t0.i8p - 8) = t2.i32;                    // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1403
+    goto _offlineasm_putByVal__71_contiguousPutByVal__storeResult; // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1404
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_74_putByVal__opPutByValNotInt32)
+    if (t2.i32 != int32_t(0x16))                             // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1429
+        goto _offlineasm_74_putByVal__opPutByValNotDouble;
+    if (t3.u32 >= *CAST<uint32_t*>(t0.i8p - 8))              // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1392
+        goto _offlineasm_putByVal__72_contiguousPutByVal__outOfBounds;
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_putByVal__72_contiguousPutByVal__storeResult)
+    t2.i = *CAST<int32_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x18)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:94
+    if (t2.i >= intptr_t(0x40000000))                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:313
+        goto _offlineasm_putByVal__contiguousPutByVal__storeCallback__72_loadConstantOrVariable__constant;
+    t1.i64 = *CAST<int64_t*>(cfr.i8p + (t2.i << 3));         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:314
+    goto _offlineasm_putByVal__contiguousPutByVal__storeCallback__72_loadConstantOrVariable__done; // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:315
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_putByVal__contiguousPutByVal__storeCallback__72_loadConstantOrVariable__constant)
+    t1.i = *CAST<intptr_t*>(cfr.i8p + 16);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:317
+    t1.i = *CAST<intptr_t*>(t1.i8p + 368);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:318
+    t2.i = t2.i - intptr_t(0x40000000);                      // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:319
+    t1.i64 = *CAST<int64_t*>(t1.i8p + (t2.i << 3));          // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:320
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_putByVal__contiguousPutByVal__storeCallback__72_loadConstantOrVariable__done)
+    if (t1.u64 < tagTypeNumber.u64)                          // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1433
+        goto _offlineasm_putByVal__contiguousPutByVal__72_storeCallback__notInt;
+    d0.d = t1.i32;                                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1434
+    goto _offlineasm_putByVal__contiguousPutByVal__72_storeCallback__ready; // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1435
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_putByVal__contiguousPutByVal__72_storeCallback__notInt)
+    t1.i = t1.i + tagTypeNumber.i;                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1437
+    d0.d = t1.castToDouble;                                  // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1438
+    if (std::isnan(d0.d) || std::isnan(d0.d)                 // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1439
+        || (d0.d != d0.d))
+        goto _offlineasm_74_putByVal__opPutByValSlow;
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_putByVal__contiguousPutByVal__72_storeCallback__ready)
+    *CAST<double*>(t0.i8p + (t3.i << 3)) = d0.d;             // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1441
+    rPC.i = rPC.i + intptr_t(0x5);                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:31
+    opcode = *CAST<Opcode*>(rBasePC.i8p + (rPC.i << 3));     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:27
+    DISPATCH_OPCODE();
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_putByVal__72_contiguousPutByVal__outOfBounds)
+    if (t3.u32 >= *CAST<uint32_t*>(t0.i8p - 4))              // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1399
+        goto _offlineasm_74_putByVal__opPutByValOutOfBounds;
+    t2.i = *CAST<intptr_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x20)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1400
+    *CAST<uint8_t*>(t2.i8p + 16) = int8_t(0x1);              // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1401
+    t2.i32 = int32_t(0x1) + t3.i32;                          // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1402
+    t2.clearHighWord();
+    *CAST<int32_t*>(t0.i8p - 8) = t2.i32;                    // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1403
+    goto _offlineasm_putByVal__72_contiguousPutByVal__storeResult; // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1404
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_74_putByVal__opPutByValNotDouble)
+    if (t2.i32 != int32_t(0x1a))                             // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1445
+        goto _offlineasm_74_putByVal__opPutByValNotContiguous;
+    if (t3.u32 >= *CAST<uint32_t*>(t0.i8p - 8))              // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1392
+        goto _offlineasm_putByVal__73_contiguousPutByVal__outOfBounds;
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_putByVal__73_contiguousPutByVal__storeResult)
+    t2.i = *CAST<int32_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x18)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:94
+    if (t2.i >= intptr_t(0x40000000))                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:313
+        goto _offlineasm_putByVal__contiguousPutByVal__storeCallback__73_loadConstantOrVariable__constant;
+    t1.i64 = *CAST<int64_t*>(cfr.i8p + (t2.i << 3));         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:314
+    goto _offlineasm_putByVal__contiguousPutByVal__storeCallback__73_loadConstantOrVariable__done; // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:315
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_putByVal__contiguousPutByVal__storeCallback__73_loadConstantOrVariable__constant)
+    t1.i = *CAST<intptr_t*>(cfr.i8p + 16);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:317
+    t1.i = *CAST<intptr_t*>(t1.i8p + 368);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:318
+    t2.i = t2.i - intptr_t(0x40000000);                      // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:319
+    t1.i64 = *CAST<int64_t*>(t1.i8p + (t2.i << 3));          // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:320
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_putByVal__contiguousPutByVal__storeCallback__73_loadConstantOrVariable__done)
+    *CAST<intptr_t*>(t0.i8p + (t3.i << 3)) = t1.i;           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1449
+    rPC.i = rPC.i + intptr_t(0x5);                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:31
+    opcode = *CAST<Opcode*>(rBasePC.i8p + (rPC.i << 3));     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:27
+    DISPATCH_OPCODE();
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_putByVal__73_contiguousPutByVal__outOfBounds)
+    if (t3.u32 >= *CAST<uint32_t*>(t0.i8p - 4))              // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1399
+        goto _offlineasm_74_putByVal__opPutByValOutOfBounds;
+    t2.i = *CAST<intptr_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x20)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1400
+    *CAST<uint8_t*>(t2.i8p + 16) = int8_t(0x1);              // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1401
+    t2.i32 = int32_t(0x1) + t3.i32;                          // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1402
+    t2.clearHighWord();
+    *CAST<int32_t*>(t0.i8p - 8) = t2.i32;                    // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1403
+    goto _offlineasm_putByVal__73_contiguousPutByVal__storeResult; // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1404
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_74_putByVal__opPutByValNotContiguous)
+    if (t2.i32 != int32_t(0x1c))                             // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1453
+        goto _offlineasm_74_putByVal__opPutByValSlow;
+    if (t3.u32 >= *CAST<uint32_t*>(t0.i8p - 4))              // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1454
+        goto _offlineasm_74_putByVal__opPutByValOutOfBounds;
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_74_putByVal__opPutByValArrayStorageStoreResult)
+    t2.i = *CAST<int32_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x18)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:94
+    if (t2.i >= intptr_t(0x40000000))                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:313
+        goto _offlineasm_putByVal__74_loadConstantOrVariable__constant;
+    t1.i64 = *CAST<int64_t*>(cfr.i8p + (t2.i << 3));         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:314
+    goto _offlineasm_putByVal__74_loadConstantOrVariable__done; // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:315
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_putByVal__74_loadConstantOrVariable__constant)
+    t1.i = *CAST<intptr_t*>(cfr.i8p + 16);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:317
+    t1.i = *CAST<intptr_t*>(t1.i8p + 368);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:318
+    t2.i = t2.i - intptr_t(0x40000000);                      // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:319
+    t1.i64 = *CAST<int64_t*>(t1.i8p + (t2.i << 3));          // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:320
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_putByVal__74_loadConstantOrVariable__done)
+    *CAST<int64_t*>(t0.i8p + (t3.i << 3) + intptr_t(0x10)) = t1.i64; // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1459
+    rPC.i = rPC.i + intptr_t(0x5);                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:31
+    opcode = *CAST<Opcode*>(rBasePC.i8p + (rPC.i << 3));     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:27
+    DISPATCH_OPCODE();
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_74_putByVal__opPutByValArrayStorageEmpty)
+    t1.i = *CAST<intptr_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x20)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:98
+    *CAST<uint8_t*>(t1.i8p + 16) = int8_t(0x1);              // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1464
+    *CAST<int32_t*>(t0.i8p + 12) = *CAST<int32_t*>(t0.i8p + 12) + int32_t(0x1); // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1465
+    if (t3.u32 < *CAST<uint32_t*>(t0.i8p - 8))               // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1466
+        goto _offlineasm_74_putByVal__opPutByValArrayStorageStoreResult;
+    t1.i32 = int32_t(0x1) + t3.i32;                          // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1467
+    t1.clearHighWord();
+    *CAST<int32_t*>(t0.i8p - 8) = t1.i32;                    // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1468
+    goto _offlineasm_74_putByVal__opPutByValArrayStorageStoreResult; // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1469
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_74_putByVal__opPutByValOutOfBounds)
+    t0.i = *CAST<intptr_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x20)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:98
+    *CAST<uint8_t*>(t0.i8p + 17) = int8_t(0x1);              // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1473
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_74_putByVal__opPutByValSlow)
+    rPC.i8p = rBasePC.i8p + (rPC.i << 3);                    // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:241
+    t3.i = rBasePC.i;                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:242
+    {                                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:64
+        ExecState* exec = CAST<ExecState*>(cfr.vp);
+        Instruction* pc = CAST<Instruction*>(rPC.vp);
+        SlowPathReturnType result = llint_slow_path_put_by_val_direct(exec, pc);
+        decodeResult(result, t0.instruction, t1.vp);
+    }
+    rPC.i = t0.i;                                            // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:246
+    cfr.i = t1.i;                                            // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:247
+    rBasePC.i = t3.i;                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:248
+    rPC.i = rPC.i - rBasePC.i;                               // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:249
+    rPC.i = rPC.i >> (intptr_t(0x3) & 0x1f);                 // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:250
+    rPC.i = rPC.i + intptr_t(0x5);                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:31
+    opcode = *CAST<Opcode*>(rBasePC.i8p + (rPC.i << 3));     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:27
+    DISPATCH_OPCODE();
+
+OFFLINE_ASM_OPCODE_LABEL(op_jmp)
+    rPC.i32 = rPC.i32 + *CAST<int32_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x8)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:36
+    rPC.clearHighWord();
+    opcode = *CAST<Opcode*>(rBasePC.i8p + (rPC.i << 3));     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:27
+    DISPATCH_OPCODE();
+
+OFFLINE_ASM_OPCODE_LABEL(op_jeq_null)
+    t0.i = *CAST<int32_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x8)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:94
+    t0.i64 = *CAST<int64_t*>(cfr.i8p + (t0.i << 3));         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1514
+    if ((t0.i64 & tagMask.i64) != 0)                         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1515
+        goto _offlineasm_equalNull__immediate;
+    t2.i = *CAST<intptr_t*>(t0.i8p);                         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1516
+    if ((*CAST<int8_t*>(t2.i8p + 93) & int8_t(0x1)) == 0)    // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1533
+        goto _offlineasm_equalNull__cellHandler__notMasqueradesAsUndefined;
+    t0.i = *CAST<intptr_t*>(cfr.i8p + 16);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1534
+    t0.i = *CAST<intptr_t*>(t0.i8p + 40);                    // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1535
+    if (*CAST<intptr_t*>(t2.i8p + 8) == t0.i)                // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1536
+        goto _offlineasm_equalNull__target;
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_equalNull__cellHandler__notMasqueradesAsUndefined)
+    rPC.i = rPC.i + intptr_t(0x3);                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:31
+    opcode = *CAST<Opcode*>(rBasePC.i8p + (rPC.i << 3));     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:27
+    DISPATCH_OPCODE();
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_equalNull__target)
+    rPC.i32 = rPC.i32 + *CAST<int32_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x10)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:36
+    rPC.clearHighWord();
+    opcode = *CAST<Opcode*>(rBasePC.i8p + (rPC.i << 3));     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:27
+    DISPATCH_OPCODE();
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_equalNull__immediate)
+    t0.i64 = t0.i64 & int64_t(-9);                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1524
+    if (t0.i64 == int64_t(0x2))                              // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1539
+        goto _offlineasm_equalNull__target;
+    rPC.i = rPC.i + intptr_t(0x3);                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:31
+    opcode = *CAST<Opcode*>(rBasePC.i8p + (rPC.i << 3));     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:27
+    DISPATCH_OPCODE();
+
+OFFLINE_ASM_OPCODE_LABEL(op_jneq_null)
+    t0.i = *CAST<int32_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x8)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:94
+    t0.i64 = *CAST<int64_t*>(cfr.i8p + (t0.i << 3));         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1514
+    if ((t0.i64 & tagMask.i64) != 0)                         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1515
+        goto _offlineasm_74_equalNull__immediate;
+    t2.i = *CAST<intptr_t*>(t0.i8p);                         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1516
+    if ((*CAST<int8_t*>(t2.i8p + 93) & int8_t(0x1)) == 0)    // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1546
+        goto _offlineasm_74_equalNull__target;
+    t0.i = *CAST<intptr_t*>(cfr.i8p + 16);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1547
+    t0.i = *CAST<intptr_t*>(t0.i8p + 40);                    // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1548
+    if (*CAST<intptr_t*>(t2.i8p + 8) != t0.i)                // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1549
+        goto _offlineasm_74_equalNull__target;
+    rPC.i = rPC.i + intptr_t(0x3);                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:31
+    opcode = *CAST<Opcode*>(rBasePC.i8p + (rPC.i << 3));     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:27
+    DISPATCH_OPCODE();
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_74_equalNull__target)
+    rPC.i32 = rPC.i32 + *CAST<int32_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x10)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:36
+    rPC.clearHighWord();
+    opcode = *CAST<Opcode*>(rBasePC.i8p + (rPC.i << 3));     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:27
+    DISPATCH_OPCODE();
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_74_equalNull__immediate)
+    t0.i64 = t0.i64 & int64_t(-9);                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1524
+    if (t0.i64 != int64_t(0x2))                              // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1551
+        goto _offlineasm_74_equalNull__target;
+    rPC.i = rPC.i + intptr_t(0x3);                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:31
+    opcode = *CAST<Opcode*>(rBasePC.i8p + (rPC.i << 3));     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:27
+    DISPATCH_OPCODE();
+
+OFFLINE_ASM_OPCODE_LABEL(op_jneq_ptr)
+    t0.i = *CAST<int32_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x8)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:94
+    t1.i = *CAST<int32_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x10)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:94
+    t2.i = *CAST<intptr_t*>(cfr.i8p + 16);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1558
+    t2.i = *CAST<intptr_t*>(t2.i8p + 40);                    // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1559
+    t1.i = *CAST<intptr_t*>(t2.i8p + (t1.i << 3) + intptr_t(0x410)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1560
+    if (t1.i != *CAST<intptr_t*>(cfr.i8p + (t0.i << 3)))     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1561
+        goto _offlineasm_opJneqPtrTarget;
+    rPC.i = rPC.i + intptr_t(0x4);                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:31
+    opcode = *CAST<Opcode*>(rBasePC.i8p + (rPC.i << 3));     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:27
+    DISPATCH_OPCODE();
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_opJneqPtrTarget)
+    rPC.i32 = rPC.i32 + *CAST<int32_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x18)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:36
+    rPC.clearHighWord();
+    opcode = *CAST<Opcode*>(rBasePC.i8p + (rPC.i << 3));     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:27
+    DISPATCH_OPCODE();
+
+OFFLINE_ASM_OPCODE_LABEL(op_switch_imm)
+    t2.i = *CAST<int32_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x18)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:94
+    t3.i = *CAST<int32_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x8)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:94
+    if (t2.i >= intptr_t(0x40000000))                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:313
+        goto _offlineasm_75_loadConstantOrVariable__constant;
+    t1.i64 = *CAST<int64_t*>(cfr.i8p + (t2.i << 3));         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:314
+    goto _offlineasm_75_loadConstantOrVariable__done;        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:315
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_75_loadConstantOrVariable__constant)
+    t1.i = *CAST<intptr_t*>(cfr.i8p + 16);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:317
+    t1.i = *CAST<intptr_t*>(t1.i8p + 368);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:318
+    t2.i = t2.i - intptr_t(0x40000000);                      // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:319
+    t1.i64 = *CAST<int64_t*>(t1.i8p + (t2.i << 3));          // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:320
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_75_loadConstantOrVariable__done)
+    t2.i = *CAST<intptr_t*>(cfr.i8p + 16);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1615
+    t2.i = *CAST<intptr_t*>(t2.i8p + 472);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1616
+    t3.i32 = t3.i32 * int32_t(0x18);                         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1617
+    t3.clearHighWord();
+    t2.i = *CAST<intptr_t*>(t2.i8p + 32);                    // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1618
+    t2.i = t2.i + t3.i;                                      // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1619
+    if (t1.u64 < tagTypeNumber.u64)                          // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1620
+        goto _offlineasm_opSwitchImmNotInt;
+    t1.i32 = t1.i32 - *CAST<int32_t*>(t2.i8p + 16);          // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1621
+    t1.clearHighWord();
+    if (t1.u32 >= *CAST<uint32_t*>(t2.i8p + 12))             // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1622
+        goto _offlineasm_opSwitchImmFallThrough;
+    t3.i = *CAST<intptr_t*>(t2.i8p);                         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1623
+    t1.i = *CAST<int32_t*>(t3.i8p + (t1.i << 2));            // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1624
+    if (t1.i32 == 0)                                         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1625
+        goto _offlineasm_opSwitchImmFallThrough;
+    rPC.i = rPC.i + t1.i;                                    // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:31
+    opcode = *CAST<Opcode*>(rBasePC.i8p + (rPC.i << 3));     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:27
+    DISPATCH_OPCODE();
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_opSwitchImmNotInt)
+    if ((t1.i64 & tagTypeNumber.i64) != 0)                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1629
+        goto _offlineasm_opSwitchImmSlow;
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_opSwitchImmFallThrough)
+    rPC.i32 = rPC.i32 + *CAST<int32_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x10)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:36
+    rPC.clearHighWord();
+    opcode = *CAST<Opcode*>(rBasePC.i8p + (rPC.i << 3));     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:27
+    DISPATCH_OPCODE();
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_opSwitchImmSlow)
+    rPC.i8p = rBasePC.i8p + (rPC.i << 3);                    // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:241
+    t3.i = rBasePC.i;                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:242
+    {                                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:64
+        ExecState* exec = CAST<ExecState*>(cfr.vp);
+        Instruction* pc = CAST<Instruction*>(rPC.vp);
+        SlowPathReturnType result = llint_slow_path_switch_imm(exec, pc);
+        decodeResult(result, t0.instruction, t1.vp);
+    }
+    rPC.i = t0.i;                                            // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:246
+    cfr.i = t1.i;                                            // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:247
+    rBasePC.i = t3.i;                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:248
+    rPC.i = rPC.i - rBasePC.i;                               // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:249
+    rPC.i = rPC.i >> (intptr_t(0x3) & 0x1f);                 // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:250
+    rPC.i = rPC.i + intptr_t(0x0);                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:31
+    opcode = *CAST<Opcode*>(rBasePC.i8p + (rPC.i << 3));     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:27
+    DISPATCH_OPCODE();
+
+OFFLINE_ASM_OPCODE_LABEL(op_switch_char)
+    t2.i = *CAST<int32_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x18)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:94
+    t3.i = *CAST<int32_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x8)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:94
+    if (t2.i >= intptr_t(0x40000000))                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:313
+        goto _offlineasm_76_loadConstantOrVariable__constant;
+    t1.i64 = *CAST<int64_t*>(cfr.i8p + (t2.i << 3));         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:314
+    goto _offlineasm_76_loadConstantOrVariable__done;        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:315
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_76_loadConstantOrVariable__constant)
+    t1.i = *CAST<intptr_t*>(cfr.i8p + 16);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:317
+    t1.i = *CAST<intptr_t*>(t1.i8p + 368);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:318
+    t2.i = t2.i - intptr_t(0x40000000);                      // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:319
+    t1.i64 = *CAST<int64_t*>(t1.i8p + (t2.i << 3));          // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:320
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_76_loadConstantOrVariable__done)
+    t2.i = *CAST<intptr_t*>(cfr.i8p + 16);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1643
+    t2.i = *CAST<intptr_t*>(t2.i8p + 472);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1644
+    t3.i32 = t3.i32 * int32_t(0x18);                         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1645
+    t3.clearHighWord();
+    t2.i = *CAST<intptr_t*>(t2.i8p + 32);                    // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1646
+    t2.i = t2.i + t3.i;                                      // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1647
+    if ((t1.i64 & tagMask.i64) != 0)                         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1648
+        goto _offlineasm_opSwitchCharFallThrough;
+    t0.i = *CAST<intptr_t*>(t1.i8p);                         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1649
+    if (*CAST<int8_t*>(t0.i8p + 92) != int8_t(0x5))          // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1650
+        goto _offlineasm_opSwitchCharFallThrough;
+    if (*CAST<int32_t*>(t1.i8p + 12) != int32_t(0x1))        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1651
+        goto _offlineasm_opSwitchCharFallThrough;
+    t0.i = *CAST<intptr_t*>(t1.i8p + 16);                    // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1652
+    if (t0.i == 0)                                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1653
+        goto _offlineasm_opSwitchOnRope;
+    t1.i = *CAST<intptr_t*>(t0.i8p + 8);                     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1654
+    if ((*CAST<int32_t*>(t0.i8p + 24) & int32_t(0x20)) != 0) // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1655
+        goto _offlineasm_opSwitchChar8Bit;
+    t0.i = *CAST<uint16_t*>(t1.i8p);                         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1656
+    goto _offlineasm_opSwitchCharReady;                      // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1657
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_opSwitchChar8Bit)
+    t0.i = *CAST<uint8_t*>(t1.i8p);                          // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1659
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_opSwitchCharReady)
+    t0.i32 = t0.i32 - *CAST<int32_t*>(t2.i8p + 16);          // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1661
+    t0.clearHighWord();
+    if (t0.u32 >= *CAST<uint32_t*>(t2.i8p + 12))             // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1662
+        goto _offlineasm_opSwitchCharFallThrough;
+    t2.i = *CAST<intptr_t*>(t2.i8p);                         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1663
+    t1.i = *CAST<int32_t*>(t2.i8p + (t0.i << 2));            // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1664
+    if (t1.i32 == 0)                                         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1665
+        goto _offlineasm_opSwitchCharFallThrough;
+    rPC.i = rPC.i + t1.i;                                    // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:31
+    opcode = *CAST<Opcode*>(rBasePC.i8p + (rPC.i << 3));     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:27
+    DISPATCH_OPCODE();
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_opSwitchCharFallThrough)
+    rPC.i32 = rPC.i32 + *CAST<int32_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x10)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:36
+    rPC.clearHighWord();
+    opcode = *CAST<Opcode*>(rBasePC.i8p + (rPC.i << 3));     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:27
+    DISPATCH_OPCODE();
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_opSwitchOnRope)
+    rPC.i8p = rBasePC.i8p + (rPC.i << 3);                    // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:241
+    t3.i = rBasePC.i;                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:242
+    {                                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:64
+        ExecState* exec = CAST<ExecState*>(cfr.vp);
+        Instruction* pc = CAST<Instruction*>(rPC.vp);
+        SlowPathReturnType result = llint_slow_path_switch_char(exec, pc);
+        decodeResult(result, t0.instruction, t1.vp);
+    }
+    rPC.i = t0.i;                                            // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:246
+    cfr.i = t1.i;                                            // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:247
+    rBasePC.i = t3.i;                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:248
+    rPC.i = rPC.i - rBasePC.i;                               // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:249
+    rPC.i = rPC.i >> (intptr_t(0x3) & 0x1f);                 // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:250
+    rPC.i = rPC.i + intptr_t(0x0);                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:31
+    opcode = *CAST<Opcode*>(rBasePC.i8p + (rPC.i << 3));     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:27
+    DISPATCH_OPCODE();
+
+OFFLINE_ASM_OPCODE_LABEL(op_new_func)
+    t2.i = *CAST<int32_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x18)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:94
+    if (t2.i32 == 0)                                         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1679
+        goto _offlineasm_opNewFuncUnchecked;
+    t1.i = *CAST<int32_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x8)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:94
+    if (*CAST<int64_t*>(cfr.i8p + (t1.i << 3)) != 0)         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1681
+        goto _offlineasm_opNewFuncDone;
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_opNewFuncUnchecked)
+    rPC.i8p = rBasePC.i8p + (rPC.i << 3);                    // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:241
+    t3.i = rBasePC.i;                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:242
+    {                                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:64
+        ExecState* exec = CAST<ExecState*>(cfr.vp);
+        Instruction* pc = CAST<Instruction*>(rPC.vp);
+        SlowPathReturnType result = llint_slow_path_new_func(exec, pc);
+        decodeResult(result, t0.instruction, t1.vp);
+    }
+    rPC.i = t0.i;                                            // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:246
+    cfr.i = t1.i;                                            // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:247
+    rBasePC.i = t3.i;                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:248
+    rPC.i = rPC.i - rBasePC.i;                               // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:249
+    rPC.i = rPC.i >> (intptr_t(0x3) & 0x1f);                 // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:250
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_opNewFuncDone)
+    rPC.i = rPC.i + intptr_t(0x4);                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:31
+    opcode = *CAST<Opcode*>(rBasePC.i8p + (rPC.i << 3));     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:27
+    DISPATCH_OPCODE();
+
+OFFLINE_ASM_OPCODE_LABEL(op_new_captured_func)
+    rPC.i8p = rBasePC.i8p + (rPC.i << 3);                    // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:241
+    t3.i = rBasePC.i;                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:242
+    {                                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:64
+        ExecState* exec = CAST<ExecState*>(cfr.vp);
+        Instruction* pc = CAST<Instruction*>(rPC.vp);
+        SlowPathReturnType result = slow_path_new_captured_func(exec, pc);
+        decodeResult(result, t0.instruction, t1.vp);
+    }
+    rPC.i = t0.i;                                            // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:246
+    cfr.i = t1.i;                                            // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:247
+    rBasePC.i = t3.i;                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:248
+    rPC.i = rPC.i - rBasePC.i;                               // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:249
+    rPC.i = rPC.i >> (intptr_t(0x3) & 0x1f);                 // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:250
+    rPC.i = rPC.i + intptr_t(0x4);                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:31
+    opcode = *CAST<Opcode*>(rBasePC.i8p + (rPC.i << 3));     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:27
+    DISPATCH_OPCODE();
+
+OFFLINE_ASM_OPCODE_LABEL(op_tear_off_activation)
+    t0.i = *CAST<int32_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x8)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:94
+    if (*CAST<int64_t*>(cfr.i8p + (t0.i << 3)) == 0)         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1733
+        goto _offlineasm_opTearOffActivationNotCreated;
+    rPC.i8p = rBasePC.i8p + (rPC.i << 3);                    // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:241
+    t3.i = rBasePC.i;                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:242
+    {                                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:64
+        ExecState* exec = CAST<ExecState*>(cfr.vp);
+        Instruction* pc = CAST<Instruction*>(rPC.vp);
+        SlowPathReturnType result = llint_slow_path_tear_off_activation(exec, pc);
+        decodeResult(result, t0.instruction, t1.vp);
+    }
+    rPC.i = t0.i;                                            // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:246
+    cfr.i = t1.i;                                            // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:247
+    rBasePC.i = t3.i;                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:248
+    rPC.i = rPC.i - rBasePC.i;                               // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:249
+    rPC.i = rPC.i >> (intptr_t(0x3) & 0x1f);                 // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:250
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_opTearOffActivationNotCreated)
+    rPC.i = rPC.i + intptr_t(0x2);                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:31
+    opcode = *CAST<Opcode*>(rBasePC.i8p + (rPC.i << 3));     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:27
+    DISPATCH_OPCODE();
+
+OFFLINE_ASM_OPCODE_LABEL(op_tear_off_arguments)
+    t0.i = *CAST<int32_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x8)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:94
+    t0.i64 = t0.i64 + int64_t(0x1);                          // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1742
+    if (*CAST<int64_t*>(cfr.i8p + (t0.i << 3)) == 0)         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1743
+        goto _offlineasm_opTearOffArgumentsNotCreated;
+    rPC.i8p = rBasePC.i8p + (rPC.i << 3);                    // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:241
+    t3.i = rBasePC.i;                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:242
+    {                                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:64
+        ExecState* exec = CAST<ExecState*>(cfr.vp);
+        Instruction* pc = CAST<Instruction*>(rPC.vp);
+        SlowPathReturnType result = llint_slow_path_tear_off_arguments(exec, pc);
+        decodeResult(result, t0.instruction, t1.vp);
+    }
+    rPC.i = t0.i;                                            // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:246
+    cfr.i = t1.i;                                            // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:247
+    rBasePC.i = t3.i;                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:248
+    rPC.i = rPC.i - rBasePC.i;                               // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:249
+    rPC.i = rPC.i >> (intptr_t(0x3) & 0x1f);                 // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:250
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_opTearOffArgumentsNotCreated)
+    rPC.i = rPC.i + intptr_t(0x3);                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:31
+    opcode = *CAST<Opcode*>(rBasePC.i8p + (rPC.i << 3));     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:27
+    DISPATCH_OPCODE();
+
+OFFLINE_ASM_OPCODE_LABEL(op_ret)
+    t0.i = *CAST<intptr_t*>(cfr.i8p + 16);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:283
+    {                                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:284
+        int32_t temp = *CAST<int32_t*>(t0.i8p + 424) + int32_t(0xa);
+        *CAST<int32_t*>(t0.i8p + 424) = temp;
+        if (temp < 0)
+            goto  _offlineasm_checkSwitchToJITForEpilogue__checkSwitchToJIT__continue;
+    }
+    rPC.i8p = rBasePC.i8p + (rPC.i << 3);                    // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:241
+    t3.i = rBasePC.i;                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:242
+    {                                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:64
+        ExecState* exec = CAST<ExecState*>(cfr.vp);
+        Instruction* pc = CAST<Instruction*>(rPC.vp);
+        SlowPathReturnType result = llint_replace(exec, pc);
+        decodeResult(result, t0.instruction, t1.vp);
+    }
+    rPC.i = t0.i;                                            // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:246
+    cfr.i = t1.i;                                            // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:247
+    rBasePC.i = t3.i;                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:248
+    rPC.i = rPC.i - rBasePC.i;                               // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:249
+    rPC.i = rPC.i >> (intptr_t(0x3) & 0x1f);                 // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:250
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_checkSwitchToJITForEpilogue__checkSwitchToJIT__continue)
+    t2.i = *CAST<int32_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x8)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:94
+    if (t2.i >= intptr_t(0x40000000))                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:313
+        goto _offlineasm_77_loadConstantOrVariable__constant;
+    t0.i64 = *CAST<int64_t*>(cfr.i8p + (t2.i << 3));         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:314
+    goto _offlineasm_77_loadConstantOrVariable__done;        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:315
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_77_loadConstantOrVariable__constant)
+    t0.i = *CAST<intptr_t*>(cfr.i8p + 16);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:317
+    t0.i = *CAST<intptr_t*>(t0.i8p + 368);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:318
+    t2.i = t2.i - intptr_t(0x40000000);                      // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:319
+    t0.i64 = *CAST<int64_t*>(t0.i8p + (t2.i << 3));          // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:320
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_77_loadConstantOrVariable__done)
+    t2.i = *CAST<intptr_t*>(cfr.i8p + 8);                    // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:434
+    cfr.i = *CAST<intptr_t*>(cfr.i8p);                       // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:435
+    rRetVPC.i = t2.i;                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:227
+    goto doReturnHelper;                                     // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:437
+
+OFFLINE_ASM_OPCODE_LABEL(op_ret_object_or_this)
+    t0.i = *CAST<intptr_t*>(cfr.i8p + 16);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:283
+    {                                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:284
+        int32_t temp = *CAST<int32_t*>(t0.i8p + 424) + int32_t(0xa);
+        *CAST<int32_t*>(t0.i8p + 424) = temp;
+        if (temp < 0)
+            goto  _offlineasm_checkSwitchToJITForEpilogue__77_checkSwitchToJIT__continue;
+    }
+    rPC.i8p = rBasePC.i8p + (rPC.i << 3);                    // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:241
+    t3.i = rBasePC.i;                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:242
+    {                                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:64
+        ExecState* exec = CAST<ExecState*>(cfr.vp);
+        Instruction* pc = CAST<Instruction*>(rPC.vp);
+        SlowPathReturnType result = llint_replace(exec, pc);
+        decodeResult(result, t0.instruction, t1.vp);
+    }
+    rPC.i = t0.i;                                            // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:246
+    cfr.i = t1.i;                                            // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:247
+    rBasePC.i = t3.i;                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:248
+    rPC.i = rPC.i - rBasePC.i;                               // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:249
+    rPC.i = rPC.i >> (intptr_t(0x3) & 0x1f);                 // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:250
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_checkSwitchToJITForEpilogue__77_checkSwitchToJIT__continue)
+    t2.i = *CAST<int32_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x8)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:94
+    if (t2.i >= intptr_t(0x40000000))                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:313
+        goto _offlineasm_78_loadConstantOrVariable__constant;
+    t0.i64 = *CAST<int64_t*>(cfr.i8p + (t2.i << 3));         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:314
+    goto _offlineasm_78_loadConstantOrVariable__done;        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:315
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_78_loadConstantOrVariable__constant)
+    t0.i = *CAST<intptr_t*>(cfr.i8p + 16);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:317
+    t0.i = *CAST<intptr_t*>(t0.i8p + 368);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:318
+    t2.i = t2.i - intptr_t(0x40000000);                      // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:319
+    t0.i64 = *CAST<int64_t*>(t0.i8p + (t2.i << 3));          // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:320
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_78_loadConstantOrVariable__done)
+    if ((t0.i64 & tagMask.i64) != 0)                         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1762
+        goto _offlineasm_opRetObjectOrThisNotObject;
+    t2.i = *CAST<intptr_t*>(t0.i8p);                         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1763
+    if (*CAST<uint8_t*>(t2.i8p + 92) < uint8_t(0x11))        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1764
+        goto _offlineasm_opRetObjectOrThisNotObject;
+    t2.i = *CAST<intptr_t*>(cfr.i8p + 8);                    // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:434
+    cfr.i = *CAST<intptr_t*>(cfr.i8p);                       // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:435
+    rRetVPC.i = t2.i;                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:227
+    goto doReturnHelper;                                     // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:437
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_opRetObjectOrThisNotObject)
+    t2.i = *CAST<int32_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x10)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:94
+    if (t2.i >= intptr_t(0x40000000))                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:313
+        goto _offlineasm_79_loadConstantOrVariable__constant;
+    t0.i64 = *CAST<int64_t*>(cfr.i8p + (t2.i << 3));         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:314
+    goto _offlineasm_79_loadConstantOrVariable__done;        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:315
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_79_loadConstantOrVariable__constant)
+    t0.i = *CAST<intptr_t*>(cfr.i8p + 16);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:317
+    t0.i = *CAST<intptr_t*>(t0.i8p + 368);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:318
+    t2.i = t2.i - intptr_t(0x40000000);                      // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:319
+    t0.i64 = *CAST<int64_t*>(t0.i8p + (t2.i << 3));          // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:320
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_79_loadConstantOrVariable__done)
+    t2.i = *CAST<intptr_t*>(cfr.i8p + 8);                    // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:434
+    cfr.i = *CAST<intptr_t*>(cfr.i8p);                       // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:435
+    rRetVPC.i = t2.i;                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:227
+    goto doReturnHelper;                                     // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:437
+
+OFFLINE_ASM_OPCODE_LABEL(op_to_primitive)
+    t2.i = *CAST<int32_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x10)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:94
+    t3.i = *CAST<int32_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x8)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:94
+    if (t2.i >= intptr_t(0x40000000))                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:313
+        goto _offlineasm_80_loadConstantOrVariable__constant;
+    t0.i64 = *CAST<int64_t*>(cfr.i8p + (t2.i << 3));         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:314
+    goto _offlineasm_80_loadConstantOrVariable__done;        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:315
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_80_loadConstantOrVariable__constant)
+    t0.i = *CAST<intptr_t*>(cfr.i8p + 16);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:317
+    t0.i = *CAST<intptr_t*>(t0.i8p + 368);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:318
+    t2.i = t2.i - intptr_t(0x40000000);                      // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:319
+    t0.i64 = *CAST<int64_t*>(t0.i8p + (t2.i << 3));          // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:320
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_80_loadConstantOrVariable__done)
+    if ((t0.i64 & tagMask.i64) != 0)                         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1778
+        goto _offlineasm_opToPrimitiveIsImm;
+    t2.i = *CAST<intptr_t*>(t0.i8p);                         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1779
+    if (*CAST<int8_t*>(t2.i8p + 92) != int8_t(0x5))          // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1780
+        goto _offlineasm_opToPrimitiveSlowCase;
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_opToPrimitiveIsImm)
+    *CAST<int64_t*>(cfr.i8p + (t3.i << 3)) = t0.i64;         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1782
+    rPC.i = rPC.i + intptr_t(0x3);                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:31
+    opcode = *CAST<Opcode*>(rBasePC.i8p + (rPC.i << 3));     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:27
+    DISPATCH_OPCODE();
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_opToPrimitiveSlowCase)
+    rPC.i8p = rBasePC.i8p + (rPC.i << 3);                    // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:241
+    t3.i = rBasePC.i;                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:242
+    {                                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:64
+        ExecState* exec = CAST<ExecState*>(cfr.vp);
+        Instruction* pc = CAST<Instruction*>(rPC.vp);
+        SlowPathReturnType result = slow_path_to_primitive(exec, pc);
+        decodeResult(result, t0.instruction, t1.vp);
+    }
+    rPC.i = t0.i;                                            // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:246
+    cfr.i = t1.i;                                            // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:247
+    rBasePC.i = t3.i;                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:248
+    rPC.i = rPC.i - rBasePC.i;                               // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:249
+    rPC.i = rPC.i >> (intptr_t(0x3) & 0x1f);                 // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:250
+    rPC.i = rPC.i + intptr_t(0x3);                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:31
+    opcode = *CAST<Opcode*>(rBasePC.i8p + (rPC.i << 3));     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:27
+    DISPATCH_OPCODE();
+
+OFFLINE_ASM_OPCODE_LABEL(op_next_pname)
+    t1.i = *CAST<int32_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x18)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:94
+    t2.i = *CAST<int32_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x20)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:94
+    t0.u = *CAST<uint32_t*>(cfr.i8p + (t1.i << 3));          // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1796
+    if (t0.i32 == *CAST<int32_t*>(cfr.i8p + (t2.i << 3)))    // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1797
+        goto _offlineasm_opNextPnameEnd;
+    t2.i = *CAST<int32_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x28)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:94
+    t2.i = *CAST<intptr_t*>(cfr.i8p + (t2.i << 3));          // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1800
+    t3.i = *CAST<intptr_t*>(t2.i8p + 40);                    // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1801
+    t3.i64 = *CAST<int64_t*>(t3.i8p + (t0.i << 3));          // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1802
+    t0.i32 = t0.i32 + int32_t(0x1);                          // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1803
+    t0.clearHighWord();
+    *CAST<int32_t*>(cfr.i8p + (t1.i << 3)) = t0.i32;         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1804
+    t1.i = *CAST<int32_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x8)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:94
+    *CAST<int64_t*>(cfr.i8p + (t1.i << 3)) = t3.i64;         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1806
+    t3.i = *CAST<int32_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x10)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:94
+    t3.i64 = *CAST<int64_t*>(cfr.i8p + (t3.i << 3));         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1809
+    t1.i = *CAST<intptr_t*>(t3.i8p);                         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1810
+    if (t1.i != *CAST<intptr_t*>(t2.i8p + 8))                // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1811
+        goto _offlineasm_opNextPnameSlow;
+    t0.i = *CAST<intptr_t*>(t2.i8p + 16);                    // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1812
+    t0.i = *CAST<intptr_t*>(t0.i8p + 8);                     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1813
+    if (*CAST<intptr_t*>(t0.i8p) == 0)                       // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1814
+        goto _offlineasm_opNextPnameTarget;
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_opNextPnameCheckPrototypeLoop)
+    if (*CAST<int64_t*>(t1.i8p + 16) == int64_t(0x2))        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1816
+        goto _offlineasm_opNextPnameSlow;
+    t2.i64 = *CAST<int64_t*>(t1.i8p + 16);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1817
+    t1.i = *CAST<intptr_t*>(t2.i8p);                         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1818
+    if (t1.i != *CAST<intptr_t*>(t0.i8p))                    // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1819
+        goto _offlineasm_opNextPnameSlow;
+    t0.i = t0.i + intptr_t(0x8);                             // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1820
+    if (*CAST<intptr_t*>(t0.i8p) != 0)                       // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1821
+        goto _offlineasm_opNextPnameCheckPrototypeLoop;
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_opNextPnameTarget)
+    rPC.i32 = rPC.i32 + *CAST<int32_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x30)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:36
+    rPC.clearHighWord();
+    opcode = *CAST<Opcode*>(rBasePC.i8p + (rPC.i << 3));     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:27
+    DISPATCH_OPCODE();
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_opNextPnameEnd)
+    rPC.i = rPC.i + intptr_t(0x7);                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:31
+    opcode = *CAST<Opcode*>(rBasePC.i8p + (rPC.i << 3));     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:27
+    DISPATCH_OPCODE();
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_opNextPnameSlow)
+    rPC.i8p = rBasePC.i8p + (rPC.i << 3);                    // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:241
+    t3.i = rBasePC.i;                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:242
+    {                                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:64
+        ExecState* exec = CAST<ExecState*>(cfr.vp);
+        Instruction* pc = CAST<Instruction*>(rPC.vp);
+        SlowPathReturnType result = llint_slow_path_next_pname(exec, pc);
+        decodeResult(result, t0.instruction, t1.vp);
+    }
+    rPC.i = t0.i;                                            // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:246
+    cfr.i = t1.i;                                            // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:247
+    rBasePC.i = t3.i;                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:248
+    rPC.i = rPC.i - rBasePC.i;                               // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:249
+    rPC.i = rPC.i >> (intptr_t(0x3) & 0x1f);                 // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:250
+    rPC.i = rPC.i + intptr_t(0x0);                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:31
+    opcode = *CAST<Opcode*>(rBasePC.i8p + (rPC.i << 3));     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:27
+    DISPATCH_OPCODE();
+
+OFFLINE_ASM_OPCODE_LABEL(op_catch)
+    t3.i = *CAST<intptr_t*>(cfr.i8p + 24);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1839
+    t3.i = t3.i & intptr_t(-65536);                          // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1840
+    t3.i = *CAST<intptr_t*>(t3.i8p + 1128);                  // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1841
+    cfr.i = *CAST<intptr_t*>(t3.i8p + 48280);                // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1842
+    rBasePC.i = *CAST<intptr_t*>(cfr.i8p + 16);              // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1843
+    rBasePC.i = *CAST<intptr_t*>(rBasePC.i8p + 104);         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1844
+    rPC.i = *CAST<intptr_t*>(t3.i8p + 48296);                // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1845
+    rPC.i = rPC.i - rBasePC.i;                               // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1846
+    rPC.i = rPC.i >> (intptr_t(0x3) & 0x1f);                 // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1847
+    t0.i64 = *CAST<int64_t*>(t3.i8p + 48496);                // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1848
+    *CAST<int64_t*>(t3.i8p + 48496) = int64_t(0x0);          // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1849
+    t2.i = *CAST<int32_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x8)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:94
+    *CAST<int64_t*>(cfr.i8p + (t2.i << 3)) = t0.i64;         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1851
+    rPC.i = rPC.i + intptr_t(0x2);                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:31
+    opcode = *CAST<Opcode*>(rBasePC.i8p + (rPC.i << 3));     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:27
+    DISPATCH_OPCODE();
+
+OFFLINE_ASM_OPCODE_LABEL(op_end)
+    t0.i = *CAST<intptr_t*>(cfr.i8p + 16);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:283
+    {                                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:284
+        int32_t temp = *CAST<int32_t*>(t0.i8p + 424) + int32_t(0xa);
+        *CAST<int32_t*>(t0.i8p + 424) = temp;
+        if (temp < 0)
+            goto  _offlineasm_checkSwitchToJITForEpilogue__80_checkSwitchToJIT__continue;
+    }
+    rPC.i8p = rBasePC.i8p + (rPC.i << 3);                    // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:241
+    t3.i = rBasePC.i;                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:242
+    {                                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:64
+        ExecState* exec = CAST<ExecState*>(cfr.vp);
+        Instruction* pc = CAST<Instruction*>(rPC.vp);
+        SlowPathReturnType result = llint_replace(exec, pc);
+        decodeResult(result, t0.instruction, t1.vp);
+    }
+    rPC.i = t0.i;                                            // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:246
+    cfr.i = t1.i;                                            // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:247
+    rBasePC.i = t3.i;                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:248
+    rPC.i = rPC.i - rBasePC.i;                               // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:249
+    rPC.i = rPC.i >> (intptr_t(0x3) & 0x1f);                 // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:250
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_checkSwitchToJITForEpilogue__80_checkSwitchToJIT__continue)
+    t0.i = *CAST<int32_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x8)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:94
+    t0.i64 = *CAST<int64_t*>(cfr.i8p + (t0.i << 3));         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1861
+    t2.i = *CAST<intptr_t*>(cfr.i8p + 8);                    // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:434
+    cfr.i = *CAST<intptr_t*>(cfr.i8p);                       // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:435
+    rRetVPC.i = t2.i;                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:227
+    goto doReturnHelper;                                     // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:437
+
+OFFLINE_ASM_GLUE_LABEL(llint_throw_from_slow_path_trampoline)
+    rPC.i8p = rBasePC.i8p + (rPC.i << 3);                    // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:241
+    t3.i = rBasePC.i;                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:242
+    {                                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:64
+        ExecState* exec = CAST<ExecState*>(cfr.vp);
+        Instruction* pc = CAST<Instruction*>(rPC.vp);
+        SlowPathReturnType result = llint_slow_path_handle_exception(exec, pc);
+        decodeResult(result, t0.instruction, t1.vp);
+    }
+    rPC.i = t0.i;                                            // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:246
+    cfr.i = t1.i;                                            // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:247
+    rBasePC.i = t3.i;                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:248
+    rPC.i = rPC.i - rBasePC.i;                               // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:249
+    rPC.i = rPC.i >> (intptr_t(0x3) & 0x1f);                 // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:250
+    t1.i = *CAST<intptr_t*>(cfr.i8p + 16);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1871
+    t1.i = *CAST<intptr_t*>(t1.i8p + 96);                    // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1872
+    opcode = *CAST<Opcode*>(t1.i8p + 48288);                 // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1873
+    DISPATCH_OPCODE();
+
+OFFLINE_ASM_GLUE_LABEL(llint_throw_during_call_trampoline)
+    t2.i = rRetVPC.i;                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:216
+    goto llint_throw_from_slow_path_trampoline;              // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1878
+
+OFFLINE_ASM_OPCODE_LABEL(op_resolve_scope)
+    t0.i = *CAST<int32_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x18)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:94
+    if (t0.i32 != int32_t(0x0))                              // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:2005
+        goto _offlineasm_rGlobalVar;
+    t0.i = *CAST<intptr_t*>(cfr.i8p + 16);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1964
+    t0.i = *CAST<intptr_t*>(t0.i8p + 40);                    // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1965
+    t1.i = *CAST<int32_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x8)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:94
+    *CAST<int64_t*>(cfr.i8p + (t1.i << 3)) = t0.i64;         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1967
+    rPC.i = rPC.i + intptr_t(0x6);                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:31
+    opcode = *CAST<Opcode*>(rBasePC.i8p + (rPC.i << 3));     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:27
+    DISPATCH_OPCODE();
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_rGlobalVar)
+    if (t0.i32 != int32_t(0x1))                              // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:2010
+        goto _offlineasm_rClosureVar;
+    t0.i = *CAST<intptr_t*>(cfr.i8p + 16);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1964
+    t0.i = *CAST<intptr_t*>(t0.i8p + 40);                    // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1965
+    t1.i = *CAST<int32_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x8)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:94
+    *CAST<int64_t*>(cfr.i8p + (t1.i << 3)) = t0.i64;         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1967
+    rPC.i = rPC.i + intptr_t(0x6);                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:31
+    opcode = *CAST<Opcode*>(rBasePC.i8p + (rPC.i << 3));     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:27
+    DISPATCH_OPCODE();
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_rClosureVar)
+    if (t0.i32 != int32_t(0x2))                              // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:2015
+        goto _offlineasm_rGlobalPropertyWithVarInjectionChecks;
+    t0.i = *CAST<intptr_t*>(cfr.i8p + 16);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1978
+    t2.i = *CAST<int32_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x20)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:94
+    if (*CAST<int8_t*>(t0.i8p + 133) == 0)                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1980
+        goto _offlineasm_resolveScope__resolveScopeAfterActivationCheck;
+    t1.i = *CAST<int32_t*>(t0.i8p + 128);                    // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1981
+    if (*CAST<intptr_t*>(cfr.i8p + (t1.i << 3)) == 0)        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1982
+        goto _offlineasm_resolveScope__resolveScopeAfterActivationCheck;
+    t2.i32 = t2.i32 + int32_t(0x1);                          // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1983
+    t2.clearHighWord();
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_resolveScope__resolveScopeAfterActivationCheck)
+    t0.i = *CAST<intptr_t*>(cfr.i8p + 24);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1986
+    if (t2.i32 == 0)                                         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1987
+        goto _offlineasm_resolveScope__resolveScopeLoopEnd;
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_resolveScope__resolveScopeLoop)
+    t0.i = *CAST<intptr_t*>(t0.i8p + 16);                    // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1990
+    t2.i32 = t2.i32 - int32_t(0x1);                          // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1991
+    t2.clearHighWord();
+    if (t2.i32 != 0)                                         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1992
+        goto _offlineasm_resolveScope__resolveScopeLoop;
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_resolveScope__resolveScopeLoopEnd)
+    t1.i = *CAST<int32_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x8)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:94
+    *CAST<int64_t*>(cfr.i8p + (t1.i << 3)) = t0.i64;         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1996
+    rPC.i = rPC.i + intptr_t(0x6);                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:31
+    opcode = *CAST<Opcode*>(rBasePC.i8p + (rPC.i << 3));     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:27
+    DISPATCH_OPCODE();
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_rGlobalPropertyWithVarInjectionChecks)
+    if (t0.i32 != int32_t(0x3))                              // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:2020
+        goto _offlineasm_rGlobalVarWithVarInjectionChecks;
+    t0.i = *CAST<intptr_t*>(cfr.i8p + 16);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1971
+    t0.i = *CAST<intptr_t*>(t0.i8p + 40);                    // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1972
+    t0.i = *CAST<intptr_t*>(t0.i8p + 1104);                  // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1973
+    if (*CAST<int8_t*>(t0.i8p + 4) == int8_t(0x2))           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1974
+        goto _offlineasm_rDynamic;
+    t0.i = *CAST<intptr_t*>(cfr.i8p + 16);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1964
+    t0.i = *CAST<intptr_t*>(t0.i8p + 40);                    // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1965
+    t1.i = *CAST<int32_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x8)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:94
+    *CAST<int64_t*>(cfr.i8p + (t1.i << 3)) = t0.i64;         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1967
+    rPC.i = rPC.i + intptr_t(0x6);                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:31
+    opcode = *CAST<Opcode*>(rBasePC.i8p + (rPC.i << 3));     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:27
+    DISPATCH_OPCODE();
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_rGlobalVarWithVarInjectionChecks)
+    if (t0.i32 != int32_t(0x4))                              // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:2026
+        goto _offlineasm_rClosureVarWithVarInjectionChecks;
+    t0.i = *CAST<intptr_t*>(cfr.i8p + 16);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1971
+    t0.i = *CAST<intptr_t*>(t0.i8p + 40);                    // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1972
+    t0.i = *CAST<intptr_t*>(t0.i8p + 1104);                  // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1973
+    if (*CAST<int8_t*>(t0.i8p + 4) == int8_t(0x2))           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1974
+        goto _offlineasm_rDynamic;
+    t0.i = *CAST<intptr_t*>(cfr.i8p + 16);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1964
+    t0.i = *CAST<intptr_t*>(t0.i8p + 40);                    // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1965
+    t1.i = *CAST<int32_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x8)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:94
+    *CAST<int64_t*>(cfr.i8p + (t1.i << 3)) = t0.i64;         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1967
+    rPC.i = rPC.i + intptr_t(0x6);                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:31
+    opcode = *CAST<Opcode*>(rBasePC.i8p + (rPC.i << 3));     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:27
+    DISPATCH_OPCODE();
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_rClosureVarWithVarInjectionChecks)
+    if (t0.i32 != int32_t(0x5))                              // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:2032
+        goto _offlineasm_rDynamic;
+    t0.i = *CAST<intptr_t*>(cfr.i8p + 16);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1971
+    t0.i = *CAST<intptr_t*>(t0.i8p + 40);                    // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1972
+    t0.i = *CAST<intptr_t*>(t0.i8p + 1104);                  // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1973
+    if (*CAST<int8_t*>(t0.i8p + 4) == int8_t(0x2))           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1974
+        goto _offlineasm_rDynamic;
+    t0.i = *CAST<intptr_t*>(cfr.i8p + 16);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1978
+    t2.i = *CAST<int32_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x20)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:94
+    if (*CAST<int8_t*>(t0.i8p + 133) == 0)                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1980
+        goto _offlineasm_80_resolveScope__resolveScopeAfterActivationCheck;
+    t1.i = *CAST<int32_t*>(t0.i8p + 128);                    // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1981
+    if (*CAST<intptr_t*>(cfr.i8p + (t1.i << 3)) == 0)        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1982
+        goto _offlineasm_80_resolveScope__resolveScopeAfterActivationCheck;
+    t2.i32 = t2.i32 + int32_t(0x1);                          // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1983
+    t2.clearHighWord();
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_80_resolveScope__resolveScopeAfterActivationCheck)
+    t0.i = *CAST<intptr_t*>(cfr.i8p + 24);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1986
+    if (t2.i32 == 0)                                         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1987
+        goto _offlineasm_80_resolveScope__resolveScopeLoopEnd;
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_80_resolveScope__resolveScopeLoop)
+    t0.i = *CAST<intptr_t*>(t0.i8p + 16);                    // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1990
+    t2.i32 = t2.i32 - int32_t(0x1);                          // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1991
+    t2.clearHighWord();
+    if (t2.i32 != 0)                                         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1992
+        goto _offlineasm_80_resolveScope__resolveScopeLoop;
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_80_resolveScope__resolveScopeLoopEnd)
+    t1.i = *CAST<int32_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x8)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:94
+    *CAST<int64_t*>(cfr.i8p + (t1.i << 3)) = t0.i64;         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1996
+    rPC.i = rPC.i + intptr_t(0x6);                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:31
+    opcode = *CAST<Opcode*>(rBasePC.i8p + (rPC.i << 3));     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:27
+    DISPATCH_OPCODE();
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_rDynamic)
+    rPC.i8p = rBasePC.i8p + (rPC.i << 3);                    // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:241
+    t3.i = rBasePC.i;                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:242
+    {                                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:64
+        ExecState* exec = CAST<ExecState*>(cfr.vp);
+        Instruction* pc = CAST<Instruction*>(rPC.vp);
+        SlowPathReturnType result = llint_slow_path_resolve_scope(exec, pc);
+        decodeResult(result, t0.instruction, t1.vp);
+    }
+    rPC.i = t0.i;                                            // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:246
+    cfr.i = t1.i;                                            // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:247
+    rBasePC.i = t3.i;                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:248
+    rPC.i = rPC.i - rBasePC.i;                               // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:249
+    rPC.i = rPC.i >> (intptr_t(0x3) & 0x1f);                 // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:250
+    rPC.i = rPC.i + intptr_t(0x6);                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:31
+    opcode = *CAST<Opcode*>(rBasePC.i8p + (rPC.i << 3));     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:27
+    DISPATCH_OPCODE();
+
+OFFLINE_ASM_OPCODE_LABEL(op_get_from_scope)
+    t0.i = *CAST<int32_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x20)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:94
+    t0.i32 = t0.i32 & int32_t(0xffff);                       // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:2077
+    t0.clearHighWord();
+    if (t0.i32 != int32_t(0x0))                              // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:2080
+        goto _offlineasm_gGlobalVar;
+    t0.i = *CAST<int32_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x10)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:94
+    t0.i64 = *CAST<int64_t*>(cfr.i8p + (t0.i << 3));         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:2044
+    t1.i = *CAST<intptr_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x28)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:98
+    if (*CAST<intptr_t*>(t0.i8p) != t1.i)                    // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:2046
+        goto _offlineasm_gDynamic;
+    t1.i = *CAST<intptr_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x30)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:98
+    if (t1.i32 < int32_t(0x64))                              // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1085
+        goto _offlineasm_getProperty__80_loadPropertyAtVariableOffset__isInline;
+    t0.i = *CAST<intptr_t*>(t0.i8p + 8);                     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1086
+    t1.i32 = -t1.i32;                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1087
+    t1.clearHighWord();
+    t1.i64 = t1.i32;                                         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1088
+    goto _offlineasm_getProperty__80_loadPropertyAtVariableOffset__ready; // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1089
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_getProperty__80_loadPropertyAtVariableOffset__isInline)
+    t0.i = t0.i + intptr_t(-768);                            // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1091
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_getProperty__80_loadPropertyAtVariableOffset__ready)
+    t2.i64 = *CAST<int64_t*>(t0.i8p + (t1.i << 3) + intptr_t(0x310)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1093
+    t0.i = *CAST<intptr_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x38)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:98
+    *CAST<int64_t*>(t0.i8p + 16) = t2.i64;                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:383
+    t0.i = *CAST<int32_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x8)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:94
+    *CAST<int64_t*>(cfr.i8p + (t0.i << 3)) = t2.i64;         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:2054
+    rPC.i = rPC.i + intptr_t(0x8);                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:31
+    opcode = *CAST<Opcode*>(rBasePC.i8p + (rPC.i << 3));     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:27
+    DISPATCH_OPCODE();
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_gGlobalVar)
+    if (t0.i32 != int32_t(0x1))                              // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:2086
+        goto _offlineasm_gClosureVar;
+    t0.i = *CAST<intptr_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x30)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:98
+    t0.i64 = *CAST<int64_t*>(t0.i8p);                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:2059
+    t1.i = *CAST<intptr_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x38)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:98
+    *CAST<int64_t*>(t1.i8p + 16) = t0.i64;                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:383
+    t1.i = *CAST<int32_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x8)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:94
+    *CAST<int64_t*>(cfr.i8p + (t1.i << 3)) = t0.i64;         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:2062
+    rPC.i = rPC.i + intptr_t(0x8);                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:31
+    opcode = *CAST<Opcode*>(rBasePC.i8p + (rPC.i << 3));     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:27
+    DISPATCH_OPCODE();
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_gClosureVar)
+    if (t0.i32 != int32_t(0x2))                              // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:2091
+        goto _offlineasm_gGlobalPropertyWithVarInjectionChecks;
+    t0.i = *CAST<int32_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x10)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:94
+    t0.i64 = *CAST<int64_t*>(cfr.i8p + (t0.i << 3));         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:308
+    t0.i = *CAST<intptr_t*>(t0.i8p + 32);                    // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:2066
+    t1.i = *CAST<intptr_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x30)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:98
+    t0.i64 = *CAST<int64_t*>(t0.i8p + (t1.i << 3));          // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:2068
+    t1.i = *CAST<intptr_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x38)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:98
+    *CAST<int64_t*>(t1.i8p + 16) = t0.i64;                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:383
+    t1.i = *CAST<int32_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x8)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:94
+    *CAST<int64_t*>(cfr.i8p + (t1.i << 3)) = t0.i64;         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:2071
+    rPC.i = rPC.i + intptr_t(0x8);                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:31
+    opcode = *CAST<Opcode*>(rBasePC.i8p + (rPC.i << 3));     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:27
+    DISPATCH_OPCODE();
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_gGlobalPropertyWithVarInjectionChecks)
+    if (t0.i32 != int32_t(0x3))                              // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:2097
+        goto _offlineasm_gGlobalVarWithVarInjectionChecks;
+    t0.i = *CAST<int32_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x10)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:94
+    t0.i64 = *CAST<int64_t*>(cfr.i8p + (t0.i << 3));         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:2044
+    t1.i = *CAST<intptr_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x28)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:98
+    if (*CAST<intptr_t*>(t0.i8p) != t1.i)                    // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:2046
+        goto _offlineasm_gDynamic;
+    t1.i = *CAST<intptr_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x30)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:98
+    if (t1.i32 < int32_t(0x64))                              // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1085
+        goto _offlineasm_getProperty__81_loadPropertyAtVariableOffset__isInline;
+    t0.i = *CAST<intptr_t*>(t0.i8p + 8);                     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1086
+    t1.i32 = -t1.i32;                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1087
+    t1.clearHighWord();
+    t1.i64 = t1.i32;                                         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1088
+    goto _offlineasm_getProperty__81_loadPropertyAtVariableOffset__ready; // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1089
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_getProperty__81_loadPropertyAtVariableOffset__isInline)
+    t0.i = t0.i + intptr_t(-768);                            // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1091
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_getProperty__81_loadPropertyAtVariableOffset__ready)
+    t2.i64 = *CAST<int64_t*>(t0.i8p + (t1.i << 3) + intptr_t(0x310)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1093
+    t0.i = *CAST<intptr_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x38)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:98
+    *CAST<int64_t*>(t0.i8p + 16) = t2.i64;                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:383
+    t0.i = *CAST<int32_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x8)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:94
+    *CAST<int64_t*>(cfr.i8p + (t0.i << 3)) = t2.i64;         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:2054
+    rPC.i = rPC.i + intptr_t(0x8);                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:31
+    opcode = *CAST<Opcode*>(rBasePC.i8p + (rPC.i << 3));     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:27
+    DISPATCH_OPCODE();
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_gGlobalVarWithVarInjectionChecks)
+    if (t0.i32 != int32_t(0x4))                              // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:2103
+        goto _offlineasm_gClosureVarWithVarInjectionChecks;
+    t0.i = *CAST<intptr_t*>(cfr.i8p + 16);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1971
+    t0.i = *CAST<intptr_t*>(t0.i8p + 40);                    // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1972
+    t0.i = *CAST<intptr_t*>(t0.i8p + 1104);                  // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1973
+    if (*CAST<int8_t*>(t0.i8p + 4) == int8_t(0x2))           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1974
+        goto _offlineasm_gDynamic;
+    t0.i = *CAST<int32_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x10)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:94
+    t0.i64 = *CAST<int64_t*>(cfr.i8p + (t0.i << 3));         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:308
+    t0.i = *CAST<intptr_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x30)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:98
+    t0.i64 = *CAST<int64_t*>(t0.i8p);                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:2059
+    t1.i = *CAST<intptr_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x38)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:98
+    *CAST<int64_t*>(t1.i8p + 16) = t0.i64;                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:383
+    t1.i = *CAST<int32_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x8)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:94
+    *CAST<int64_t*>(cfr.i8p + (t1.i << 3)) = t0.i64;         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:2062
+    rPC.i = rPC.i + intptr_t(0x8);                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:31
+    opcode = *CAST<Opcode*>(rBasePC.i8p + (rPC.i << 3));     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:27
+    DISPATCH_OPCODE();
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_gClosureVarWithVarInjectionChecks)
+    if (t0.i32 != int32_t(0x5))                              // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:2110
+        goto _offlineasm_gDynamic;
+    t0.i = *CAST<intptr_t*>(cfr.i8p + 16);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1971
+    t0.i = *CAST<intptr_t*>(t0.i8p + 40);                    // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1972
+    t0.i = *CAST<intptr_t*>(t0.i8p + 1104);                  // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1973
+    if (*CAST<int8_t*>(t0.i8p + 4) == int8_t(0x2))           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1974
+        goto _offlineasm_gDynamic;
+    t0.i = *CAST<int32_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x10)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:94
+    t0.i64 = *CAST<int64_t*>(cfr.i8p + (t0.i << 3));         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:308
+    t0.i = *CAST<intptr_t*>(t0.i8p + 32);                    // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:2066
+    t1.i = *CAST<intptr_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x30)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:98
+    t0.i64 = *CAST<int64_t*>(t0.i8p + (t1.i << 3));          // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:2068
+    t1.i = *CAST<intptr_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x38)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:98
+    *CAST<int64_t*>(t1.i8p + 16) = t0.i64;                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:383
+    t1.i = *CAST<int32_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x8)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:94
+    *CAST<int64_t*>(cfr.i8p + (t1.i << 3)) = t0.i64;         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:2071
+    rPC.i = rPC.i + intptr_t(0x8);                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:31
+    opcode = *CAST<Opcode*>(rBasePC.i8p + (rPC.i << 3));     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:27
+    DISPATCH_OPCODE();
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_gDynamic)
+    rPC.i8p = rBasePC.i8p + (rPC.i << 3);                    // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:241
+    t3.i = rBasePC.i;                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:242
+    {                                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:64
+        ExecState* exec = CAST<ExecState*>(cfr.vp);
+        Instruction* pc = CAST<Instruction*>(rPC.vp);
+        SlowPathReturnType result = llint_slow_path_get_from_scope(exec, pc);
+        decodeResult(result, t0.instruction, t1.vp);
+    }
+    rPC.i = t0.i;                                            // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:246
+    cfr.i = t1.i;                                            // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:247
+    rBasePC.i = t3.i;                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:248
+    rPC.i = rPC.i - rBasePC.i;                               // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:249
+    rPC.i = rPC.i >> (intptr_t(0x3) & 0x1f);                 // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:250
+    rPC.i = rPC.i + intptr_t(0x8);                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:31
+    opcode = *CAST<Opcode*>(rBasePC.i8p + (rPC.i << 3));     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:27
+    DISPATCH_OPCODE();
+
+OFFLINE_ASM_OPCODE_LABEL(op_put_to_scope)
+    t0.i = *CAST<int32_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x20)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:94
+    t0.i32 = t0.i32 & int32_t(0xffff);                       // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:2149
+    t0.clearHighWord();
+    if (t0.i32 != int32_t(0x0))                              // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:2152
+        goto _offlineasm_pGlobalVar;
+    t0.i = *CAST<int32_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x8)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:94
+    t0.i64 = *CAST<int64_t*>(cfr.i8p + (t0.i << 3));         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:2044
+    t1.i = *CAST<intptr_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x28)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:98
+    if (*CAST<intptr_t*>(t0.i8p) != t1.i)                    // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:2046
+        goto _offlineasm_pDynamic;
+    t1.i = *CAST<int32_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x18)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:94
+    if (t1.i >= intptr_t(0x40000000))                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:313
+        goto _offlineasm_putProperty__81_loadConstantOrVariable__constant;
+    t2.i64 = *CAST<int64_t*>(cfr.i8p + (t1.i << 3));         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:314
+    goto _offlineasm_putProperty__81_loadConstantOrVariable__done; // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:315
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_putProperty__81_loadConstantOrVariable__constant)
+    t2.i = *CAST<intptr_t*>(cfr.i8p + 16);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:317
+    t2.i = *CAST<intptr_t*>(t2.i8p + 368);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:318
+    t1.i = t1.i - intptr_t(0x40000000);                      // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:319
+    t2.i64 = *CAST<int64_t*>(t2.i8p + (t1.i << 3));          // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:320
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_putProperty__81_loadConstantOrVariable__done)
+    t1.i = *CAST<intptr_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x30)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:98
+    if (t1.i32 < int32_t(0x64))                              // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1098
+        goto _offlineasm_putProperty__storePropertyAtVariableOffset__isInline;
+    t0.i = *CAST<intptr_t*>(t0.i8p + 8);                     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1099
+    t1.i32 = -t1.i32;                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1100
+    t1.clearHighWord();
+    t1.i64 = t1.i32;                                         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1101
+    goto _offlineasm_putProperty__storePropertyAtVariableOffset__ready; // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1102
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_putProperty__storePropertyAtVariableOffset__isInline)
+    t0.i = t0.i + intptr_t(-768);                            // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1104
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_putProperty__storePropertyAtVariableOffset__ready)
+    *CAST<int64_t*>(t0.i8p + (t1.i << 3) + intptr_t(0x310)) = t2.i64; // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1106
+    rPC.i = rPC.i + intptr_t(0x7);                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:31
+    opcode = *CAST<Opcode*>(rBasePC.i8p + (rPC.i << 3));     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:27
+    DISPATCH_OPCODE();
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_pGlobalVar)
+    if (t0.i32 != int32_t(0x1))                              // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:2159
+        goto _offlineasm_pClosureVar;
+    t0.i = *CAST<int32_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x18)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:94
+    if (t0.i >= intptr_t(0x40000000))                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:313
+        goto _offlineasm_putGlobalVar__82_loadConstantOrVariable__constant;
+    t1.i64 = *CAST<int64_t*>(cfr.i8p + (t0.i << 3));         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:314
+    goto _offlineasm_putGlobalVar__82_loadConstantOrVariable__done; // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:315
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_putGlobalVar__82_loadConstantOrVariable__constant)
+    t1.i = *CAST<intptr_t*>(cfr.i8p + 16);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:317
+    t1.i = *CAST<intptr_t*>(t1.i8p + 368);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:318
+    t0.i = t0.i - intptr_t(0x40000000);                      // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:319
+    t1.i64 = *CAST<int64_t*>(t1.i8p + (t0.i << 3));          // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:320
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_putGlobalVar__82_loadConstantOrVariable__done)
+    t2.i = *CAST<intptr_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x28)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:98
+    t0.i = *CAST<uint8_t*>(t2.i8p + 4);                      // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:558
+    if (t0.i32 == int32_t(0x2))                              // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:559
+        goto _offlineasm_putGlobalVar__82_notifyWrite__done;
+    if (t0.i32 != int32_t(0x0))                              // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:560
+        goto _offlineasm_putGlobalVar__82_notifyWrite__overwrite;
+    *CAST<int64_t*>(t2.i8p + 40) = t1.i64;                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:561
+    *CAST<uint8_t*>(t2.i8p + 4) = int8_t(0x1);               // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:562
+    goto _offlineasm_putGlobalVar__82_notifyWrite__done;     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:563
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_putGlobalVar__82_notifyWrite__overwrite)
+    if (t1.i64 == *CAST<int64_t*>(t2.i8p + 40))              // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:566
+        goto _offlineasm_putGlobalVar__82_notifyWrite__done;
+    if (*CAST<int8_t*>(t2.i8p + 5) != 0)                     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:567
+        goto _offlineasm_pDynamic;
+    *CAST<int64_t*>(t2.i8p + 40) = int64_t(0x0);             // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:568
+    *CAST<uint8_t*>(t2.i8p + 4) = int8_t(0x2);               // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:569
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_putGlobalVar__82_notifyWrite__done)
+    t0.i = *CAST<intptr_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x30)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:98
+    *CAST<int64_t*>(t0.i8p) = t1.i64;                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:2134
+    rPC.i = rPC.i + intptr_t(0x7);                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:31
+    opcode = *CAST<Opcode*>(rBasePC.i8p + (rPC.i << 3));     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:27
+    DISPATCH_OPCODE();
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_pClosureVar)
+    if (t0.i32 != int32_t(0x2))                              // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:2165
+        goto _offlineasm_pGlobalPropertyWithVarInjectionChecks;
+    t0.i = *CAST<int32_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x8)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:94
+    t0.i64 = *CAST<int64_t*>(cfr.i8p + (t0.i << 3));         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:308
+    t1.i = *CAST<int32_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x18)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:94
+    if (t1.i >= intptr_t(0x40000000))                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:313
+        goto _offlineasm_putClosureVar__83_loadConstantOrVariable__constant;
+    t2.i64 = *CAST<int64_t*>(cfr.i8p + (t1.i << 3));         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:314
+    goto _offlineasm_putClosureVar__83_loadConstantOrVariable__done; // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:315
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_putClosureVar__83_loadConstantOrVariable__constant)
+    t2.i = *CAST<intptr_t*>(cfr.i8p + 16);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:317
+    t2.i = *CAST<intptr_t*>(t2.i8p + 368);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:318
+    t1.i = t1.i - intptr_t(0x40000000);                      // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:319
+    t2.i64 = *CAST<int64_t*>(t2.i8p + (t1.i << 3));          // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:320
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_putClosureVar__83_loadConstantOrVariable__done)
+    t0.i = *CAST<intptr_t*>(t0.i8p + 32);                    // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:2140
+    t1.i = *CAST<intptr_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x30)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:98
+    *CAST<int64_t*>(t0.i8p + (t1.i << 3)) = t2.i64;          // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:2142
+    rPC.i = rPC.i + intptr_t(0x7);                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:31
+    opcode = *CAST<Opcode*>(rBasePC.i8p + (rPC.i << 3));     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:27
+    DISPATCH_OPCODE();
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_pGlobalPropertyWithVarInjectionChecks)
+    if (t0.i32 != int32_t(0x3))                              // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:2172
+        goto _offlineasm_pGlobalVarWithVarInjectionChecks;
+    t0.i = *CAST<int32_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x8)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:94
+    t0.i64 = *CAST<int64_t*>(cfr.i8p + (t0.i << 3));         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:2044
+    t1.i = *CAST<intptr_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x28)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:98
+    if (*CAST<intptr_t*>(t0.i8p) != t1.i)                    // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:2046
+        goto _offlineasm_pDynamic;
+    t1.i = *CAST<int32_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x18)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:94
+    if (t1.i >= intptr_t(0x40000000))                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:313
+        goto _offlineasm_putProperty__84_loadConstantOrVariable__constant;
+    t2.i64 = *CAST<int64_t*>(cfr.i8p + (t1.i << 3));         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:314
+    goto _offlineasm_putProperty__84_loadConstantOrVariable__done; // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:315
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_putProperty__84_loadConstantOrVariable__constant)
+    t2.i = *CAST<intptr_t*>(cfr.i8p + 16);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:317
+    t2.i = *CAST<intptr_t*>(t2.i8p + 368);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:318
+    t1.i = t1.i - intptr_t(0x40000000);                      // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:319
+    t2.i64 = *CAST<int64_t*>(t2.i8p + (t1.i << 3));          // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:320
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_putProperty__84_loadConstantOrVariable__done)
+    t1.i = *CAST<intptr_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x30)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:98
+    if (t1.i32 < int32_t(0x64))                              // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1098
+        goto _offlineasm_putProperty__84_storePropertyAtVariableOffset__isInline;
+    t0.i = *CAST<intptr_t*>(t0.i8p + 8);                     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1099
+    t1.i32 = -t1.i32;                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1100
+    t1.clearHighWord();
+    t1.i64 = t1.i32;                                         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1101
+    goto _offlineasm_putProperty__84_storePropertyAtVariableOffset__ready; // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1102
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_putProperty__84_storePropertyAtVariableOffset__isInline)
+    t0.i = t0.i + intptr_t(-768);                            // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1104
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_putProperty__84_storePropertyAtVariableOffset__ready)
+    *CAST<int64_t*>(t0.i8p + (t1.i << 3) + intptr_t(0x310)) = t2.i64; // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1106
+    rPC.i = rPC.i + intptr_t(0x7);                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:31
+    opcode = *CAST<Opcode*>(rBasePC.i8p + (rPC.i << 3));     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:27
+    DISPATCH_OPCODE();
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_pGlobalVarWithVarInjectionChecks)
+    if (t0.i32 != int32_t(0x4))                              // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:2179
+        goto _offlineasm_pClosureVarWithVarInjectionChecks;
+    t0.i = *CAST<intptr_t*>(cfr.i8p + 16);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1971
+    t0.i = *CAST<intptr_t*>(t0.i8p + 40);                    // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1972
+    t0.i = *CAST<intptr_t*>(t0.i8p + 1104);                  // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1973
+    if (*CAST<int8_t*>(t0.i8p + 4) == int8_t(0x2))           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1974
+        goto _offlineasm_pDynamic;
+    t0.i = *CAST<int32_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x18)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:94
+    if (t0.i >= intptr_t(0x40000000))                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:313
+        goto _offlineasm_putGlobalVar__85_loadConstantOrVariable__constant;
+    t1.i64 = *CAST<int64_t*>(cfr.i8p + (t0.i << 3));         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:314
+    goto _offlineasm_putGlobalVar__85_loadConstantOrVariable__done; // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:315
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_putGlobalVar__85_loadConstantOrVariable__constant)
+    t1.i = *CAST<intptr_t*>(cfr.i8p + 16);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:317
+    t1.i = *CAST<intptr_t*>(t1.i8p + 368);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:318
+    t0.i = t0.i - intptr_t(0x40000000);                      // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:319
+    t1.i64 = *CAST<int64_t*>(t1.i8p + (t0.i << 3));          // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:320
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_putGlobalVar__85_loadConstantOrVariable__done)
+    t2.i = *CAST<intptr_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x28)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:98
+    t0.i = *CAST<uint8_t*>(t2.i8p + 4);                      // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:558
+    if (t0.i32 == int32_t(0x2))                              // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:559
+        goto _offlineasm_putGlobalVar__85_notifyWrite__done;
+    if (t0.i32 != int32_t(0x0))                              // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:560
+        goto _offlineasm_putGlobalVar__85_notifyWrite__overwrite;
+    *CAST<int64_t*>(t2.i8p + 40) = t1.i64;                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:561
+    *CAST<uint8_t*>(t2.i8p + 4) = int8_t(0x1);               // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:562
+    goto _offlineasm_putGlobalVar__85_notifyWrite__done;     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:563
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_putGlobalVar__85_notifyWrite__overwrite)
+    if (t1.i64 == *CAST<int64_t*>(t2.i8p + 40))              // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:566
+        goto _offlineasm_putGlobalVar__85_notifyWrite__done;
+    if (*CAST<int8_t*>(t2.i8p + 5) != 0)                     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:567
+        goto _offlineasm_pDynamic;
+    *CAST<int64_t*>(t2.i8p + 40) = int64_t(0x0);             // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:568
+    *CAST<uint8_t*>(t2.i8p + 4) = int8_t(0x2);               // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:569
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_putGlobalVar__85_notifyWrite__done)
+    t0.i = *CAST<intptr_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x30)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:98
+    *CAST<int64_t*>(t0.i8p) = t1.i64;                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:2134
+    rPC.i = rPC.i + intptr_t(0x7);                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:31
+    opcode = *CAST<Opcode*>(rBasePC.i8p + (rPC.i << 3));     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:27
+    DISPATCH_OPCODE();
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_pClosureVarWithVarInjectionChecks)
+    if (t0.i32 != int32_t(0x5))                              // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:2186
+        goto _offlineasm_pDynamic;
+    t0.i = *CAST<intptr_t*>(cfr.i8p + 16);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1971
+    t0.i = *CAST<intptr_t*>(t0.i8p + 40);                    // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1972
+    t0.i = *CAST<intptr_t*>(t0.i8p + 1104);                  // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1973
+    if (*CAST<int8_t*>(t0.i8p + 4) == int8_t(0x2))           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1974
+        goto _offlineasm_pDynamic;
+    t0.i = *CAST<int32_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x8)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:94
+    t0.i64 = *CAST<int64_t*>(cfr.i8p + (t0.i << 3));         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:308
+    t1.i = *CAST<int32_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x18)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:94
+    if (t1.i >= intptr_t(0x40000000))                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:313
+        goto _offlineasm_putClosureVar__86_loadConstantOrVariable__constant;
+    t2.i64 = *CAST<int64_t*>(cfr.i8p + (t1.i << 3));         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:314
+    goto _offlineasm_putClosureVar__86_loadConstantOrVariable__done; // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:315
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_putClosureVar__86_loadConstantOrVariable__constant)
+    t2.i = *CAST<intptr_t*>(cfr.i8p + 16);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:317
+    t2.i = *CAST<intptr_t*>(t2.i8p + 368);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:318
+    t1.i = t1.i - intptr_t(0x40000000);                      // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:319
+    t2.i64 = *CAST<int64_t*>(t2.i8p + (t1.i << 3));          // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:320
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_putClosureVar__86_loadConstantOrVariable__done)
+    t0.i = *CAST<intptr_t*>(t0.i8p + 32);                    // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:2140
+    t1.i = *CAST<intptr_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x30)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:98
+    *CAST<int64_t*>(t0.i8p + (t1.i << 3)) = t2.i64;          // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:2142
+    rPC.i = rPC.i + intptr_t(0x7);                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:31
+    opcode = *CAST<Opcode*>(rBasePC.i8p + (rPC.i << 3));     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:27
+    DISPATCH_OPCODE();
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_pDynamic)
+    rPC.i8p = rBasePC.i8p + (rPC.i << 3);                    // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:241
+    t3.i = rBasePC.i;                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:242
+    {                                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:64
+        ExecState* exec = CAST<ExecState*>(cfr.vp);
+        Instruction* pc = CAST<Instruction*>(rPC.vp);
+        SlowPathReturnType result = llint_slow_path_put_to_scope(exec, pc);
+        decodeResult(result, t0.instruction, t1.vp);
+    }
+    rPC.i = t0.i;                                            // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:246
+    cfr.i = t1.i;                                            // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:247
+    rBasePC.i = t3.i;                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:248
+    rPC.i = rPC.i - rBasePC.i;                               // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:249
+    rPC.i = rPC.i >> (intptr_t(0x3) & 0x1f);                 // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:250
+    rPC.i = rPC.i + intptr_t(0x7);                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:31
+    opcode = *CAST<Opcode*>(rBasePC.i8p + (rPC.i << 3));     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:27
+    DISPATCH_OPCODE();
+
+OFFLINE_ASM_OPCODE_LABEL(op_touch_entry)
+    rPC.i8p = rBasePC.i8p + (rPC.i << 3);                    // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:241
+    t3.i = rBasePC.i;                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:242
+    {                                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:64
+        ExecState* exec = CAST<ExecState*>(cfr.vp);
+        Instruction* pc = CAST<Instruction*>(rPC.vp);
+        SlowPathReturnType result = slow_path_touch_entry(exec, pc);
+        decodeResult(result, t0.instruction, t1.vp);
+    }
+    rPC.i = t0.i;                                            // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:246
+    cfr.i = t1.i;                                            // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:247
+    rBasePC.i = t3.i;                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:248
+    rPC.i = rPC.i - rBasePC.i;                               // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:249
+    rPC.i = rPC.i >> (intptr_t(0x3) & 0x1f);                 // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:250
+    rPC.i = rPC.i + intptr_t(0x1);                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:31
+    opcode = *CAST<Opcode*>(rBasePC.i8p + (rPC.i << 3));     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:27
+    DISPATCH_OPCODE();
+
+OFFLINE_ASM_OPCODE_LABEL(op_new_array)
+    rPC.i8p = rBasePC.i8p + (rPC.i << 3);                    // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:241
+    t3.i = rBasePC.i;                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:242
+    {                                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:64
+        ExecState* exec = CAST<ExecState*>(cfr.vp);
+        Instruction* pc = CAST<Instruction*>(rPC.vp);
+        SlowPathReturnType result = llint_slow_path_new_array(exec, pc);
+        decodeResult(result, t0.instruction, t1.vp);
+    }
+    rPC.i = t0.i;                                            // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:246
+    cfr.i = t1.i;                                            // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:247
+    rBasePC.i = t3.i;                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:248
+    rPC.i = rPC.i - rBasePC.i;                               // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:249
+    rPC.i = rPC.i >> (intptr_t(0x3) & 0x1f);                 // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:250
+    rPC.i = rPC.i + intptr_t(0x5);                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:31
+    opcode = *CAST<Opcode*>(rBasePC.i8p + (rPC.i << 3));     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:27
+    DISPATCH_OPCODE();
+
+OFFLINE_ASM_OPCODE_LABEL(op_new_array_with_size)
+    rPC.i8p = rBasePC.i8p + (rPC.i << 3);                    // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:241
+    t3.i = rBasePC.i;                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:242
+    {                                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:64
+        ExecState* exec = CAST<ExecState*>(cfr.vp);
+        Instruction* pc = CAST<Instruction*>(rPC.vp);
+        SlowPathReturnType result = llint_slow_path_new_array_with_size(exec, pc);
+        decodeResult(result, t0.instruction, t1.vp);
+    }
+    rPC.i = t0.i;                                            // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:246
+    cfr.i = t1.i;                                            // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:247
+    rBasePC.i = t3.i;                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:248
+    rPC.i = rPC.i - rBasePC.i;                               // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:249
+    rPC.i = rPC.i >> (intptr_t(0x3) & 0x1f);                 // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:250
+    rPC.i = rPC.i + intptr_t(0x4);                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:31
+    opcode = *CAST<Opcode*>(rBasePC.i8p + (rPC.i << 3));     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:27
+    DISPATCH_OPCODE();
+
+OFFLINE_ASM_OPCODE_LABEL(op_new_array_buffer)
+    rPC.i8p = rBasePC.i8p + (rPC.i << 3);                    // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:241
+    t3.i = rBasePC.i;                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:242
+    {                                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:64
+        ExecState* exec = CAST<ExecState*>(cfr.vp);
+        Instruction* pc = CAST<Instruction*>(rPC.vp);
+        SlowPathReturnType result = llint_slow_path_new_array_buffer(exec, pc);
+        decodeResult(result, t0.instruction, t1.vp);
+    }
+    rPC.i = t0.i;                                            // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:246
+    cfr.i = t1.i;                                            // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:247
+    rBasePC.i = t3.i;                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:248
+    rPC.i = rPC.i - rBasePC.i;                               // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:249
+    rPC.i = rPC.i >> (intptr_t(0x3) & 0x1f);                 // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:250
+    rPC.i = rPC.i + intptr_t(0x5);                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:31
+    opcode = *CAST<Opcode*>(rBasePC.i8p + (rPC.i << 3));     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:27
+    DISPATCH_OPCODE();
+
+OFFLINE_ASM_OPCODE_LABEL(op_new_regexp)
+    rPC.i8p = rBasePC.i8p + (rPC.i << 3);                    // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:241
+    t3.i = rBasePC.i;                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:242
+    {                                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:64
+        ExecState* exec = CAST<ExecState*>(cfr.vp);
+        Instruction* pc = CAST<Instruction*>(rPC.vp);
+        SlowPathReturnType result = llint_slow_path_new_regexp(exec, pc);
+        decodeResult(result, t0.instruction, t1.vp);
+    }
+    rPC.i = t0.i;                                            // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:246
+    cfr.i = t1.i;                                            // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:247
+    rBasePC.i = t3.i;                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:248
+    rPC.i = rPC.i - rBasePC.i;                               // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:249
+    rPC.i = rPC.i >> (intptr_t(0x3) & 0x1f);                 // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:250
+    rPC.i = rPC.i + intptr_t(0x3);                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:31
+    opcode = *CAST<Opcode*>(rBasePC.i8p + (rPC.i << 3));     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:27
+    DISPATCH_OPCODE();
+
+OFFLINE_ASM_OPCODE_LABEL(op_less)
+    rPC.i8p = rBasePC.i8p + (rPC.i << 3);                    // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:241
+    t3.i = rBasePC.i;                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:242
+    {                                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:64
+        ExecState* exec = CAST<ExecState*>(cfr.vp);
+        Instruction* pc = CAST<Instruction*>(rPC.vp);
+        SlowPathReturnType result = slow_path_less(exec, pc);
+        decodeResult(result, t0.instruction, t1.vp);
+    }
+    rPC.i = t0.i;                                            // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:246
+    cfr.i = t1.i;                                            // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:247
+    rBasePC.i = t3.i;                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:248
+    rPC.i = rPC.i - rBasePC.i;                               // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:249
+    rPC.i = rPC.i >> (intptr_t(0x3) & 0x1f);                 // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:250
+    rPC.i = rPC.i + intptr_t(0x4);                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:31
+    opcode = *CAST<Opcode*>(rBasePC.i8p + (rPC.i << 3));     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:27
+    DISPATCH_OPCODE();
+
+OFFLINE_ASM_OPCODE_LABEL(op_lesseq)
+    rPC.i8p = rBasePC.i8p + (rPC.i << 3);                    // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:241
+    t3.i = rBasePC.i;                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:242
+    {                                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:64
+        ExecState* exec = CAST<ExecState*>(cfr.vp);
+        Instruction* pc = CAST<Instruction*>(rPC.vp);
+        SlowPathReturnType result = slow_path_lesseq(exec, pc);
+        decodeResult(result, t0.instruction, t1.vp);
+    }
+    rPC.i = t0.i;                                            // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:246
+    cfr.i = t1.i;                                            // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:247
+    rBasePC.i = t3.i;                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:248
+    rPC.i = rPC.i - rBasePC.i;                               // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:249
+    rPC.i = rPC.i >> (intptr_t(0x3) & 0x1f);                 // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:250
+    rPC.i = rPC.i + intptr_t(0x4);                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:31
+    opcode = *CAST<Opcode*>(rBasePC.i8p + (rPC.i << 3));     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:27
+    DISPATCH_OPCODE();
+
+OFFLINE_ASM_OPCODE_LABEL(op_greater)
+    rPC.i8p = rBasePC.i8p + (rPC.i << 3);                    // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:241
+    t3.i = rBasePC.i;                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:242
+    {                                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:64
+        ExecState* exec = CAST<ExecState*>(cfr.vp);
+        Instruction* pc = CAST<Instruction*>(rPC.vp);
+        SlowPathReturnType result = slow_path_greater(exec, pc);
+        decodeResult(result, t0.instruction, t1.vp);
+    }
+    rPC.i = t0.i;                                            // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:246
+    cfr.i = t1.i;                                            // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:247
+    rBasePC.i = t3.i;                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:248
+    rPC.i = rPC.i - rBasePC.i;                               // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:249
+    rPC.i = rPC.i >> (intptr_t(0x3) & 0x1f);                 // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:250
+    rPC.i = rPC.i + intptr_t(0x4);                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:31
+    opcode = *CAST<Opcode*>(rBasePC.i8p + (rPC.i << 3));     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:27
+    DISPATCH_OPCODE();
+
+OFFLINE_ASM_OPCODE_LABEL(op_greatereq)
+    rPC.i8p = rBasePC.i8p + (rPC.i << 3);                    // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:241
+    t3.i = rBasePC.i;                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:242
+    {                                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:64
+        ExecState* exec = CAST<ExecState*>(cfr.vp);
+        Instruction* pc = CAST<Instruction*>(rPC.vp);
+        SlowPathReturnType result = slow_path_greatereq(exec, pc);
+        decodeResult(result, t0.instruction, t1.vp);
+    }
+    rPC.i = t0.i;                                            // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:246
+    cfr.i = t1.i;                                            // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:247
+    rBasePC.i = t3.i;                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:248
+    rPC.i = rPC.i - rBasePC.i;                               // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:249
+    rPC.i = rPC.i >> (intptr_t(0x3) & 0x1f);                 // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:250
+    rPC.i = rPC.i + intptr_t(0x4);                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:31
+    opcode = *CAST<Opcode*>(rBasePC.i8p + (rPC.i << 3));     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:27
+    DISPATCH_OPCODE();
+
+OFFLINE_ASM_OPCODE_LABEL(op_mod)
+    rPC.i8p = rBasePC.i8p + (rPC.i << 3);                    // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:241
+    t3.i = rBasePC.i;                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:242
+    {                                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:64
+        ExecState* exec = CAST<ExecState*>(cfr.vp);
+        Instruction* pc = CAST<Instruction*>(rPC.vp);
+        SlowPathReturnType result = slow_path_mod(exec, pc);
+        decodeResult(result, t0.instruction, t1.vp);
+    }
+    rPC.i = t0.i;                                            // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:246
+    cfr.i = t1.i;                                            // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:247
+    rBasePC.i = t3.i;                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:248
+    rPC.i = rPC.i - rBasePC.i;                               // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:249
+    rPC.i = rPC.i >> (intptr_t(0x3) & 0x1f);                 // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:250
+    rPC.i = rPC.i + intptr_t(0x4);                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:31
+    opcode = *CAST<Opcode*>(rBasePC.i8p + (rPC.i << 3));     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:27
+    DISPATCH_OPCODE();
+
+OFFLINE_ASM_OPCODE_LABEL(op_typeof)
+    rPC.i8p = rBasePC.i8p + (rPC.i << 3);                    // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:241
+    t3.i = rBasePC.i;                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:242
+    {                                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:64
+        ExecState* exec = CAST<ExecState*>(cfr.vp);
+        Instruction* pc = CAST<Instruction*>(rPC.vp);
+        SlowPathReturnType result = slow_path_typeof(exec, pc);
+        decodeResult(result, t0.instruction, t1.vp);
+    }
+    rPC.i = t0.i;                                            // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:246
+    cfr.i = t1.i;                                            // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:247
+    rBasePC.i = t3.i;                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:248
+    rPC.i = rPC.i - rBasePC.i;                               // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:249
+    rPC.i = rPC.i >> (intptr_t(0x3) & 0x1f);                 // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:250
+    rPC.i = rPC.i + intptr_t(0x3);                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:31
+    opcode = *CAST<Opcode*>(rBasePC.i8p + (rPC.i << 3));     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:27
+    DISPATCH_OPCODE();
+
+OFFLINE_ASM_OPCODE_LABEL(op_is_object)
+    rPC.i8p = rBasePC.i8p + (rPC.i << 3);                    // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:241
+    t3.i = rBasePC.i;                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:242
+    {                                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:64
+        ExecState* exec = CAST<ExecState*>(cfr.vp);
+        Instruction* pc = CAST<Instruction*>(rPC.vp);
+        SlowPathReturnType result = slow_path_is_object(exec, pc);
+        decodeResult(result, t0.instruction, t1.vp);
+    }
+    rPC.i = t0.i;                                            // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:246
+    cfr.i = t1.i;                                            // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:247
+    rBasePC.i = t3.i;                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:248
+    rPC.i = rPC.i - rBasePC.i;                               // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:249
+    rPC.i = rPC.i >> (intptr_t(0x3) & 0x1f);                 // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:250
+    rPC.i = rPC.i + intptr_t(0x3);                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:31
+    opcode = *CAST<Opcode*>(rBasePC.i8p + (rPC.i << 3));     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:27
+    DISPATCH_OPCODE();
+
+OFFLINE_ASM_OPCODE_LABEL(op_is_function)
+    rPC.i8p = rBasePC.i8p + (rPC.i << 3);                    // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:241
+    t3.i = rBasePC.i;                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:242
+    {                                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:64
+        ExecState* exec = CAST<ExecState*>(cfr.vp);
+        Instruction* pc = CAST<Instruction*>(rPC.vp);
+        SlowPathReturnType result = slow_path_is_function(exec, pc);
+        decodeResult(result, t0.instruction, t1.vp);
+    }
+    rPC.i = t0.i;                                            // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:246
+    cfr.i = t1.i;                                            // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:247
+    rBasePC.i = t3.i;                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:248
+    rPC.i = rPC.i - rBasePC.i;                               // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:249
+    rPC.i = rPC.i >> (intptr_t(0x3) & 0x1f);                 // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:250
+    rPC.i = rPC.i + intptr_t(0x3);                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:31
+    opcode = *CAST<Opcode*>(rBasePC.i8p + (rPC.i << 3));     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:27
+    DISPATCH_OPCODE();
+
+OFFLINE_ASM_OPCODE_LABEL(op_in)
+    rPC.i8p = rBasePC.i8p + (rPC.i << 3);                    // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:241
+    t3.i = rBasePC.i;                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:242
+    {                                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:64
+        ExecState* exec = CAST<ExecState*>(cfr.vp);
+        Instruction* pc = CAST<Instruction*>(rPC.vp);
+        SlowPathReturnType result = slow_path_in(exec, pc);
+        decodeResult(result, t0.instruction, t1.vp);
+    }
+    rPC.i = t0.i;                                            // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:246
+    cfr.i = t1.i;                                            // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:247
+    rBasePC.i = t3.i;                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:248
+    rPC.i = rPC.i - rBasePC.i;                               // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:249
+    rPC.i = rPC.i >> (intptr_t(0x3) & 0x1f);                 // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:250
+    rPC.i = rPC.i + intptr_t(0x4);                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:31
+    opcode = *CAST<Opcode*>(rBasePC.i8p + (rPC.i << 3));     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:27
+    DISPATCH_OPCODE();
+
+OFFLINE_ASM_OPCODE_LABEL(op_del_by_id)
+    rPC.i8p = rBasePC.i8p + (rPC.i << 3);                    // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:241
+    t3.i = rBasePC.i;                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:242
+    {                                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:64
+        ExecState* exec = CAST<ExecState*>(cfr.vp);
+        Instruction* pc = CAST<Instruction*>(rPC.vp);
+        SlowPathReturnType result = llint_slow_path_del_by_id(exec, pc);
+        decodeResult(result, t0.instruction, t1.vp);
+    }
+    rPC.i = t0.i;                                            // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:246
+    cfr.i = t1.i;                                            // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:247
+    rBasePC.i = t3.i;                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:248
+    rPC.i = rPC.i - rBasePC.i;                               // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:249
+    rPC.i = rPC.i >> (intptr_t(0x3) & 0x1f);                 // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:250
+    rPC.i = rPC.i + intptr_t(0x4);                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:31
+    opcode = *CAST<Opcode*>(rBasePC.i8p + (rPC.i << 3));     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:27
+    DISPATCH_OPCODE();
+
+OFFLINE_ASM_OPCODE_LABEL(op_del_by_val)
+    rPC.i8p = rBasePC.i8p + (rPC.i << 3);                    // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:241
+    t3.i = rBasePC.i;                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:242
+    {                                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:64
+        ExecState* exec = CAST<ExecState*>(cfr.vp);
+        Instruction* pc = CAST<Instruction*>(rPC.vp);
+        SlowPathReturnType result = llint_slow_path_del_by_val(exec, pc);
+        decodeResult(result, t0.instruction, t1.vp);
+    }
+    rPC.i = t0.i;                                            // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:246
+    cfr.i = t1.i;                                            // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:247
+    rBasePC.i = t3.i;                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:248
+    rPC.i = rPC.i - rBasePC.i;                               // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:249
+    rPC.i = rPC.i >> (intptr_t(0x3) & 0x1f);                 // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:250
+    rPC.i = rPC.i + intptr_t(0x4);                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:31
+    opcode = *CAST<Opcode*>(rBasePC.i8p + (rPC.i << 3));     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:27
+    DISPATCH_OPCODE();
+
+OFFLINE_ASM_OPCODE_LABEL(op_put_by_index)
+    rPC.i8p = rBasePC.i8p + (rPC.i << 3);                    // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:241
+    t3.i = rBasePC.i;                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:242
+    {                                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:64
+        ExecState* exec = CAST<ExecState*>(cfr.vp);
+        Instruction* pc = CAST<Instruction*>(rPC.vp);
+        SlowPathReturnType result = llint_slow_path_put_by_index(exec, pc);
+        decodeResult(result, t0.instruction, t1.vp);
+    }
+    rPC.i = t0.i;                                            // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:246
+    cfr.i = t1.i;                                            // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:247
+    rBasePC.i = t3.i;                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:248
+    rPC.i = rPC.i - rBasePC.i;                               // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:249
+    rPC.i = rPC.i >> (intptr_t(0x3) & 0x1f);                 // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:250
+    rPC.i = rPC.i + intptr_t(0x4);                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:31
+    opcode = *CAST<Opcode*>(rBasePC.i8p + (rPC.i << 3));     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:27
+    DISPATCH_OPCODE();
+
+OFFLINE_ASM_OPCODE_LABEL(op_put_getter_setter)
+    rPC.i8p = rBasePC.i8p + (rPC.i << 3);                    // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:241
+    t3.i = rBasePC.i;                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:242
+    {                                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:64
+        ExecState* exec = CAST<ExecState*>(cfr.vp);
+        Instruction* pc = CAST<Instruction*>(rPC.vp);
+        SlowPathReturnType result = llint_slow_path_put_getter_setter(exec, pc);
+        decodeResult(result, t0.instruction, t1.vp);
+    }
+    rPC.i = t0.i;                                            // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:246
+    cfr.i = t1.i;                                            // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:247
+    rBasePC.i = t3.i;                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:248
+    rPC.i = rPC.i - rBasePC.i;                               // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:249
+    rPC.i = rPC.i >> (intptr_t(0x3) & 0x1f);                 // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:250
+    rPC.i = rPC.i + intptr_t(0x5);                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:31
+    opcode = *CAST<Opcode*>(rBasePC.i8p + (rPC.i << 3));     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:27
+    DISPATCH_OPCODE();
+
+OFFLINE_ASM_OPCODE_LABEL(op_jtrue)
+    t1.i = *CAST<int32_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x8)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:94
+    if (t1.i >= intptr_t(0x40000000))                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:313
+        goto _offlineasm_jumpTrueOrFalse__87_loadConstantOrVariable__constant;
+    t0.i64 = *CAST<int64_t*>(cfr.i8p + (t1.i << 3));         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:314
+    goto _offlineasm_jumpTrueOrFalse__87_loadConstantOrVariable__done; // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:315
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_jumpTrueOrFalse__87_loadConstantOrVariable__constant)
+    t0.i = *CAST<intptr_t*>(cfr.i8p + 16);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:317
+    t0.i = *CAST<intptr_t*>(t0.i8p + 368);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:318
+    t1.i = t1.i - intptr_t(0x40000000);                      // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:319
+    t0.i64 = *CAST<int64_t*>(t0.i8p + (t1.i << 3));          // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:320
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_jumpTrueOrFalse__87_loadConstantOrVariable__done)
+    t0.i64 = t0.i64 ^ int64_t(0x6);                          // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1497
+    if ((t0.i64 & int64_t(-1)) != 0)                         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1498
+        goto _offlineasm_jumpTrueOrFalse__slow;
+    if (t0.i32 != 0)                                         // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:627
+        goto _offlineasm_jumpTrueOrFalse__target;
+    rPC.i = rPC.i + intptr_t(0x3);                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:31
+    opcode = *CAST<Opcode*>(rBasePC.i8p + (rPC.i << 3));     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:27
+    DISPATCH_OPCODE();
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_jumpTrueOrFalse__target)
+    rPC.i32 = rPC.i32 + *CAST<int32_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x10)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:36
+    rPC.clearHighWord();
+    opcode = *CAST<Opcode*>(rBasePC.i8p + (rPC.i << 3));     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:27
+    DISPATCH_OPCODE();
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_jumpTrueOrFalse__slow)
+    rPC.i8p = rBasePC.i8p + (rPC.i << 3);                    // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:241
+    t3.i = rBasePC.i;                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:242
+    {                                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:64
+        ExecState* exec = CAST<ExecState*>(cfr.vp);
+        Instruction* pc = CAST<Instruction*>(rPC.vp);
+        SlowPathReturnType result = llint_slow_path_jtrue(exec, pc);
+        decodeResult(result, t0.instruction, t1.vp);
+    }
+    rPC.i = t0.i;                                            // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:246
+    cfr.i = t1.i;                                            // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:247
+    rBasePC.i = t3.i;                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:248
+    rPC.i = rPC.i - rBasePC.i;                               // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:249
+    rPC.i = rPC.i >> (intptr_t(0x3) & 0x1f);                 // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:250
+    rPC.i = rPC.i + intptr_t(0x0);                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:31
+    opcode = *CAST<Opcode*>(rBasePC.i8p + (rPC.i << 3));     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:27
+    DISPATCH_OPCODE();
+
+OFFLINE_ASM_OPCODE_LABEL(op_jfalse)
+    t1.i = *CAST<int32_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x8)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:94
+    if (t1.i >= intptr_t(0x40000000))                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:313
+        goto _offlineasm_jumpTrueOrFalse__88_loadConstantOrVariable__constant;
+    t0.i64 = *CAST<int64_t*>(cfr.i8p + (t1.i << 3));         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:314
+    goto _offlineasm_jumpTrueOrFalse__88_loadConstantOrVariable__done; // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:315
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_jumpTrueOrFalse__88_loadConstantOrVariable__constant)
+    t0.i = *CAST<intptr_t*>(cfr.i8p + 16);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:317
+    t0.i = *CAST<intptr_t*>(t0.i8p + 368);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:318
+    t1.i = t1.i - intptr_t(0x40000000);                      // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:319
+    t0.i64 = *CAST<int64_t*>(t0.i8p + (t1.i << 3));          // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:320
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_jumpTrueOrFalse__88_loadConstantOrVariable__done)
+    t0.i64 = t0.i64 ^ int64_t(0x6);                          // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1497
+    if ((t0.i64 & int64_t(-1)) != 0)                         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1498
+        goto _offlineasm_88_jumpTrueOrFalse__slow;
+    if (t0.i32 == 0)                                         // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:634
+        goto _offlineasm_88_jumpTrueOrFalse__target;
+    rPC.i = rPC.i + intptr_t(0x3);                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:31
+    opcode = *CAST<Opcode*>(rBasePC.i8p + (rPC.i << 3));     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:27
+    DISPATCH_OPCODE();
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_88_jumpTrueOrFalse__target)
+    rPC.i32 = rPC.i32 + *CAST<int32_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x10)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:36
+    rPC.clearHighWord();
+    opcode = *CAST<Opcode*>(rBasePC.i8p + (rPC.i << 3));     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:27
+    DISPATCH_OPCODE();
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_88_jumpTrueOrFalse__slow)
+    rPC.i8p = rBasePC.i8p + (rPC.i << 3);                    // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:241
+    t3.i = rBasePC.i;                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:242
+    {                                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:64
+        ExecState* exec = CAST<ExecState*>(cfr.vp);
+        Instruction* pc = CAST<Instruction*>(rPC.vp);
+        SlowPathReturnType result = llint_slow_path_jfalse(exec, pc);
+        decodeResult(result, t0.instruction, t1.vp);
+    }
+    rPC.i = t0.i;                                            // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:246
+    cfr.i = t1.i;                                            // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:247
+    rBasePC.i = t3.i;                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:248
+    rPC.i = rPC.i - rBasePC.i;                               // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:249
+    rPC.i = rPC.i >> (intptr_t(0x3) & 0x1f);                 // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:250
+    rPC.i = rPC.i + intptr_t(0x0);                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:31
+    opcode = *CAST<Opcode*>(rBasePC.i8p + (rPC.i << 3));     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:27
+    DISPATCH_OPCODE();
+
+OFFLINE_ASM_OPCODE_LABEL(op_jless)
+    t2.i = *CAST<int32_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x8)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:94
+    t3.i = *CAST<int32_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x10)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:94
+    if (t2.i >= intptr_t(0x40000000))                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:313
+        goto _offlineasm_compare__89_loadConstantOrVariable__constant;
+    t0.i64 = *CAST<int64_t*>(cfr.i8p + (t2.i << 3));         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:314
+    goto _offlineasm_compare__89_loadConstantOrVariable__done; // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:315
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_compare__89_loadConstantOrVariable__constant)
+    t0.i = *CAST<intptr_t*>(cfr.i8p + 16);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:317
+    t0.i = *CAST<intptr_t*>(t0.i8p + 368);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:318
+    t2.i = t2.i - intptr_t(0x40000000);                      // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:319
+    t0.i64 = *CAST<int64_t*>(t0.i8p + (t2.i << 3));          // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:320
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_compare__89_loadConstantOrVariable__done)
+    if (t3.i >= intptr_t(0x40000000))                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:313
+        goto _offlineasm_compare__90_loadConstantOrVariable__constant;
+    t1.i64 = *CAST<int64_t*>(cfr.i8p + (t3.i << 3));         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:314
+    goto _offlineasm_compare__90_loadConstantOrVariable__done; // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:315
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_compare__90_loadConstantOrVariable__constant)
+    t1.i = *CAST<intptr_t*>(cfr.i8p + 16);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:317
+    t1.i = *CAST<intptr_t*>(t1.i8p + 368);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:318
+    t3.i = t3.i - intptr_t(0x40000000);                      // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:319
+    t1.i64 = *CAST<int64_t*>(t1.i8p + (t3.i << 3));          // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:320
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_compare__90_loadConstantOrVariable__done)
+    if (t0.u64 < tagTypeNumber.u64)                          // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1573
+        goto _offlineasm_compare__op1NotInt;
+    if (t1.u64 < tagTypeNumber.u64)                          // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1574
+        goto _offlineasm_compare__op2NotInt;
+    if (t0.i32 < t1.i32)                                     // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:641
+        goto _offlineasm_compare__jumpTarget;
+    rPC.i = rPC.i + intptr_t(0x4);                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:31
+    opcode = *CAST<Opcode*>(rBasePC.i8p + (rPC.i << 3));     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:27
+    DISPATCH_OPCODE();
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_compare__op1NotInt)
+    if ((t0.i64 & tagTypeNumber.i64) == 0)                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1579
+        goto _offlineasm_compare__slow;
+    if (t1.u64 < tagTypeNumber.u64)                          // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1580
+        goto _offlineasm_compare__op1NotIntOp2NotInt;
+    d1.d = t1.i32;                                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1581
+    goto _offlineasm_compare__op1NotIntReady;                // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1582
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_compare__op1NotIntOp2NotInt)
+    if ((t1.i64 & tagTypeNumber.i64) == 0)                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1584
+        goto _offlineasm_compare__slow;
+    t1.i64 = t1.i64 + tagTypeNumber.i64;                     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1585
+    d1.d = t1.castToDouble;                                  // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1586
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_compare__op1NotIntReady)
+    t0.i64 = t0.i64 + tagTypeNumber.i64;                     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1588
+    d0.d = t0.castToDouble;                                  // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1589
+    if (d0.d < d1.d)                                         // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:642
+        goto _offlineasm_compare__jumpTarget;
+    rPC.i = rPC.i + intptr_t(0x4);                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:31
+    opcode = *CAST<Opcode*>(rBasePC.i8p + (rPC.i << 3));     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:27
+    DISPATCH_OPCODE();
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_compare__op2NotInt)
+    d0.d = t0.i32;                                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1594
+    if ((t1.i64 & tagTypeNumber.i64) == 0)                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1595
+        goto _offlineasm_compare__slow;
+    t1.i64 = t1.i64 + tagTypeNumber.i64;                     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1596
+    d1.d = t1.castToDouble;                                  // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1597
+    if (d0.d < d1.d)                                         // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:642
+        goto _offlineasm_compare__jumpTarget;
+    rPC.i = rPC.i + intptr_t(0x4);                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:31
+    opcode = *CAST<Opcode*>(rBasePC.i8p + (rPC.i << 3));     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:27
+    DISPATCH_OPCODE();
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_compare__jumpTarget)
+    rPC.i32 = rPC.i32 + *CAST<int32_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x18)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:36
+    rPC.clearHighWord();
+    opcode = *CAST<Opcode*>(rBasePC.i8p + (rPC.i << 3));     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:27
+    DISPATCH_OPCODE();
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_compare__slow)
+    rPC.i8p = rBasePC.i8p + (rPC.i << 3);                    // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:241
+    t3.i = rBasePC.i;                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:242
+    {                                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:64
+        ExecState* exec = CAST<ExecState*>(cfr.vp);
+        Instruction* pc = CAST<Instruction*>(rPC.vp);
+        SlowPathReturnType result = llint_slow_path_jless(exec, pc);
+        decodeResult(result, t0.instruction, t1.vp);
+    }
+    rPC.i = t0.i;                                            // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:246
+    cfr.i = t1.i;                                            // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:247
+    rBasePC.i = t3.i;                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:248
+    rPC.i = rPC.i - rBasePC.i;                               // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:249
+    rPC.i = rPC.i >> (intptr_t(0x3) & 0x1f);                 // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:250
+    rPC.i = rPC.i + intptr_t(0x0);                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:31
+    opcode = *CAST<Opcode*>(rBasePC.i8p + (rPC.i << 3));     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:27
+    DISPATCH_OPCODE();
+
+OFFLINE_ASM_OPCODE_LABEL(op_jnless)
+    t2.i = *CAST<int32_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x8)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:94
+    t3.i = *CAST<int32_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x10)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:94
+    if (t2.i >= intptr_t(0x40000000))                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:313
+        goto _offlineasm_compare__91_loadConstantOrVariable__constant;
+    t0.i64 = *CAST<int64_t*>(cfr.i8p + (t2.i << 3));         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:314
+    goto _offlineasm_compare__91_loadConstantOrVariable__done; // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:315
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_compare__91_loadConstantOrVariable__constant)
+    t0.i = *CAST<intptr_t*>(cfr.i8p + 16);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:317
+    t0.i = *CAST<intptr_t*>(t0.i8p + 368);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:318
+    t2.i = t2.i - intptr_t(0x40000000);                      // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:319
+    t0.i64 = *CAST<int64_t*>(t0.i8p + (t2.i << 3));          // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:320
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_compare__91_loadConstantOrVariable__done)
+    if (t3.i >= intptr_t(0x40000000))                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:313
+        goto _offlineasm_compare__92_loadConstantOrVariable__constant;
+    t1.i64 = *CAST<int64_t*>(cfr.i8p + (t3.i << 3));         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:314
+    goto _offlineasm_compare__92_loadConstantOrVariable__done; // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:315
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_compare__92_loadConstantOrVariable__constant)
+    t1.i = *CAST<intptr_t*>(cfr.i8p + 16);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:317
+    t1.i = *CAST<intptr_t*>(t1.i8p + 368);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:318
+    t3.i = t3.i - intptr_t(0x40000000);                      // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:319
+    t1.i64 = *CAST<int64_t*>(t1.i8p + (t3.i << 3));          // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:320
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_compare__92_loadConstantOrVariable__done)
+    if (t0.u64 < tagTypeNumber.u64)                          // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1573
+        goto _offlineasm_92_compare__op1NotInt;
+    if (t1.u64 < tagTypeNumber.u64)                          // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1574
+        goto _offlineasm_92_compare__op2NotInt;
+    if (t0.i32 >= t1.i32)                                    // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:649
+        goto _offlineasm_92_compare__jumpTarget;
+    rPC.i = rPC.i + intptr_t(0x4);                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:31
+    opcode = *CAST<Opcode*>(rBasePC.i8p + (rPC.i << 3));     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:27
+    DISPATCH_OPCODE();
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_92_compare__op1NotInt)
+    if ((t0.i64 & tagTypeNumber.i64) == 0)                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1579
+        goto _offlineasm_92_compare__slow;
+    if (t1.u64 < tagTypeNumber.u64)                          // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1580
+        goto _offlineasm_92_compare__op1NotIntOp2NotInt;
+    d1.d = t1.i32;                                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1581
+    goto _offlineasm_92_compare__op1NotIntReady;             // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1582
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_92_compare__op1NotIntOp2NotInt)
+    if ((t1.i64 & tagTypeNumber.i64) == 0)                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1584
+        goto _offlineasm_92_compare__slow;
+    t1.i64 = t1.i64 + tagTypeNumber.i64;                     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1585
+    d1.d = t1.castToDouble;                                  // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1586
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_92_compare__op1NotIntReady)
+    t0.i64 = t0.i64 + tagTypeNumber.i64;                     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1588
+    d0.d = t0.castToDouble;                                  // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1589
+    if (std::isnan(d0.d) || std::isnan(d1.d)                 // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:650
+        || (d0.d >= d1.d))
+        goto _offlineasm_92_compare__jumpTarget;
+    rPC.i = rPC.i + intptr_t(0x4);                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:31
+    opcode = *CAST<Opcode*>(rBasePC.i8p + (rPC.i << 3));     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:27
+    DISPATCH_OPCODE();
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_92_compare__op2NotInt)
+    d0.d = t0.i32;                                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1594
+    if ((t1.i64 & tagTypeNumber.i64) == 0)                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1595
+        goto _offlineasm_92_compare__slow;
+    t1.i64 = t1.i64 + tagTypeNumber.i64;                     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1596
+    d1.d = t1.castToDouble;                                  // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1597
+    if (std::isnan(d0.d) || std::isnan(d1.d)                 // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:650
+        || (d0.d >= d1.d))
+        goto _offlineasm_92_compare__jumpTarget;
+    rPC.i = rPC.i + intptr_t(0x4);                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:31
+    opcode = *CAST<Opcode*>(rBasePC.i8p + (rPC.i << 3));     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:27
+    DISPATCH_OPCODE();
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_92_compare__jumpTarget)
+    rPC.i32 = rPC.i32 + *CAST<int32_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x18)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:36
+    rPC.clearHighWord();
+    opcode = *CAST<Opcode*>(rBasePC.i8p + (rPC.i << 3));     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:27
+    DISPATCH_OPCODE();
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_92_compare__slow)
+    rPC.i8p = rBasePC.i8p + (rPC.i << 3);                    // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:241
+    t3.i = rBasePC.i;                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:242
+    {                                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:64
+        ExecState* exec = CAST<ExecState*>(cfr.vp);
+        Instruction* pc = CAST<Instruction*>(rPC.vp);
+        SlowPathReturnType result = llint_slow_path_jnless(exec, pc);
+        decodeResult(result, t0.instruction, t1.vp);
+    }
+    rPC.i = t0.i;                                            // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:246
+    cfr.i = t1.i;                                            // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:247
+    rBasePC.i = t3.i;                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:248
+    rPC.i = rPC.i - rBasePC.i;                               // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:249
+    rPC.i = rPC.i >> (intptr_t(0x3) & 0x1f);                 // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:250
+    rPC.i = rPC.i + intptr_t(0x0);                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:31
+    opcode = *CAST<Opcode*>(rBasePC.i8p + (rPC.i << 3));     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:27
+    DISPATCH_OPCODE();
+
+OFFLINE_ASM_OPCODE_LABEL(op_jgreater)
+    t2.i = *CAST<int32_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x8)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:94
+    t3.i = *CAST<int32_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x10)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:94
+    if (t2.i >= intptr_t(0x40000000))                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:313
+        goto _offlineasm_compare__93_loadConstantOrVariable__constant;
+    t0.i64 = *CAST<int64_t*>(cfr.i8p + (t2.i << 3));         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:314
+    goto _offlineasm_compare__93_loadConstantOrVariable__done; // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:315
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_compare__93_loadConstantOrVariable__constant)
+    t0.i = *CAST<intptr_t*>(cfr.i8p + 16);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:317
+    t0.i = *CAST<intptr_t*>(t0.i8p + 368);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:318
+    t2.i = t2.i - intptr_t(0x40000000);                      // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:319
+    t0.i64 = *CAST<int64_t*>(t0.i8p + (t2.i << 3));          // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:320
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_compare__93_loadConstantOrVariable__done)
+    if (t3.i >= intptr_t(0x40000000))                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:313
+        goto _offlineasm_compare__94_loadConstantOrVariable__constant;
+    t1.i64 = *CAST<int64_t*>(cfr.i8p + (t3.i << 3));         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:314
+    goto _offlineasm_compare__94_loadConstantOrVariable__done; // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:315
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_compare__94_loadConstantOrVariable__constant)
+    t1.i = *CAST<intptr_t*>(cfr.i8p + 16);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:317
+    t1.i = *CAST<intptr_t*>(t1.i8p + 368);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:318
+    t3.i = t3.i - intptr_t(0x40000000);                      // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:319
+    t1.i64 = *CAST<int64_t*>(t1.i8p + (t3.i << 3));          // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:320
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_compare__94_loadConstantOrVariable__done)
+    if (t0.u64 < tagTypeNumber.u64)                          // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1573
+        goto _offlineasm_94_compare__op1NotInt;
+    if (t1.u64 < tagTypeNumber.u64)                          // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1574
+        goto _offlineasm_94_compare__op2NotInt;
+    if (t0.i32 > t1.i32)                                     // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:657
+        goto _offlineasm_94_compare__jumpTarget;
+    rPC.i = rPC.i + intptr_t(0x4);                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:31
+    opcode = *CAST<Opcode*>(rBasePC.i8p + (rPC.i << 3));     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:27
+    DISPATCH_OPCODE();
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_94_compare__op1NotInt)
+    if ((t0.i64 & tagTypeNumber.i64) == 0)                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1579
+        goto _offlineasm_94_compare__slow;
+    if (t1.u64 < tagTypeNumber.u64)                          // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1580
+        goto _offlineasm_94_compare__op1NotIntOp2NotInt;
+    d1.d = t1.i32;                                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1581
+    goto _offlineasm_94_compare__op1NotIntReady;             // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1582
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_94_compare__op1NotIntOp2NotInt)
+    if ((t1.i64 & tagTypeNumber.i64) == 0)                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1584
+        goto _offlineasm_94_compare__slow;
+    t1.i64 = t1.i64 + tagTypeNumber.i64;                     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1585
+    d1.d = t1.castToDouble;                                  // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1586
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_94_compare__op1NotIntReady)
+    t0.i64 = t0.i64 + tagTypeNumber.i64;                     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1588
+    d0.d = t0.castToDouble;                                  // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1589
+    if (d0.d > d1.d)                                         // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:658
+        goto _offlineasm_94_compare__jumpTarget;
+    rPC.i = rPC.i + intptr_t(0x4);                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:31
+    opcode = *CAST<Opcode*>(rBasePC.i8p + (rPC.i << 3));     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:27
+    DISPATCH_OPCODE();
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_94_compare__op2NotInt)
+    d0.d = t0.i32;                                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1594
+    if ((t1.i64 & tagTypeNumber.i64) == 0)                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1595
+        goto _offlineasm_94_compare__slow;
+    t1.i64 = t1.i64 + tagTypeNumber.i64;                     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1596
+    d1.d = t1.castToDouble;                                  // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1597
+    if (d0.d > d1.d)                                         // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:658
+        goto _offlineasm_94_compare__jumpTarget;
+    rPC.i = rPC.i + intptr_t(0x4);                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:31
+    opcode = *CAST<Opcode*>(rBasePC.i8p + (rPC.i << 3));     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:27
+    DISPATCH_OPCODE();
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_94_compare__jumpTarget)
+    rPC.i32 = rPC.i32 + *CAST<int32_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x18)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:36
+    rPC.clearHighWord();
+    opcode = *CAST<Opcode*>(rBasePC.i8p + (rPC.i << 3));     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:27
+    DISPATCH_OPCODE();
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_94_compare__slow)
+    rPC.i8p = rBasePC.i8p + (rPC.i << 3);                    // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:241
+    t3.i = rBasePC.i;                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:242
+    {                                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:64
+        ExecState* exec = CAST<ExecState*>(cfr.vp);
+        Instruction* pc = CAST<Instruction*>(rPC.vp);
+        SlowPathReturnType result = llint_slow_path_jgreater(exec, pc);
+        decodeResult(result, t0.instruction, t1.vp);
+    }
+    rPC.i = t0.i;                                            // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:246
+    cfr.i = t1.i;                                            // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:247
+    rBasePC.i = t3.i;                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:248
+    rPC.i = rPC.i - rBasePC.i;                               // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:249
+    rPC.i = rPC.i >> (intptr_t(0x3) & 0x1f);                 // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:250
+    rPC.i = rPC.i + intptr_t(0x0);                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:31
+    opcode = *CAST<Opcode*>(rBasePC.i8p + (rPC.i << 3));     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:27
+    DISPATCH_OPCODE();
+
+OFFLINE_ASM_OPCODE_LABEL(op_jngreater)
+    t2.i = *CAST<int32_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x8)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:94
+    t3.i = *CAST<int32_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x10)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:94
+    if (t2.i >= intptr_t(0x40000000))                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:313
+        goto _offlineasm_compare__95_loadConstantOrVariable__constant;
+    t0.i64 = *CAST<int64_t*>(cfr.i8p + (t2.i << 3));         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:314
+    goto _offlineasm_compare__95_loadConstantOrVariable__done; // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:315
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_compare__95_loadConstantOrVariable__constant)
+    t0.i = *CAST<intptr_t*>(cfr.i8p + 16);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:317
+    t0.i = *CAST<intptr_t*>(t0.i8p + 368);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:318
+    t2.i = t2.i - intptr_t(0x40000000);                      // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:319
+    t0.i64 = *CAST<int64_t*>(t0.i8p + (t2.i << 3));          // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:320
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_compare__95_loadConstantOrVariable__done)
+    if (t3.i >= intptr_t(0x40000000))                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:313
+        goto _offlineasm_compare__96_loadConstantOrVariable__constant;
+    t1.i64 = *CAST<int64_t*>(cfr.i8p + (t3.i << 3));         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:314
+    goto _offlineasm_compare__96_loadConstantOrVariable__done; // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:315
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_compare__96_loadConstantOrVariable__constant)
+    t1.i = *CAST<intptr_t*>(cfr.i8p + 16);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:317
+    t1.i = *CAST<intptr_t*>(t1.i8p + 368);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:318
+    t3.i = t3.i - intptr_t(0x40000000);                      // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:319
+    t1.i64 = *CAST<int64_t*>(t1.i8p + (t3.i << 3));          // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:320
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_compare__96_loadConstantOrVariable__done)
+    if (t0.u64 < tagTypeNumber.u64)                          // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1573
+        goto _offlineasm_96_compare__op1NotInt;
+    if (t1.u64 < tagTypeNumber.u64)                          // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1574
+        goto _offlineasm_96_compare__op2NotInt;
+    if (t0.i32 <= t1.i32)                                    // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:665
+        goto _offlineasm_96_compare__jumpTarget;
+    rPC.i = rPC.i + intptr_t(0x4);                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:31
+    opcode = *CAST<Opcode*>(rBasePC.i8p + (rPC.i << 3));     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:27
+    DISPATCH_OPCODE();
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_96_compare__op1NotInt)
+    if ((t0.i64 & tagTypeNumber.i64) == 0)                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1579
+        goto _offlineasm_96_compare__slow;
+    if (t1.u64 < tagTypeNumber.u64)                          // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1580
+        goto _offlineasm_96_compare__op1NotIntOp2NotInt;
+    d1.d = t1.i32;                                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1581
+    goto _offlineasm_96_compare__op1NotIntReady;             // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1582
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_96_compare__op1NotIntOp2NotInt)
+    if ((t1.i64 & tagTypeNumber.i64) == 0)                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1584
+        goto _offlineasm_96_compare__slow;
+    t1.i64 = t1.i64 + tagTypeNumber.i64;                     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1585
+    d1.d = t1.castToDouble;                                  // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1586
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_96_compare__op1NotIntReady)
+    t0.i64 = t0.i64 + tagTypeNumber.i64;                     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1588
+    d0.d = t0.castToDouble;                                  // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1589
+    if (std::isnan(d0.d) || std::isnan(d1.d)                 // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:666
+        || (d0.d <= d1.d))
+        goto _offlineasm_96_compare__jumpTarget;
+    rPC.i = rPC.i + intptr_t(0x4);                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:31
+    opcode = *CAST<Opcode*>(rBasePC.i8p + (rPC.i << 3));     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:27
+    DISPATCH_OPCODE();
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_96_compare__op2NotInt)
+    d0.d = t0.i32;                                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1594
+    if ((t1.i64 & tagTypeNumber.i64) == 0)                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1595
+        goto _offlineasm_96_compare__slow;
+    t1.i64 = t1.i64 + tagTypeNumber.i64;                     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1596
+    d1.d = t1.castToDouble;                                  // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1597
+    if (std::isnan(d0.d) || std::isnan(d1.d)                 // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:666
+        || (d0.d <= d1.d))
+        goto _offlineasm_96_compare__jumpTarget;
+    rPC.i = rPC.i + intptr_t(0x4);                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:31
+    opcode = *CAST<Opcode*>(rBasePC.i8p + (rPC.i << 3));     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:27
+    DISPATCH_OPCODE();
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_96_compare__jumpTarget)
+    rPC.i32 = rPC.i32 + *CAST<int32_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x18)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:36
+    rPC.clearHighWord();
+    opcode = *CAST<Opcode*>(rBasePC.i8p + (rPC.i << 3));     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:27
+    DISPATCH_OPCODE();
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_96_compare__slow)
+    rPC.i8p = rBasePC.i8p + (rPC.i << 3);                    // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:241
+    t3.i = rBasePC.i;                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:242
+    {                                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:64
+        ExecState* exec = CAST<ExecState*>(cfr.vp);
+        Instruction* pc = CAST<Instruction*>(rPC.vp);
+        SlowPathReturnType result = llint_slow_path_jngreater(exec, pc);
+        decodeResult(result, t0.instruction, t1.vp);
+    }
+    rPC.i = t0.i;                                            // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:246
+    cfr.i = t1.i;                                            // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:247
+    rBasePC.i = t3.i;                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:248
+    rPC.i = rPC.i - rBasePC.i;                               // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:249
+    rPC.i = rPC.i >> (intptr_t(0x3) & 0x1f);                 // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:250
+    rPC.i = rPC.i + intptr_t(0x0);                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:31
+    opcode = *CAST<Opcode*>(rBasePC.i8p + (rPC.i << 3));     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:27
+    DISPATCH_OPCODE();
+
+OFFLINE_ASM_OPCODE_LABEL(op_jlesseq)
+    t2.i = *CAST<int32_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x8)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:94
+    t3.i = *CAST<int32_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x10)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:94
+    if (t2.i >= intptr_t(0x40000000))                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:313
+        goto _offlineasm_compare__97_loadConstantOrVariable__constant;
+    t0.i64 = *CAST<int64_t*>(cfr.i8p + (t2.i << 3));         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:314
+    goto _offlineasm_compare__97_loadConstantOrVariable__done; // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:315
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_compare__97_loadConstantOrVariable__constant)
+    t0.i = *CAST<intptr_t*>(cfr.i8p + 16);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:317
+    t0.i = *CAST<intptr_t*>(t0.i8p + 368);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:318
+    t2.i = t2.i - intptr_t(0x40000000);                      // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:319
+    t0.i64 = *CAST<int64_t*>(t0.i8p + (t2.i << 3));          // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:320
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_compare__97_loadConstantOrVariable__done)
+    if (t3.i >= intptr_t(0x40000000))                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:313
+        goto _offlineasm_compare__98_loadConstantOrVariable__constant;
+    t1.i64 = *CAST<int64_t*>(cfr.i8p + (t3.i << 3));         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:314
+    goto _offlineasm_compare__98_loadConstantOrVariable__done; // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:315
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_compare__98_loadConstantOrVariable__constant)
+    t1.i = *CAST<intptr_t*>(cfr.i8p + 16);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:317
+    t1.i = *CAST<intptr_t*>(t1.i8p + 368);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:318
+    t3.i = t3.i - intptr_t(0x40000000);                      // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:319
+    t1.i64 = *CAST<int64_t*>(t1.i8p + (t3.i << 3));          // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:320
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_compare__98_loadConstantOrVariable__done)
+    if (t0.u64 < tagTypeNumber.u64)                          // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1573
+        goto _offlineasm_98_compare__op1NotInt;
+    if (t1.u64 < tagTypeNumber.u64)                          // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1574
+        goto _offlineasm_98_compare__op2NotInt;
+    if (t0.i32 <= t1.i32)                                    // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:673
+        goto _offlineasm_98_compare__jumpTarget;
+    rPC.i = rPC.i + intptr_t(0x4);                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:31
+    opcode = *CAST<Opcode*>(rBasePC.i8p + (rPC.i << 3));     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:27
+    DISPATCH_OPCODE();
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_98_compare__op1NotInt)
+    if ((t0.i64 & tagTypeNumber.i64) == 0)                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1579
+        goto _offlineasm_98_compare__slow;
+    if (t1.u64 < tagTypeNumber.u64)                          // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1580
+        goto _offlineasm_98_compare__op1NotIntOp2NotInt;
+    d1.d = t1.i32;                                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1581
+    goto _offlineasm_98_compare__op1NotIntReady;             // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1582
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_98_compare__op1NotIntOp2NotInt)
+    if ((t1.i64 & tagTypeNumber.i64) == 0)                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1584
+        goto _offlineasm_98_compare__slow;
+    t1.i64 = t1.i64 + tagTypeNumber.i64;                     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1585
+    d1.d = t1.castToDouble;                                  // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1586
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_98_compare__op1NotIntReady)
+    t0.i64 = t0.i64 + tagTypeNumber.i64;                     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1588
+    d0.d = t0.castToDouble;                                  // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1589
+    if (d0.d <= d1.d)                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:674
+        goto _offlineasm_98_compare__jumpTarget;
+    rPC.i = rPC.i + intptr_t(0x4);                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:31
+    opcode = *CAST<Opcode*>(rBasePC.i8p + (rPC.i << 3));     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:27
+    DISPATCH_OPCODE();
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_98_compare__op2NotInt)
+    d0.d = t0.i32;                                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1594
+    if ((t1.i64 & tagTypeNumber.i64) == 0)                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1595
+        goto _offlineasm_98_compare__slow;
+    t1.i64 = t1.i64 + tagTypeNumber.i64;                     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1596
+    d1.d = t1.castToDouble;                                  // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1597
+    if (d0.d <= d1.d)                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:674
+        goto _offlineasm_98_compare__jumpTarget;
+    rPC.i = rPC.i + intptr_t(0x4);                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:31
+    opcode = *CAST<Opcode*>(rBasePC.i8p + (rPC.i << 3));     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:27
+    DISPATCH_OPCODE();
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_98_compare__jumpTarget)
+    rPC.i32 = rPC.i32 + *CAST<int32_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x18)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:36
+    rPC.clearHighWord();
+    opcode = *CAST<Opcode*>(rBasePC.i8p + (rPC.i << 3));     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:27
+    DISPATCH_OPCODE();
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_98_compare__slow)
+    rPC.i8p = rBasePC.i8p + (rPC.i << 3);                    // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:241
+    t3.i = rBasePC.i;                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:242
+    {                                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:64
+        ExecState* exec = CAST<ExecState*>(cfr.vp);
+        Instruction* pc = CAST<Instruction*>(rPC.vp);
+        SlowPathReturnType result = llint_slow_path_jlesseq(exec, pc);
+        decodeResult(result, t0.instruction, t1.vp);
+    }
+    rPC.i = t0.i;                                            // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:246
+    cfr.i = t1.i;                                            // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:247
+    rBasePC.i = t3.i;                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:248
+    rPC.i = rPC.i - rBasePC.i;                               // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:249
+    rPC.i = rPC.i >> (intptr_t(0x3) & 0x1f);                 // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:250
+    rPC.i = rPC.i + intptr_t(0x0);                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:31
+    opcode = *CAST<Opcode*>(rBasePC.i8p + (rPC.i << 3));     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:27
+    DISPATCH_OPCODE();
+
+OFFLINE_ASM_OPCODE_LABEL(op_jnlesseq)
+    t2.i = *CAST<int32_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x8)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:94
+    t3.i = *CAST<int32_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x10)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:94
+    if (t2.i >= intptr_t(0x40000000))                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:313
+        goto _offlineasm_compare__99_loadConstantOrVariable__constant;
+    t0.i64 = *CAST<int64_t*>(cfr.i8p + (t2.i << 3));         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:314
+    goto _offlineasm_compare__99_loadConstantOrVariable__done; // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:315
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_compare__99_loadConstantOrVariable__constant)
+    t0.i = *CAST<intptr_t*>(cfr.i8p + 16);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:317
+    t0.i = *CAST<intptr_t*>(t0.i8p + 368);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:318
+    t2.i = t2.i - intptr_t(0x40000000);                      // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:319
+    t0.i64 = *CAST<int64_t*>(t0.i8p + (t2.i << 3));          // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:320
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_compare__99_loadConstantOrVariable__done)
+    if (t3.i >= intptr_t(0x40000000))                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:313
+        goto _offlineasm_compare__100_loadConstantOrVariable__constant;
+    t1.i64 = *CAST<int64_t*>(cfr.i8p + (t3.i << 3));         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:314
+    goto _offlineasm_compare__100_loadConstantOrVariable__done; // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:315
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_compare__100_loadConstantOrVariable__constant)
+    t1.i = *CAST<intptr_t*>(cfr.i8p + 16);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:317
+    t1.i = *CAST<intptr_t*>(t1.i8p + 368);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:318
+    t3.i = t3.i - intptr_t(0x40000000);                      // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:319
+    t1.i64 = *CAST<int64_t*>(t1.i8p + (t3.i << 3));          // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:320
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_compare__100_loadConstantOrVariable__done)
+    if (t0.u64 < tagTypeNumber.u64)                          // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1573
+        goto _offlineasm_100_compare__op1NotInt;
+    if (t1.u64 < tagTypeNumber.u64)                          // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1574
+        goto _offlineasm_100_compare__op2NotInt;
+    if (t0.i32 > t1.i32)                                     // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:681
+        goto _offlineasm_100_compare__jumpTarget;
+    rPC.i = rPC.i + intptr_t(0x4);                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:31
+    opcode = *CAST<Opcode*>(rBasePC.i8p + (rPC.i << 3));     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:27
+    DISPATCH_OPCODE();
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_100_compare__op1NotInt)
+    if ((t0.i64 & tagTypeNumber.i64) == 0)                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1579
+        goto _offlineasm_100_compare__slow;
+    if (t1.u64 < tagTypeNumber.u64)                          // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1580
+        goto _offlineasm_100_compare__op1NotIntOp2NotInt;
+    d1.d = t1.i32;                                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1581
+    goto _offlineasm_100_compare__op1NotIntReady;            // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1582
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_100_compare__op1NotIntOp2NotInt)
+    if ((t1.i64 & tagTypeNumber.i64) == 0)                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1584
+        goto _offlineasm_100_compare__slow;
+    t1.i64 = t1.i64 + tagTypeNumber.i64;                     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1585
+    d1.d = t1.castToDouble;                                  // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1586
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_100_compare__op1NotIntReady)
+    t0.i64 = t0.i64 + tagTypeNumber.i64;                     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1588
+    d0.d = t0.castToDouble;                                  // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1589
+    if (std::isnan(d0.d) || std::isnan(d1.d)                 // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:682
+        || (d0.d > d1.d))
+        goto _offlineasm_100_compare__jumpTarget;
+    rPC.i = rPC.i + intptr_t(0x4);                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:31
+    opcode = *CAST<Opcode*>(rBasePC.i8p + (rPC.i << 3));     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:27
+    DISPATCH_OPCODE();
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_100_compare__op2NotInt)
+    d0.d = t0.i32;                                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1594
+    if ((t1.i64 & tagTypeNumber.i64) == 0)                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1595
+        goto _offlineasm_100_compare__slow;
+    t1.i64 = t1.i64 + tagTypeNumber.i64;                     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1596
+    d1.d = t1.castToDouble;                                  // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1597
+    if (std::isnan(d0.d) || std::isnan(d1.d)                 // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:682
+        || (d0.d > d1.d))
+        goto _offlineasm_100_compare__jumpTarget;
+    rPC.i = rPC.i + intptr_t(0x4);                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:31
+    opcode = *CAST<Opcode*>(rBasePC.i8p + (rPC.i << 3));     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:27
+    DISPATCH_OPCODE();
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_100_compare__jumpTarget)
+    rPC.i32 = rPC.i32 + *CAST<int32_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x18)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:36
+    rPC.clearHighWord();
+    opcode = *CAST<Opcode*>(rBasePC.i8p + (rPC.i << 3));     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:27
+    DISPATCH_OPCODE();
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_100_compare__slow)
+    rPC.i8p = rBasePC.i8p + (rPC.i << 3);                    // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:241
+    t3.i = rBasePC.i;                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:242
+    {                                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:64
+        ExecState* exec = CAST<ExecState*>(cfr.vp);
+        Instruction* pc = CAST<Instruction*>(rPC.vp);
+        SlowPathReturnType result = llint_slow_path_jnlesseq(exec, pc);
+        decodeResult(result, t0.instruction, t1.vp);
+    }
+    rPC.i = t0.i;                                            // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:246
+    cfr.i = t1.i;                                            // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:247
+    rBasePC.i = t3.i;                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:248
+    rPC.i = rPC.i - rBasePC.i;                               // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:249
+    rPC.i = rPC.i >> (intptr_t(0x3) & 0x1f);                 // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:250
+    rPC.i = rPC.i + intptr_t(0x0);                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:31
+    opcode = *CAST<Opcode*>(rBasePC.i8p + (rPC.i << 3));     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:27
+    DISPATCH_OPCODE();
+
+OFFLINE_ASM_OPCODE_LABEL(op_jgreatereq)
+    t2.i = *CAST<int32_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x8)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:94
+    t3.i = *CAST<int32_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x10)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:94
+    if (t2.i >= intptr_t(0x40000000))                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:313
+        goto _offlineasm_compare__101_loadConstantOrVariable__constant;
+    t0.i64 = *CAST<int64_t*>(cfr.i8p + (t2.i << 3));         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:314
+    goto _offlineasm_compare__101_loadConstantOrVariable__done; // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:315
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_compare__101_loadConstantOrVariable__constant)
+    t0.i = *CAST<intptr_t*>(cfr.i8p + 16);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:317
+    t0.i = *CAST<intptr_t*>(t0.i8p + 368);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:318
+    t2.i = t2.i - intptr_t(0x40000000);                      // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:319
+    t0.i64 = *CAST<int64_t*>(t0.i8p + (t2.i << 3));          // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:320
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_compare__101_loadConstantOrVariable__done)
+    if (t3.i >= intptr_t(0x40000000))                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:313
+        goto _offlineasm_compare__102_loadConstantOrVariable__constant;
+    t1.i64 = *CAST<int64_t*>(cfr.i8p + (t3.i << 3));         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:314
+    goto _offlineasm_compare__102_loadConstantOrVariable__done; // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:315
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_compare__102_loadConstantOrVariable__constant)
+    t1.i = *CAST<intptr_t*>(cfr.i8p + 16);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:317
+    t1.i = *CAST<intptr_t*>(t1.i8p + 368);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:318
+    t3.i = t3.i - intptr_t(0x40000000);                      // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:319
+    t1.i64 = *CAST<int64_t*>(t1.i8p + (t3.i << 3));          // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:320
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_compare__102_loadConstantOrVariable__done)
+    if (t0.u64 < tagTypeNumber.u64)                          // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1573
+        goto _offlineasm_102_compare__op1NotInt;
+    if (t1.u64 < tagTypeNumber.u64)                          // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1574
+        goto _offlineasm_102_compare__op2NotInt;
+    if (t0.i32 >= t1.i32)                                    // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:689
+        goto _offlineasm_102_compare__jumpTarget;
+    rPC.i = rPC.i + intptr_t(0x4);                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:31
+    opcode = *CAST<Opcode*>(rBasePC.i8p + (rPC.i << 3));     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:27
+    DISPATCH_OPCODE();
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_102_compare__op1NotInt)
+    if ((t0.i64 & tagTypeNumber.i64) == 0)                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1579
+        goto _offlineasm_102_compare__slow;
+    if (t1.u64 < tagTypeNumber.u64)                          // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1580
+        goto _offlineasm_102_compare__op1NotIntOp2NotInt;
+    d1.d = t1.i32;                                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1581
+    goto _offlineasm_102_compare__op1NotIntReady;            // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1582
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_102_compare__op1NotIntOp2NotInt)
+    if ((t1.i64 & tagTypeNumber.i64) == 0)                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1584
+        goto _offlineasm_102_compare__slow;
+    t1.i64 = t1.i64 + tagTypeNumber.i64;                     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1585
+    d1.d = t1.castToDouble;                                  // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1586
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_102_compare__op1NotIntReady)
+    t0.i64 = t0.i64 + tagTypeNumber.i64;                     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1588
+    d0.d = t0.castToDouble;                                  // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1589
+    if (d0.d >= d1.d)                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:690
+        goto _offlineasm_102_compare__jumpTarget;
+    rPC.i = rPC.i + intptr_t(0x4);                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:31
+    opcode = *CAST<Opcode*>(rBasePC.i8p + (rPC.i << 3));     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:27
+    DISPATCH_OPCODE();
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_102_compare__op2NotInt)
+    d0.d = t0.i32;                                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1594
+    if ((t1.i64 & tagTypeNumber.i64) == 0)                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1595
+        goto _offlineasm_102_compare__slow;
+    t1.i64 = t1.i64 + tagTypeNumber.i64;                     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1596
+    d1.d = t1.castToDouble;                                  // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1597
+    if (d0.d >= d1.d)                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:690
+        goto _offlineasm_102_compare__jumpTarget;
+    rPC.i = rPC.i + intptr_t(0x4);                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:31
+    opcode = *CAST<Opcode*>(rBasePC.i8p + (rPC.i << 3));     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:27
+    DISPATCH_OPCODE();
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_102_compare__jumpTarget)
+    rPC.i32 = rPC.i32 + *CAST<int32_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x18)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:36
+    rPC.clearHighWord();
+    opcode = *CAST<Opcode*>(rBasePC.i8p + (rPC.i << 3));     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:27
+    DISPATCH_OPCODE();
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_102_compare__slow)
+    rPC.i8p = rBasePC.i8p + (rPC.i << 3);                    // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:241
+    t3.i = rBasePC.i;                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:242
+    {                                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:64
+        ExecState* exec = CAST<ExecState*>(cfr.vp);
+        Instruction* pc = CAST<Instruction*>(rPC.vp);
+        SlowPathReturnType result = llint_slow_path_jgreatereq(exec, pc);
+        decodeResult(result, t0.instruction, t1.vp);
+    }
+    rPC.i = t0.i;                                            // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:246
+    cfr.i = t1.i;                                            // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:247
+    rBasePC.i = t3.i;                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:248
+    rPC.i = rPC.i - rBasePC.i;                               // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:249
+    rPC.i = rPC.i >> (intptr_t(0x3) & 0x1f);                 // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:250
+    rPC.i = rPC.i + intptr_t(0x0);                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:31
+    opcode = *CAST<Opcode*>(rBasePC.i8p + (rPC.i << 3));     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:27
+    DISPATCH_OPCODE();
+
+OFFLINE_ASM_OPCODE_LABEL(op_jngreatereq)
+    t2.i = *CAST<int32_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x8)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:94
+    t3.i = *CAST<int32_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x10)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:94
+    if (t2.i >= intptr_t(0x40000000))                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:313
+        goto _offlineasm_compare__103_loadConstantOrVariable__constant;
+    t0.i64 = *CAST<int64_t*>(cfr.i8p + (t2.i << 3));         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:314
+    goto _offlineasm_compare__103_loadConstantOrVariable__done; // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:315
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_compare__103_loadConstantOrVariable__constant)
+    t0.i = *CAST<intptr_t*>(cfr.i8p + 16);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:317
+    t0.i = *CAST<intptr_t*>(t0.i8p + 368);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:318
+    t2.i = t2.i - intptr_t(0x40000000);                      // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:319
+    t0.i64 = *CAST<int64_t*>(t0.i8p + (t2.i << 3));          // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:320
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_compare__103_loadConstantOrVariable__done)
+    if (t3.i >= intptr_t(0x40000000))                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:313
+        goto _offlineasm_compare__104_loadConstantOrVariable__constant;
+    t1.i64 = *CAST<int64_t*>(cfr.i8p + (t3.i << 3));         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:314
+    goto _offlineasm_compare__104_loadConstantOrVariable__done; // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:315
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_compare__104_loadConstantOrVariable__constant)
+    t1.i = *CAST<intptr_t*>(cfr.i8p + 16);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:317
+    t1.i = *CAST<intptr_t*>(t1.i8p + 368);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:318
+    t3.i = t3.i - intptr_t(0x40000000);                      // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:319
+    t1.i64 = *CAST<int64_t*>(t1.i8p + (t3.i << 3));          // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:320
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_compare__104_loadConstantOrVariable__done)
+    if (t0.u64 < tagTypeNumber.u64)                          // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1573
+        goto _offlineasm_104_compare__op1NotInt;
+    if (t1.u64 < tagTypeNumber.u64)                          // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1574
+        goto _offlineasm_104_compare__op2NotInt;
+    if (t0.i32 < t1.i32)                                     // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:697
+        goto _offlineasm_104_compare__jumpTarget;
+    rPC.i = rPC.i + intptr_t(0x4);                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:31
+    opcode = *CAST<Opcode*>(rBasePC.i8p + (rPC.i << 3));     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:27
+    DISPATCH_OPCODE();
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_104_compare__op1NotInt)
+    if ((t0.i64 & tagTypeNumber.i64) == 0)                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1579
+        goto _offlineasm_104_compare__slow;
+    if (t1.u64 < tagTypeNumber.u64)                          // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1580
+        goto _offlineasm_104_compare__op1NotIntOp2NotInt;
+    d1.d = t1.i32;                                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1581
+    goto _offlineasm_104_compare__op1NotIntReady;            // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1582
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_104_compare__op1NotIntOp2NotInt)
+    if ((t1.i64 & tagTypeNumber.i64) == 0)                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1584
+        goto _offlineasm_104_compare__slow;
+    t1.i64 = t1.i64 + tagTypeNumber.i64;                     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1585
+    d1.d = t1.castToDouble;                                  // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1586
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_104_compare__op1NotIntReady)
+    t0.i64 = t0.i64 + tagTypeNumber.i64;                     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1588
+    d0.d = t0.castToDouble;                                  // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1589
+    if (std::isnan(d0.d) || std::isnan(d1.d)                 // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:698
+        || (d0.d < d1.d))
+        goto _offlineasm_104_compare__jumpTarget;
+    rPC.i = rPC.i + intptr_t(0x4);                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:31
+    opcode = *CAST<Opcode*>(rBasePC.i8p + (rPC.i << 3));     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:27
+    DISPATCH_OPCODE();
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_104_compare__op2NotInt)
+    d0.d = t0.i32;                                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1594
+    if ((t1.i64 & tagTypeNumber.i64) == 0)                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1595
+        goto _offlineasm_104_compare__slow;
+    t1.i64 = t1.i64 + tagTypeNumber.i64;                     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1596
+    d1.d = t1.castToDouble;                                  // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1597
+    if (std::isnan(d0.d) || std::isnan(d1.d)                 // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:698
+        || (d0.d < d1.d))
+        goto _offlineasm_104_compare__jumpTarget;
+    rPC.i = rPC.i + intptr_t(0x4);                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:31
+    opcode = *CAST<Opcode*>(rBasePC.i8p + (rPC.i << 3));     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:27
+    DISPATCH_OPCODE();
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_104_compare__jumpTarget)
+    rPC.i32 = rPC.i32 + *CAST<int32_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x18)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:36
+    rPC.clearHighWord();
+    opcode = *CAST<Opcode*>(rBasePC.i8p + (rPC.i << 3));     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:27
+    DISPATCH_OPCODE();
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_104_compare__slow)
+    rPC.i8p = rBasePC.i8p + (rPC.i << 3);                    // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:241
+    t3.i = rBasePC.i;                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:242
+    {                                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:64
+        ExecState* exec = CAST<ExecState*>(cfr.vp);
+        Instruction* pc = CAST<Instruction*>(rPC.vp);
+        SlowPathReturnType result = llint_slow_path_jngreatereq(exec, pc);
+        decodeResult(result, t0.instruction, t1.vp);
+    }
+    rPC.i = t0.i;                                            // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:246
+    cfr.i = t1.i;                                            // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:247
+    rBasePC.i = t3.i;                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:248
+    rPC.i = rPC.i - rBasePC.i;                               // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:249
+    rPC.i = rPC.i >> (intptr_t(0x3) & 0x1f);                 // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:250
+    rPC.i = rPC.i + intptr_t(0x0);                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:31
+    opcode = *CAST<Opcode*>(rBasePC.i8p + (rPC.i << 3));     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:27
+    DISPATCH_OPCODE();
+
+OFFLINE_ASM_OPCODE_LABEL(op_loop_hint)
+    t1.i = *CAST<intptr_t*>(cfr.i8p + 16);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:704
+    t1.i = *CAST<intptr_t*>(t1.i8p + 96);                    // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:705
+    t0.i = *CAST<uint8_t*>(t1.i8p + 41640);                  // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:706
+    if (t0.i8 != 0)                                          // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:707
+        goto _offlineasm_handleWatchdogTimer;
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_afterWatchdogTimerCheck)
+    t0.i = *CAST<intptr_t*>(cfr.i8p + 16);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:283
+    {                                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:284
+        int32_t temp = *CAST<int32_t*>(t0.i8p + 424) + int32_t(0x1);
+        *CAST<int32_t*>(t0.i8p + 424) = temp;
+        if (temp < 0)
+            goto  _offlineasm_checkSwitchToJITForLoop__104_checkSwitchToJIT__continue;
+    }
+    *CAST<int32_t*>(cfr.i8p + 44) = rPC.i32;                 // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:294
+    rPC.i8p = rBasePC.i8p + (rPC.i << 3);                    // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:241
+    t3.i = rBasePC.i;                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:242
+    {                                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:64
+        ExecState* exec = CAST<ExecState*>(cfr.vp);
+        Instruction* pc = CAST<Instruction*>(rPC.vp);
+        SlowPathReturnType result = llint_loop_osr(exec, pc);
+        decodeResult(result, t0.instruction, t1.vp);
+    }
+    cfr.i = t1.i;                                            // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:297
+    if (t0.i == 0)                                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:298
+        goto _offlineasm_checkSwitchToJITForLoop__checkSwitchToJIT__action__recover;
+    opcode = t0.opcode;                                      // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:299
+    DISPATCH_OPCODE();
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_checkSwitchToJITForLoop__checkSwitchToJIT__action__recover)
+    rBasePC.i = t3.i;                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:301
+    rPC.u = *CAST<uint32_t*>(cfr.i8p + 44);                  // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:302
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_checkSwitchToJITForLoop__104_checkSwitchToJIT__continue)
+    rPC.i = rPC.i + intptr_t(0x1);                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:31
+    opcode = *CAST<Opcode*>(rBasePC.i8p + (rPC.i << 3));     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:27
+    DISPATCH_OPCODE();
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_handleWatchdogTimer)
+    *CAST<int32_t*>(cfr.i8p + 44) = rPC.i32;                 // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:281
+    rPC.i8p = rBasePC.i8p + (rPC.i << 3);                    // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:241
+    t3.i = rBasePC.i;                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:242
+    {                                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:64
+        ExecState* exec = CAST<ExecState*>(cfr.vp);
+        Instruction* pc = CAST<Instruction*>(rPC.vp);
+        SlowPathReturnType result = llint_slow_path_handle_watchdog_timer(exec, pc);
+        decodeResult(result, t0.instruction, t1.vp);
+    }
+    cfr.i = t1.i;                                            // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:284
+    if (t0.i != 0)                                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:285
+        goto _offlineasm_throwHandler;
+    rBasePC.i = t3.i;                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:286
+    rPC.u = *CAST<uint32_t*>(cfr.i8p + 44);                  // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:287
+    goto _offlineasm_afterWatchdogTimerCheck;                // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:713
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_throwHandler)
+    goto llint_throw_from_slow_path_trampoline;              // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:715
+
+OFFLINE_ASM_OPCODE_LABEL(op_switch_string)
+    rPC.i8p = rBasePC.i8p + (rPC.i << 3);                    // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:241
+    t3.i = rBasePC.i;                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:242
+    {                                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:64
+        ExecState* exec = CAST<ExecState*>(cfr.vp);
+        Instruction* pc = CAST<Instruction*>(rPC.vp);
+        SlowPathReturnType result = llint_slow_path_switch_string(exec, pc);
+        decodeResult(result, t0.instruction, t1.vp);
+    }
+    rPC.i = t0.i;                                            // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:246
+    cfr.i = t1.i;                                            // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:247
+    rBasePC.i = t3.i;                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:248
+    rPC.i = rPC.i - rBasePC.i;                               // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:249
+    rPC.i = rPC.i >> (intptr_t(0x3) & 0x1f);                 // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:250
+    rPC.i = rPC.i + intptr_t(0x0);                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:31
+    opcode = *CAST<Opcode*>(rBasePC.i8p + (rPC.i << 3));     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:27
+    DISPATCH_OPCODE();
+
+OFFLINE_ASM_OPCODE_LABEL(op_new_func_exp)
+    rPC.i8p = rBasePC.i8p + (rPC.i << 3);                    // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:241
+    t3.i = rBasePC.i;                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:242
+    {                                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:64
+        ExecState* exec = CAST<ExecState*>(cfr.vp);
+        Instruction* pc = CAST<Instruction*>(rPC.vp);
+        SlowPathReturnType result = llint_slow_path_new_func_exp(exec, pc);
+        decodeResult(result, t0.instruction, t1.vp);
+    }
+    rPC.i = t0.i;                                            // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:246
+    cfr.i = t1.i;                                            // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:247
+    rBasePC.i = t3.i;                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:248
+    rPC.i = rPC.i - rBasePC.i;                               // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:249
+    rPC.i = rPC.i >> (intptr_t(0x3) & 0x1f);                 // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:250
+    rPC.i = rPC.i + intptr_t(0x3);                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:31
+    opcode = *CAST<Opcode*>(rBasePC.i8p + (rPC.i << 3));     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:27
+    DISPATCH_OPCODE();
+
+OFFLINE_ASM_OPCODE_LABEL(op_call)
+    t3.i = *CAST<int32_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x20)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:94
+    t3.i = -t3.i;                                            // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1696
+    t0.i64 = *CAST<int64_t*>(cfr.i8p + (t3.i << 3) + intptr_t(0x30)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1697
+    if ((t0.i64 & tagMask.i64) != 0)                         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1698
+        goto _offlineasm_arrayProfileForCall__done;
+    t0.i = *CAST<intptr_t*>(t0.i8p);                         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1699
+    t1.i = *CAST<intptr_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x30)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:98
+    *CAST<intptr_t*>(t1.i8p + 8) = t0.i;                     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1701
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_arrayProfileForCall__done)
+    t0.i = *CAST<int32_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x10)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:94
+    t1.i = *CAST<intptr_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x28)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:98
+    t2.i = *CAST<intptr_t*>(t1.i8p + 16);                    // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1708
+    if (t0.i >= intptr_t(0x40000000))                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:313
+        goto _offlineasm_doCall__105_loadConstantOrVariable__constant;
+    t3.i64 = *CAST<int64_t*>(cfr.i8p + (t0.i << 3));         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:314
+    goto _offlineasm_doCall__105_loadConstantOrVariable__done; // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:315
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_doCall__105_loadConstantOrVariable__constant)
+    t3.i = *CAST<intptr_t*>(cfr.i8p + 16);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:317
+    t3.i = *CAST<intptr_t*>(t3.i8p + 368);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:318
+    t0.i = t0.i - intptr_t(0x40000000);                      // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:319
+    t3.i64 = *CAST<int64_t*>(t3.i8p + (t0.i << 3));          // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:320
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_doCall__105_loadConstantOrVariable__done)
+    if (t3.i64 != t2.i64)                                    // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1710
+        goto _offlineasm_doCall__opCallSlow;
+    t3.i = *CAST<int32_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x20)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:94
+    t3.i32 = t3.i32 << (intptr_t(0x3) & 0x1f);               // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1712
+    t3.clearHighWord();
+    t3.i = -t3.i;                                            // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1713
+    t3.i = t3.i + cfr.i;                                     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1714
+    t0.i = *CAST<intptr_t*>(t2.i8p + 32);                    // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1715
+    *CAST<int64_t*>(t3.i8p + 32) = t2.i64;                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1716
+    *CAST<int64_t*>(t3.i8p + 24) = t0.i64;                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1717
+    t2.i = *CAST<int32_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x18)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:94
+    *CAST<int32_t*>(cfr.i8p + 44) = rPC.i32;                 // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1719
+    *CAST<int64_t*>(t3.i8p) = cfr.i64;                       // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1720
+    *CAST<int32_t*>(t3.i8p + 40) = t2.i32;                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1721
+    cfr.i = t3.i;                                            // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1722
+    opcode = *CAST<Opcode*>(t1.i8p + 32);                    // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:243
+    DISPATCH_OPCODE();
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_doCall__opCallSlow)
+    *CAST<int32_t*>(cfr.i8p + 44) = rPC.i32;                 // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:273
+    rPC.i8p = rBasePC.i8p + (rPC.i << 3);                    // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:241
+    t3.i = rBasePC.i;                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:242
+    {                                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:64
+        ExecState* exec = CAST<ExecState*>(cfr.vp);
+        Instruction* pc = CAST<Instruction*>(rPC.vp);
+        SlowPathReturnType result = llint_slow_path_call(exec, pc);
+        decodeResult(result, t0.instruction, t1.vp);
+    }
+    cfr.i = t1.i;                                            // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:276
+    opcode = t0.opcode;                                      // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:255
+    DISPATCH_OPCODE();
+
+OFFLINE_ASM_OPCODE_LABEL(op_construct)
+    t0.i = *CAST<int32_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x10)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:94
+    t1.i = *CAST<intptr_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x28)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:98
+    t2.i = *CAST<intptr_t*>(t1.i8p + 16);                    // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1708
+    if (t0.i >= intptr_t(0x40000000))                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:313
+        goto _offlineasm_doCall__106_loadConstantOrVariable__constant;
+    t3.i64 = *CAST<int64_t*>(cfr.i8p + (t0.i << 3));         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:314
+    goto _offlineasm_doCall__106_loadConstantOrVariable__done; // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:315
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_doCall__106_loadConstantOrVariable__constant)
+    t3.i = *CAST<intptr_t*>(cfr.i8p + 16);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:317
+    t3.i = *CAST<intptr_t*>(t3.i8p + 368);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:318
+    t0.i = t0.i - intptr_t(0x40000000);                      // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:319
+    t3.i64 = *CAST<int64_t*>(t3.i8p + (t0.i << 3));          // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:320
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_doCall__106_loadConstantOrVariable__done)
+    if (t3.i64 != t2.i64)                                    // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1710
+        goto _offlineasm_106_doCall__opCallSlow;
+    t3.i = *CAST<int32_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x20)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:94
+    t3.i32 = t3.i32 << (intptr_t(0x3) & 0x1f);               // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1712
+    t3.clearHighWord();
+    t3.i = -t3.i;                                            // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1713
+    t3.i = t3.i + cfr.i;                                     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1714
+    t0.i = *CAST<intptr_t*>(t2.i8p + 32);                    // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1715
+    *CAST<int64_t*>(t3.i8p + 32) = t2.i64;                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1716
+    *CAST<int64_t*>(t3.i8p + 24) = t0.i64;                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1717
+    t2.i = *CAST<int32_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x18)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:94
+    *CAST<int32_t*>(cfr.i8p + 44) = rPC.i32;                 // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1719
+    *CAST<int64_t*>(t3.i8p) = cfr.i64;                       // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1720
+    *CAST<int32_t*>(t3.i8p + 40) = t2.i32;                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1721
+    cfr.i = t3.i;                                            // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1722
+    opcode = *CAST<Opcode*>(t1.i8p + 32);                    // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:243
+    DISPATCH_OPCODE();
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_106_doCall__opCallSlow)
+    *CAST<int32_t*>(cfr.i8p + 44) = rPC.i32;                 // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:273
+    rPC.i8p = rBasePC.i8p + (rPC.i << 3);                    // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:241
+    t3.i = rBasePC.i;                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:242
+    {                                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:64
+        ExecState* exec = CAST<ExecState*>(cfr.vp);
+        Instruction* pc = CAST<Instruction*>(rPC.vp);
+        SlowPathReturnType result = llint_slow_path_construct(exec, pc);
+        decodeResult(result, t0.instruction, t1.vp);
+    }
+    cfr.i = t1.i;                                            // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:276
+    opcode = t0.opcode;                                      // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:255
+    DISPATCH_OPCODE();
+
+OFFLINE_ASM_OPCODE_LABEL(op_call_varargs)
+    rPC.i8p = rBasePC.i8p + (rPC.i << 3);                    // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:241
+    t3.i = rBasePC.i;                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:242
+    {                                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:64
+        ExecState* exec = CAST<ExecState*>(cfr.vp);
+        Instruction* pc = CAST<Instruction*>(rPC.vp);
+        SlowPathReturnType result = llint_slow_path_size_and_alloc_frame_for_varargs(exec, pc);
+        decodeResult(result, t0.instruction, t1.vp);
+    }
+    rPC.i = t0.i;                                            // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:246
+    cfr.i = t1.i;                                            // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:247
+    rBasePC.i = t3.i;                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:248
+    rPC.i = rPC.i - rBasePC.i;                               // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:249
+    rPC.i = rPC.i >> (intptr_t(0x3) & 0x1f);                 // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:250
+    t3.i = *CAST<intptr_t*>(cfr.i8p + 24);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:434
+    t3.i = t3.i & intptr_t(-65536);                          // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:435
+    t3.i = *CAST<intptr_t*>(t3.i8p + 1128);                  // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:436
+    if (*CAST<int64_t*>(t3.i8p + 48496) == 0)                // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:437
+        goto _offlineasm_branchIfException__noException;
+    goto llint_throw_from_slow_path_trampoline;              // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:438
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_branchIfException__noException)
+    *CAST<int32_t*>(cfr.i8p + 44) = rPC.i32;                 // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:273
+    rPC.i8p = rBasePC.i8p + (rPC.i << 3);                    // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:241
+    t3.i = rBasePC.i;                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:242
+    {                                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:64
+        ExecState* exec = CAST<ExecState*>(cfr.vp);
+        Instruction* pc = CAST<Instruction*>(rPC.vp);
+        SlowPathReturnType result = llint_slow_path_call_varargs(exec, pc);
+        decodeResult(result, t0.instruction, t1.vp);
+    }
+    cfr.i = t1.i;                                            // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:276
+    opcode = t0.opcode;                                      // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:255
+    DISPATCH_OPCODE();
+
+OFFLINE_ASM_OPCODE_LABEL(op_call_eval)
+    *CAST<int32_t*>(cfr.i8p + 44) = rPC.i32;                 // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:273
+    rPC.i8p = rBasePC.i8p + (rPC.i << 3);                    // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:241
+    t3.i = rBasePC.i;                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:242
+    {                                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:64
+        ExecState* exec = CAST<ExecState*>(cfr.vp);
+        Instruction* pc = CAST<Instruction*>(rPC.vp);
+        SlowPathReturnType result = llint_slow_path_call_eval(exec, pc);
+        decodeResult(result, t0.instruction, t1.vp);
+    }
+    cfr.i = t1.i;                                            // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:276
+    opcode = t0.opcode;                                      // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:255
+    DISPATCH_OPCODE();
+
+OFFLINE_ASM_GLUE_LABEL(llint_generic_return_point)
+    rPC.u = *CAST<uint32_t*>(cfr.i8p + 44);                  // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:45
+    rBasePC.i = *CAST<intptr_t*>(cfr.i8p + 16);              // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:46
+    rBasePC.i = *CAST<intptr_t*>(rBasePC.i8p + 104);         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:47
+    t1.i = *CAST<int32_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x8)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:94
+    *CAST<int64_t*>(cfr.i8p + (t1.i << 3)) = t0.i64;         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:49
+    t2.i = *CAST<intptr_t*>(rBasePC.i8p + (rPC.i << 3) + intptr_t(0x38)); // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:98
+    *CAST<int64_t*>(t2.i8p + 16) = t0.i64;                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:383
+    rPC.i = rPC.i + intptr_t(0x8);                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:31
+    opcode = *CAST<Opcode*>(rBasePC.i8p + (rPC.i << 3));     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:27
+    DISPATCH_OPCODE();
+
+OFFLINE_ASM_OPCODE_LABEL(op_strcat)
+    rPC.i8p = rBasePC.i8p + (rPC.i << 3);                    // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:241
+    t3.i = rBasePC.i;                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:242
+    {                                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:64
+        ExecState* exec = CAST<ExecState*>(cfr.vp);
+        Instruction* pc = CAST<Instruction*>(rPC.vp);
+        SlowPathReturnType result = slow_path_strcat(exec, pc);
+        decodeResult(result, t0.instruction, t1.vp);
+    }
+    rPC.i = t0.i;                                            // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:246
+    cfr.i = t1.i;                                            // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:247
+    rBasePC.i = t3.i;                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:248
+    rPC.i = rPC.i - rBasePC.i;                               // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:249
+    rPC.i = rPC.i >> (intptr_t(0x3) & 0x1f);                 // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:250
+    rPC.i = rPC.i + intptr_t(0x4);                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:31
+    opcode = *CAST<Opcode*>(rBasePC.i8p + (rPC.i << 3));     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:27
+    DISPATCH_OPCODE();
+
+OFFLINE_ASM_OPCODE_LABEL(op_get_pnames)
+    rPC.i8p = rBasePC.i8p + (rPC.i << 3);                    // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:241
+    t3.i = rBasePC.i;                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:242
+    {                                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:64
+        ExecState* exec = CAST<ExecState*>(cfr.vp);
+        Instruction* pc = CAST<Instruction*>(rPC.vp);
+        SlowPathReturnType result = llint_slow_path_get_pnames(exec, pc);
+        decodeResult(result, t0.instruction, t1.vp);
+    }
+    rPC.i = t0.i;                                            // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:246
+    cfr.i = t1.i;                                            // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:247
+    rBasePC.i = t3.i;                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:248
+    rPC.i = rPC.i - rBasePC.i;                               // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:249
+    rPC.i = rPC.i >> (intptr_t(0x3) & 0x1f);                 // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:250
+    rPC.i = rPC.i + intptr_t(0x0);                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:31
+    opcode = *CAST<Opcode*>(rBasePC.i8p + (rPC.i << 3));     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:27
+    DISPATCH_OPCODE();
+
+OFFLINE_ASM_OPCODE_LABEL(op_push_with_scope)
+    rPC.i8p = rBasePC.i8p + (rPC.i << 3);                    // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:241
+    t3.i = rBasePC.i;                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:242
+    {                                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:64
+        ExecState* exec = CAST<ExecState*>(cfr.vp);
+        Instruction* pc = CAST<Instruction*>(rPC.vp);
+        SlowPathReturnType result = llint_slow_path_push_with_scope(exec, pc);
+        decodeResult(result, t0.instruction, t1.vp);
+    }
+    rPC.i = t0.i;                                            // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:246
+    cfr.i = t1.i;                                            // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:247
+    rBasePC.i = t3.i;                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:248
+    rPC.i = rPC.i - rBasePC.i;                               // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:249
+    rPC.i = rPC.i >> (intptr_t(0x3) & 0x1f);                 // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:250
+    rPC.i = rPC.i + intptr_t(0x2);                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:31
+    opcode = *CAST<Opcode*>(rBasePC.i8p + (rPC.i << 3));     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:27
+    DISPATCH_OPCODE();
+
+OFFLINE_ASM_OPCODE_LABEL(op_pop_scope)
+    rPC.i8p = rBasePC.i8p + (rPC.i << 3);                    // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:241
+    t3.i = rBasePC.i;                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:242
+    {                                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:64
+        ExecState* exec = CAST<ExecState*>(cfr.vp);
+        Instruction* pc = CAST<Instruction*>(rPC.vp);
+        SlowPathReturnType result = llint_slow_path_pop_scope(exec, pc);
+        decodeResult(result, t0.instruction, t1.vp);
+    }
+    rPC.i = t0.i;                                            // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:246
+    cfr.i = t1.i;                                            // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:247
+    rBasePC.i = t3.i;                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:248
+    rPC.i = rPC.i - rBasePC.i;                               // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:249
+    rPC.i = rPC.i >> (intptr_t(0x3) & 0x1f);                 // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:250
+    rPC.i = rPC.i + intptr_t(0x1);                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:31
+    opcode = *CAST<Opcode*>(rBasePC.i8p + (rPC.i << 3));     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:27
+    DISPATCH_OPCODE();
+
+OFFLINE_ASM_OPCODE_LABEL(op_push_name_scope)
+    rPC.i8p = rBasePC.i8p + (rPC.i << 3);                    // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:241
+    t3.i = rBasePC.i;                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:242
+    {                                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:64
+        ExecState* exec = CAST<ExecState*>(cfr.vp);
+        Instruction* pc = CAST<Instruction*>(rPC.vp);
+        SlowPathReturnType result = llint_slow_path_push_name_scope(exec, pc);
+        decodeResult(result, t0.instruction, t1.vp);
+    }
+    rPC.i = t0.i;                                            // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:246
+    cfr.i = t1.i;                                            // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:247
+    rBasePC.i = t3.i;                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:248
+    rPC.i = rPC.i - rBasePC.i;                               // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:249
+    rPC.i = rPC.i >> (intptr_t(0x3) & 0x1f);                 // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:250
+    rPC.i = rPC.i + intptr_t(0x4);                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:31
+    opcode = *CAST<Opcode*>(rBasePC.i8p + (rPC.i << 3));     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:27
+    DISPATCH_OPCODE();
+
+OFFLINE_ASM_OPCODE_LABEL(op_throw)
+    rPC.i8p = rBasePC.i8p + (rPC.i << 3);                    // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:241
+    t3.i = rBasePC.i;                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:242
+    {                                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:64
+        ExecState* exec = CAST<ExecState*>(cfr.vp);
+        Instruction* pc = CAST<Instruction*>(rPC.vp);
+        SlowPathReturnType result = llint_slow_path_throw(exec, pc);
+        decodeResult(result, t0.instruction, t1.vp);
+    }
+    rPC.i = t0.i;                                            // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:246
+    cfr.i = t1.i;                                            // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:247
+    rBasePC.i = t3.i;                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:248
+    rPC.i = rPC.i - rBasePC.i;                               // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:249
+    rPC.i = rPC.i >> (intptr_t(0x3) & 0x1f);                 // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:250
+    rPC.i = rPC.i + intptr_t(0x2);                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:31
+    opcode = *CAST<Opcode*>(rBasePC.i8p + (rPC.i << 3));     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:27
+    DISPATCH_OPCODE();
+
+OFFLINE_ASM_OPCODE_LABEL(op_throw_static_error)
+    rPC.i8p = rBasePC.i8p + (rPC.i << 3);                    // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:241
+    t3.i = rBasePC.i;                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:242
+    {                                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:64
+        ExecState* exec = CAST<ExecState*>(cfr.vp);
+        Instruction* pc = CAST<Instruction*>(rPC.vp);
+        SlowPathReturnType result = llint_slow_path_throw_static_error(exec, pc);
+        decodeResult(result, t0.instruction, t1.vp);
+    }
+    rPC.i = t0.i;                                            // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:246
+    cfr.i = t1.i;                                            // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:247
+    rBasePC.i = t3.i;                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:248
+    rPC.i = rPC.i - rBasePC.i;                               // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:249
+    rPC.i = rPC.i >> (intptr_t(0x3) & 0x1f);                 // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:250
+    rPC.i = rPC.i + intptr_t(0x3);                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:31
+    opcode = *CAST<Opcode*>(rBasePC.i8p + (rPC.i << 3));     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:27
+    DISPATCH_OPCODE();
+
+OFFLINE_ASM_OPCODE_LABEL(op_profile_will_call)
+    t0.i = *CAST<intptr_t*>(cfr.i8p + 16);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:834
+    t0.i = *CAST<intptr_t*>(t0.i8p + 96);                    // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:835
+    t0.u = *CAST<uint32_t*>(t0.i8p + 48528);                 // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:836
+    if (t0.i == 0)                                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:837
+        goto _offlineasm_opProfilerWillCallDone;
+    rPC.i8p = rBasePC.i8p + (rPC.i << 3);                    // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:241
+    t3.i = rBasePC.i;                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:242
+    {                                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:64
+        ExecState* exec = CAST<ExecState*>(cfr.vp);
+        Instruction* pc = CAST<Instruction*>(rPC.vp);
+        SlowPathReturnType result = llint_slow_path_profile_will_call(exec, pc);
+        decodeResult(result, t0.instruction, t1.vp);
+    }
+    rPC.i = t0.i;                                            // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:246
+    cfr.i = t1.i;                                            // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:247
+    rBasePC.i = t3.i;                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:248
+    rPC.i = rPC.i - rBasePC.i;                               // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:249
+    rPC.i = rPC.i >> (intptr_t(0x3) & 0x1f);                 // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:250
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_opProfilerWillCallDone)
+    rPC.i = rPC.i + intptr_t(0x2);                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:31
+    opcode = *CAST<Opcode*>(rBasePC.i8p + (rPC.i << 3));     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:27
+    DISPATCH_OPCODE();
+
+OFFLINE_ASM_OPCODE_LABEL(op_profile_did_call)
+    t0.i = *CAST<intptr_t*>(cfr.i8p + 16);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:845
+    t0.i = *CAST<intptr_t*>(t0.i8p + 96);                    // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:846
+    t0.u = *CAST<uint32_t*>(t0.i8p + 48528);                 // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:847
+    if (t0.i == 0)                                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:848
+        goto _offlineasm_opProfilerDidCallDone;
+    rPC.i8p = rBasePC.i8p + (rPC.i << 3);                    // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:241
+    t3.i = rBasePC.i;                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:242
+    {                                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:64
+        ExecState* exec = CAST<ExecState*>(cfr.vp);
+        Instruction* pc = CAST<Instruction*>(rPC.vp);
+        SlowPathReturnType result = llint_slow_path_profile_did_call(exec, pc);
+        decodeResult(result, t0.instruction, t1.vp);
+    }
+    rPC.i = t0.i;                                            // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:246
+    cfr.i = t1.i;                                            // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:247
+    rBasePC.i = t3.i;                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:248
+    rPC.i = rPC.i - rBasePC.i;                               // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:249
+    rPC.i = rPC.i >> (intptr_t(0x3) & 0x1f);                 // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:250
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_opProfilerDidCallDone)
+    rPC.i = rPC.i + intptr_t(0x2);                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:31
+    opcode = *CAST<Opcode*>(rBasePC.i8p + (rPC.i << 3));     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:27
+    DISPATCH_OPCODE();
+
+OFFLINE_ASM_OPCODE_LABEL(op_debug)
+    t0.i = *CAST<intptr_t*>(cfr.i8p + 16);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:856
+    t0.u = *CAST<uint32_t*>(t0.i8p + 84);                    // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:857
+    if (t0.i32 == 0)                                         // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:858
+        goto _offlineasm_opDebugDone;
+    rPC.i8p = rBasePC.i8p + (rPC.i << 3);                    // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:241
+    t3.i = rBasePC.i;                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:242
+    {                                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:64
+        ExecState* exec = CAST<ExecState*>(cfr.vp);
+        Instruction* pc = CAST<Instruction*>(rPC.vp);
+        SlowPathReturnType result = llint_slow_path_debug(exec, pc);
+        decodeResult(result, t0.instruction, t1.vp);
+    }
+    rPC.i = t0.i;                                            // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:246
+    cfr.i = t1.i;                                            // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:247
+    rBasePC.i = t3.i;                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:248
+    rPC.i = rPC.i - rBasePC.i;                               // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:249
+    rPC.i = rPC.i >> (intptr_t(0x3) & 0x1f);                 // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:250
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_opDebugDone)
+    rPC.i = rPC.i + intptr_t(0x3);                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:31
+    opcode = *CAST<Opcode*>(rBasePC.i8p + (rPC.i << 3));     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:27
+    DISPATCH_OPCODE();
+
+OFFLINE_ASM_GLUE_LABEL(llint_native_call_trampoline)
+    *CAST<intptr_t*>(cfr.i8p + 16) = intptr_t(0x0);          // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1882
+    t0.i = *CAST<intptr_t*>(cfr.i8p);                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1923
+    t1.i = *CAST<intptr_t*>(t0.i8p + 24);                    // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1924
+    *CAST<intptr_t*>(cfr.i8p + 24) = t1.i;                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1925
+    t3.i = *CAST<intptr_t*>(cfr.i8p + 24);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1927
+    t3.i = t3.i & intptr_t(-65536);                          // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1928
+    t3.i = *CAST<intptr_t*>(t3.i8p + 1128);                  // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1929
+    *CAST<intptr_t*>(t3.i8p + 41632) = cfr.i;                // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1930
+    t2.i = t0.i;                                             // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1932
+    t3.i = rRetVPC.i;                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:216
+    *CAST<intptr_t*>(cfr.i8p + 8) = t3.i;                    // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1934
+    t0.i = cfr.i;                                            // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1935
+    t1.i = *CAST<intptr_t*>(cfr.i8p + 32);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1936
+    t1.i = *CAST<intptr_t*>(t1.i8p + 24);                    // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1937
+    cfr.i = t2.i;                                            // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1938
+    nativeFunc = *CAST<NativeFunction*>(t1.i8p + 64);        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1939
+    functionReturnValue = JSValue::decode(nativeFunc(t0.execState));
+    #if USE(JSVALUE32_64)
+        t1.i = functionReturnValue.tag();
+        t0.i = functionReturnValue.payload();
+    #else // USE_JSVALUE64)
+        t0.encodedJSValue = JSValue::encode(functionReturnValue);
+    #endif // USE_JSVALUE64)
+    rRetVPC.i = t3.i;                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:227
+    t3.i = *CAST<intptr_t*>(cfr.i8p + 24);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1942
+    t3.i = t3.i & intptr_t(-65536);                          // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1943
+    t3.i = *CAST<intptr_t*>(t3.i8p + 1128);                  // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1944
+    if (*CAST<int64_t*>(t3.i8p + 48496) != 0)                // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1949
+        goto _offlineasm_nativeCallTrampoline__exception;
+    goto doReturnHelper;                                     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1950
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_nativeCallTrampoline__exception)
+    t1.i = rRetVPC.i;                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:216
+    rPC.u = *CAST<uint32_t*>(cfr.i8p + 44);                  // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1953
+    rBasePC.i = *CAST<intptr_t*>(cfr.i8p + 16);              // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1954
+    t0.i = *CAST<intptr_t*>(rBasePC.i8p + 96);               // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1955
+    rBasePC.i = *CAST<intptr_t*>(rBasePC.i8p + 104);         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1956
+    *CAST<intptr_t*>(t0.i8p + 41632) = cfr.i;                // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1957
+    rPC.i8p = rBasePC.i8p + (rPC.i << 3);                    // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:241
+    t3.i = rBasePC.i;                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:242
+    {                                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:64
+        ExecState* exec = CAST<ExecState*>(cfr.vp);
+        Instruction* pc = CAST<Instruction*>(rPC.vp);
+        SlowPathReturnType result = llint_throw_from_native_call(exec, pc);
+        decodeResult(result, t0.instruction, t1.vp);
+    }
+    rPC.i = t0.i;                                            // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:246
+    cfr.i = t1.i;                                            // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:247
+    rBasePC.i = t3.i;                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:248
+    rPC.i = rPC.i - rBasePC.i;                               // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:249
+    rPC.i = rPC.i >> (intptr_t(0x3) & 0x1f);                 // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:250
+    goto llint_throw_from_slow_path_trampoline;              // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1959
+
+OFFLINE_ASM_GLUE_LABEL(llint_native_construct_trampoline)
+    *CAST<intptr_t*>(cfr.i8p + 16) = intptr_t(0x0);          // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1882
+    t0.i = *CAST<intptr_t*>(cfr.i8p);                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1923
+    t1.i = *CAST<intptr_t*>(t0.i8p + 24);                    // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1924
+    *CAST<intptr_t*>(cfr.i8p + 24) = t1.i;                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1925
+    t3.i = *CAST<intptr_t*>(cfr.i8p + 24);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1927
+    t3.i = t3.i & intptr_t(-65536);                          // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1928
+    t3.i = *CAST<intptr_t*>(t3.i8p + 1128);                  // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1929
+    *CAST<intptr_t*>(t3.i8p + 41632) = cfr.i;                // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1930
+    t2.i = t0.i;                                             // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1932
+    t3.i = rRetVPC.i;                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:216
+    *CAST<intptr_t*>(cfr.i8p + 8) = t3.i;                    // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1934
+    t0.i = cfr.i;                                            // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1935
+    t1.i = *CAST<intptr_t*>(cfr.i8p + 32);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1936
+    t1.i = *CAST<intptr_t*>(t1.i8p + 24);                    // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1937
+    cfr.i = t2.i;                                            // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1938
+    nativeFunc = *CAST<NativeFunction*>(t1.i8p + 72);        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1939
+    functionReturnValue = JSValue::decode(nativeFunc(t0.execState));
+    #if USE(JSVALUE32_64)
+        t1.i = functionReturnValue.tag();
+        t0.i = functionReturnValue.payload();
+    #else // USE_JSVALUE64)
+        t0.encodedJSValue = JSValue::encode(functionReturnValue);
+    #endif // USE_JSVALUE64)
+    rRetVPC.i = t3.i;                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:227
+    t3.i = *CAST<intptr_t*>(cfr.i8p + 24);                   // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1942
+    t3.i = t3.i & intptr_t(-65536);                          // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1943
+    t3.i = *CAST<intptr_t*>(t3.i8p + 1128);                  // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1944
+    if (*CAST<int64_t*>(t3.i8p + 48496) != 0)                // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1949
+        goto _offlineasm_106_nativeCallTrampoline__exception;
+    goto doReturnHelper;                                     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1950
+
+  OFFLINE_ASM_LOCAL_LABEL(_offlineasm_106_nativeCallTrampoline__exception)
+    t1.i = rRetVPC.i;                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:216
+    rPC.u = *CAST<uint32_t*>(cfr.i8p + 44);                  // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1953
+    rBasePC.i = *CAST<intptr_t*>(cfr.i8p + 16);              // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1954
+    t0.i = *CAST<intptr_t*>(rBasePC.i8p + 96);               // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1955
+    rBasePC.i = *CAST<intptr_t*>(rBasePC.i8p + 104);         // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1956
+    *CAST<intptr_t*>(t0.i8p + 41632) = cfr.i;                // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1957
+    rPC.i8p = rBasePC.i8p + (rPC.i << 3);                    // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:241
+    t3.i = rBasePC.i;                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:242
+    {                                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:64
+        ExecState* exec = CAST<ExecState*>(cfr.vp);
+        Instruction* pc = CAST<Instruction*>(rPC.vp);
+        SlowPathReturnType result = llint_throw_from_native_call(exec, pc);
+        decodeResult(result, t0.instruction, t1.vp);
+    }
+    rPC.i = t0.i;                                            // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:246
+    cfr.i = t1.i;                                            // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:247
+    rBasePC.i = t3.i;                                        // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:248
+    rPC.i = rPC.i - rBasePC.i;                               // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:249
+    rPC.i = rPC.i >> (intptr_t(0x3) & 0x1f);                 // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:250
+    goto llint_throw_from_slow_path_trampoline;              // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:1959
+
+OFFLINE_ASM_OPCODE_LABEL(op_get_by_id_chain)
+    CRASH(); // break instruction not implemented.           // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:886
+
+OFFLINE_ASM_OPCODE_LABEL(op_get_by_id_custom_chain)
+    CRASH(); // break instruction not implemented.           // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:886
+
+OFFLINE_ASM_OPCODE_LABEL(op_get_by_id_custom_proto)
+    CRASH(); // break instruction not implemented.           // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:886
+
+OFFLINE_ASM_OPCODE_LABEL(op_get_by_id_custom_self)
+    CRASH(); // break instruction not implemented.           // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:886
+
+OFFLINE_ASM_OPCODE_LABEL(op_get_by_id_generic)
+    CRASH(); // break instruction not implemented.           // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:886
+
+OFFLINE_ASM_OPCODE_LABEL(op_get_by_id_getter_chain)
+    CRASH(); // break instruction not implemented.           // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:886
+
+OFFLINE_ASM_OPCODE_LABEL(op_get_by_id_getter_proto)
+    CRASH(); // break instruction not implemented.           // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:886
+
+OFFLINE_ASM_OPCODE_LABEL(op_get_by_id_getter_self)
+    CRASH(); // break instruction not implemented.           // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:886
+
+OFFLINE_ASM_OPCODE_LABEL(op_get_by_id_proto)
+    CRASH(); // break instruction not implemented.           // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:886
+
+OFFLINE_ASM_OPCODE_LABEL(op_get_by_id_self)
+    CRASH(); // break instruction not implemented.           // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:886
+
+OFFLINE_ASM_OPCODE_LABEL(op_get_string_length)
+    CRASH(); // break instruction not implemented.           // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:886
+
+OFFLINE_ASM_OPCODE_LABEL(op_put_by_id_generic)
+    CRASH(); // break instruction not implemented.           // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:886
+
+OFFLINE_ASM_OPCODE_LABEL(op_put_by_id_replace)
+    CRASH(); // break instruction not implemented.           // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:886
+
+OFFLINE_ASM_OPCODE_LABEL(op_put_by_id_transition)
+    CRASH(); // break instruction not implemented.           // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:886
+
+OFFLINE_ASM_OPCODE_LABEL(op_init_global_const_nop)
+    rPC.i = rPC.i + intptr_t(0x5);                           // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:31
+    opcode = *CAST<Opcode*>(rBasePC.i8p + (rPC.i << 3));     // ./Source/JavaScriptCore/llint/LowLevelInterpreter64.asm:27
+    DISPATCH_OPCODE();
+
+OFFLINE_ASM_GLUE_LABEL(llint_end)
+    CRASH();                                                 // ./Source/JavaScriptCore/llint/LowLevelInterpreter.asm:197
+OFFLINE_ASM_END
+//#endif
diff -ruN webkitgtk-2.4.11-orig/Source/JavaScriptCore/llint/LowLevelInterpreter.cpp webkitgtk-2.4.11/Source/JavaScriptCore/llint/LowLevelInterpreter.cpp
--- webkitgtk-2.4.11-orig/Source/JavaScriptCore/llint/LowLevelInterpreter.cpp	2016-04-10 08:48:36.000000000 +0200
+++ webkitgtk-2.4.11/Source/JavaScriptCore/llint/LowLevelInterpreter.cpp	2018-01-28 20:32:40.238911258 +0100
@@ -150,7 +150,7 @@
     union {
         intptr_t i;
         uintptr_t u;
-#if USE(JSVALUE64)
+#if 1
 #if CPU(BIG_ENDIAN)
         struct {
             int32_t i32padding;
@@ -217,16 +217,17 @@
         ExecState* execState;
         void* instruction;
         NativeFunction nativeFunc;
-#if USE(JSVALUE64)
+//#if USE(JSVALUE64)
         int64_t i64;
         uint64_t u64;
         EncodedJSValue encodedJSValue;
         double castToDouble;
-#endif
+//#endif
         Opcode opcode;
     };
 
-#if USE(JSVALUE64)
+//#if USE(JSVALUE64)
+#if 1
     inline void clearHighWord() { i32padding = 0; }
 #else
     inline void clearHighWord() { }
@@ -279,9 +280,9 @@
 
     union CLoopDoubleRegister {
         double d;
-#if USE(JSVALUE64)
+//#if USE(JSVALUE64)
         int64_t castToInt64;
-#endif
+//#endif
     };
 
     // The CLoop llint backend is initially based on the ARMv7 backend, and
@@ -309,9 +310,9 @@
     // 3. 64 bit result values will be in t0.
 
     CLoopRegister t0, t1, t2, t3;
-#if USE(JSVALUE64)
+//#if USE(JSVALUE64)
     CLoopRegister rBasePC, tagTypeNumber, tagMask;
-#endif
+//#endif
     CLoopRegister rRetVPC;
     CLoopDoubleRegister d0, d1;
 
@@ -415,7 +416,7 @@
         // In the ASM llint, getHostCallReturnValue() is a piece of glue
         // function provided by the JIT (see dfg/DFGOperations.cpp).
         // We simulate it here with a pseduo-opcode handler.
-        OFFLINE_ASM_GLUE_LABEL(getHostCallReturnValue)
+        ;OFFLINE_ASM_GLUE_LABEL(getHostCallReturnValue)
         {
             // The ASM part pops the frame:
             callFrame = callFrame->callerFrame();
@@ -466,7 +467,7 @@
 
         vPC = callFrame->currentVPC();
 
-#if USE(JSVALUE64)
+//#if USE(JSVALUE64)
         // Based on LowLevelInterpreter64.asm's dispatchAfterCall():
 
         // When returning from a native trampoline call, unlike the assembly
@@ -485,7 +486,7 @@
         rPC.i >>= 3;
 
         rBasePC.vp = codeBlock->instructions().begin();
-#endif // USE(JSVALUE64)
+//#endif // USE(JSVALUE64)
 
         goto llint_generic_return_point;
 
diff -ruN webkitgtk-2.4.11-orig/Source/WTF/wtf/InlineASM.h webkitgtk-2.4.11/Source/WTF/wtf/InlineASM.h
--- webkitgtk-2.4.11-orig/Source/WTF/wtf/InlineASM.h	2016-04-10 08:48:36.000000000 +0200
+++ webkitgtk-2.4.11/Source/WTF/wtf/InlineASM.h	2018-01-28 00:06:28.585853086 +0100
@@ -69,7 +69,8 @@
      || OS(OPENBSD)             \
      || OS(SOLARIS)             \
      || (OS(HPUX) && CPU(IA64)) \
-     || OS(NETBSD)
+     || OS(NETBSD)              \
+     || OS(WINDOWS)
     // ELF platform
 #define HIDE_SYMBOL(name) ".hidden " #name
 #else

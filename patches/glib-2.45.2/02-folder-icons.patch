#! /bin/sh
patch -p1 -l -f $* < $0
exit $?

Patch by John Lindgren, https://bugzilla.gnome.org/show_bug.cgi?id=749489

Prior to commit aa4e2d4dc313, the content type for a directory was hard-coded to "inode/directory".  This assumption is no longer valid; in fact, directories no longer have any content type on Windows (g_file_info_get_content_type() returns null).  This change broke the icon logic for directories in glocalfileinfo.c, causing folders to show up in the GTK+ file chooser with either a "generic file" icon or none at all.

The attached patch fixes the issue by not assuming that the content type of directories will be any specific string.  Instead, it activates the icon logic for directories whenever indicated by S_ISDIR.

diff -ruN glib-2.45.2-orig/gio/glocalfileinfo.c glib-2.45.2/gio/glocalfileinfo.c
--- glib-2.45.2-orig/gio/glocalfileinfo.c	2015-07-07 14:41:50.832801632 +0200
+++ glib-2.45.2/gio/glocalfileinfo.c	2015-07-07 14:42:08.481264414 +0200
@@ -1579,13 +1579,12 @@
     }
 }
 
-static const char *
-get_icon_name (const char *path,
-               const char *content_type,
-               gboolean    use_symbolic,
-               gboolean   *with_fallbacks_out)
+static GIcon *
+get_icon_for_folder (const char *path,
+                     gboolean    use_symbolic)
 {
-  const char *name = NULL;
+  GIcon *icon;
+  const char *name;
   gboolean with_fallbacks = TRUE;
 
   if (strcmp (path, g_get_home_dir ()) == 0)
@@ -1626,45 +1625,15 @@
     {
       name = use_symbolic ? "folder-videos-symbolic" : "folder-videos";
     }
-  else if (g_strcmp0 (content_type, "inode/directory") == 0)
-    {
-      name = use_symbolic ? "folder-symbolic" : "folder";
-    }
   else
     {
-      name = NULL;
+      name = use_symbolic ? "folder-symbolic" : "folder";
     }
 
-  if (with_fallbacks_out != NULL)
-    *with_fallbacks_out = with_fallbacks;
-
-  return name;
-}
-
-static GIcon *
-get_icon (const char *path,
-          const char *content_type,
-          gboolean    use_symbolic)
-{
-  GIcon *icon = NULL;
-  const char *icon_name;
-  gboolean with_fallbacks;
-
-  icon_name = get_icon_name (path, content_type, use_symbolic, &with_fallbacks);
-  if (icon_name != NULL)
-    {
-      if (with_fallbacks)
-        icon = g_themed_icon_new_with_default_fallbacks (icon_name);
-      else
-        icon = g_themed_icon_new (icon_name);
-    }
+  if (with_fallbacks)
+    icon = g_themed_icon_new_with_default_fallbacks (name);
   else
-    {
-      if (use_symbolic)
-        icon = g_content_type_get_symbolic_icon (content_type);
-      else
-        icon = g_content_type_get_icon (content_type);
-    }
+    icon = g_themed_icon_new (name);
 
   return icon;
 }
@@ -1839,37 +1808,47 @@
     {
       char *content_type = get_content_type (basename, path, stat_ok ? &statbuf : NULL, is_symlink, symlink_broken, flags, FALSE);
 
-      if (content_type)
-	{
-	  g_file_info_set_content_type (info, content_type);
-
-	  if (_g_file_attribute_matcher_matches_id (attribute_matcher,
-                                                     G_FILE_ATTRIBUTE_ID_STANDARD_ICON)
-               || _g_file_attribute_matcher_matches_id (attribute_matcher,
-                                                        G_FILE_ATTRIBUTE_ID_STANDARD_SYMBOLIC_ICON))
-	    {
-	      GIcon *icon;
+      if (_g_file_attribute_matcher_matches_id (attribute_matcher,
+                                                G_FILE_ATTRIBUTE_ID_STANDARD_ICON) ||
+          _g_file_attribute_matcher_matches_id (attribute_matcher,
+                                                G_FILE_ATTRIBUTE_ID_STANDARD_SYMBOLIC_ICON))
+        {
+          GIcon *icon;
 
-              /* non symbolic icon */
-              icon = get_icon (path, content_type, FALSE);
-              if (icon != NULL)
-                {
-                  g_file_info_set_icon (info, icon);
-                  g_object_unref (icon);
-                }
-
-              /* symbolic icon */
-              icon = get_icon (path, content_type, TRUE);
-              if (icon != NULL)
-                {
-                  g_file_info_set_symbolic_icon (info, icon);
-                  g_object_unref (icon);
-                }
+          /* non symbolic icon */
+          if (stat_ok && S_ISDIR (statbuf.st_mode))
+            icon = get_icon_for_folder (path, FALSE);
+          else if (content_type != NULL)
+            icon = g_content_type_get_icon (content_type);
+          else
+            icon = NULL;
+
+          if (icon != NULL)
+            {
+              g_file_info_set_icon (info, icon);
+              g_object_unref (icon);
+            }
+
+          /* symbolic icon */
+          if (stat_ok && S_ISDIR (statbuf.st_mode))
+            icon = get_icon_for_folder (path, TRUE);
+          else if (content_type != NULL)
+            icon = g_content_type_get_symbolic_icon (content_type);
+          else
+            icon = NULL;
+
+          if (icon != NULL)
+            {
+              g_file_info_set_symbolic_icon (info, icon);
+              g_object_unref (icon);
+            }
+        }
 
-	    }
-	  
-	  g_free (content_type);
-	}
+      if (content_type != NULL)
+        {
+          g_file_info_set_content_type (info, content_type);
+          g_free (content_type);
+        }
     }
 
   if (_g_file_attribute_matcher_matches_id (attribute_matcher,
